{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "b783b34d5d524678891ff915b52adc07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_39aad754571145b7988fe9a3e02d49d4",
              "IPY_MODEL_6e4c328d2da4441ea841b129fe66c49d",
              "IPY_MODEL_d450f476a08942b6af60476a64eb3b10"
            ],
            "layout": "IPY_MODEL_95d884ef4e534e6c98d8cc28d7112259"
          }
        },
        "39aad754571145b7988fe9a3e02d49d4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5bc8eef435404233ac0de5e84fe1f5bf",
            "placeholder": "​",
            "style": "IPY_MODEL_3ff9987e48284b90b1ac25bec29d467f",
            "value": "Dl Completed...: 100%"
          }
        },
        "6e4c328d2da4441ea841b129fe66c49d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_52a049d1405543868687b329fa4d1d49",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_bf3c05b7fdcb4347bbe56debd61288b1",
            "value": 1
          }
        },
        "d450f476a08942b6af60476a64eb3b10": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_8aeb62c71394401f8261d51dd334aa7e",
            "placeholder": "​",
            "style": "IPY_MODEL_b88bae7b89f0472a84db54f3a5352401",
            "value": " 1/1 [00:13&lt;00:00, 13.41s/ url]"
          }
        },
        "95d884ef4e534e6c98d8cc28d7112259": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5bc8eef435404233ac0de5e84fe1f5bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3ff9987e48284b90b1ac25bec29d467f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "52a049d1405543868687b329fa4d1d49": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "bf3c05b7fdcb4347bbe56debd61288b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "8aeb62c71394401f8261d51dd334aa7e": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b88bae7b89f0472a84db54f3a5352401": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "aa461fe80611463c81a415ff845c8c3a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a46bd3503f384778965058630734d409",
              "IPY_MODEL_cb69beddafe545b5adfdbf686c0eeac0",
              "IPY_MODEL_cdc75a3823254f99a8e49f7d67b9a7ce"
            ],
            "layout": "IPY_MODEL_c0f8ae962e8d49358d186a69fde9028b"
          }
        },
        "a46bd3503f384778965058630734d409": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5c0c9a57033748eaaf7c602ab8f03c99",
            "placeholder": "​",
            "style": "IPY_MODEL_1d91ba79c06243ce829504f0d1ac78b2",
            "value": "Dl Size...: 100%"
          }
        },
        "cb69beddafe545b5adfdbf686c0eeac0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_164e85afa1a241cfbb0e5d32b5556940",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_51e279c40fbf4e0c8e9622c048708868",
            "value": 1
          }
        },
        "cdc75a3823254f99a8e49f7d67b9a7ce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3e0f7b43fef147429e6c9916205d5255",
            "placeholder": "​",
            "style": "IPY_MODEL_1ac43e6265ea4ac1801b6be289721ff9",
            "value": " 786/786 [00:13&lt;00:00, 62.84 MiB/s]"
          }
        },
        "c0f8ae962e8d49358d186a69fde9028b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5c0c9a57033748eaaf7c602ab8f03c99": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1d91ba79c06243ce829504f0d1ac78b2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "164e85afa1a241cfbb0e5d32b5556940": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "20px"
          }
        },
        "51e279c40fbf4e0c8e9622c048708868": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "3e0f7b43fef147429e6c9916205d5255": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1ac43e6265ea4ac1801b6be289721ff9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f3310aa1669140dbb7a7eac1f70f8b21": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_40ff75a4726448408396c45dcba0d4b5",
              "IPY_MODEL_1c93f2de5eec4ed0a1358bfcac57108d",
              "IPY_MODEL_ac345f41fd4a4f02893f4987260b2702"
            ],
            "layout": "IPY_MODEL_837e93d48dd541169adc2c541f9b38f8"
          }
        },
        "40ff75a4726448408396c45dcba0d4b5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2529974d29af4c0a8b0364f68da5cc55",
            "placeholder": "​",
            "style": "IPY_MODEL_bcc97b29ad0446e7a01c8842be04353b",
            "value": "Generating splits...: 100%"
          }
        },
        "1c93f2de5eec4ed0a1358bfcac57108d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6576f9f3120840c9bfc8318619f2c9bb",
            "max": 1,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_5ce0561959264c3296db1c7312a6f95d",
            "value": 1
          }
        },
        "ac345f41fd4a4f02893f4987260b2702": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_123630ea7bbd44669186099ad13b4c14",
            "placeholder": "​",
            "style": "IPY_MODEL_08bf552df4e2480d851e17621a515e34",
            "value": " 1/1 [01:36&lt;00:00, 96.17s/ splits]"
          }
        },
        "837e93d48dd541169adc2c541f9b38f8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "2529974d29af4c0a8b0364f68da5cc55": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bcc97b29ad0446e7a01c8842be04353b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6576f9f3120840c9bfc8318619f2c9bb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5ce0561959264c3296db1c7312a6f95d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "123630ea7bbd44669186099ad13b4c14": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "08bf552df4e2480d851e17621a515e34": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ff3e78e348764286a6c59ebc603c8c5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ba280ca55fd44482949412d711f1533f",
              "IPY_MODEL_66c317683f154ce4b3e5b41084318f9e",
              "IPY_MODEL_b83d42459e194307af6ab6e26e529275"
            ],
            "layout": "IPY_MODEL_71d9b3ba4de248038bb046fbc48d6179"
          }
        },
        "ba280ca55fd44482949412d711f1533f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_35e56ecd44314515b5a6bda8b6f4334c",
            "placeholder": "​",
            "style": "IPY_MODEL_ba21d2ebbd3d4e71b7b25af9edaa3790",
            "value": "Generating train examples...:  99%"
          }
        },
        "66c317683f154ce4b3e5b41084318f9e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ada237e55fa94bddaa6fd0cead8975c8",
            "max": 23262,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_3e74462822e74811ba5f4ba49ad7364e",
            "value": 23262
          }
        },
        "b83d42459e194307af6ab6e26e529275": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5b60129dc3164545ab6ffbf6f1b6d3ce",
            "placeholder": "​",
            "style": "IPY_MODEL_c2689b96132348a0a13659f35fbd16c7",
            "value": " 23057/23262 [01:31&lt;00:01, 128.60 examples/s]"
          }
        },
        "71d9b3ba4de248038bb046fbc48d6179": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "35e56ecd44314515b5a6bda8b6f4334c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ba21d2ebbd3d4e71b7b25af9edaa3790": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ada237e55fa94bddaa6fd0cead8975c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3e74462822e74811ba5f4ba49ad7364e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5b60129dc3164545ab6ffbf6f1b6d3ce": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c2689b96132348a0a13659f35fbd16c7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "86f255367c664ec582e44e221b8035a5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_95e751182d7a463e9d4be0fe2e4fcf05",
              "IPY_MODEL_3a8d65a8345e406f9f13113c2508b934",
              "IPY_MODEL_46599de9f3df4710b028af861b648b04"
            ],
            "layout": "IPY_MODEL_43b274cf6a0b4c6188c10c830b2f1a26"
          }
        },
        "95e751182d7a463e9d4be0fe2e4fcf05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3952313ff40b4184b49405d7a1532d91",
            "placeholder": "​",
            "style": "IPY_MODEL_3abfdcf3960e4c8bb00e3680984f42e3",
            "value": "Shuffling /root/tensorflow_datasets/cats_vs_dogs/incomplete.7KOL4I_4.0.1/cats_vs_dogs-train.tfrecord*...:  95%"
          }
        },
        "3a8d65a8345e406f9f13113c2508b934": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2ad6fbbcb61140088830b43301d4a8d7",
            "max": 23262,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ccc01197186440f9874d940e13a2c14f",
            "value": 23262
          }
        },
        "46599de9f3df4710b028af861b648b04": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b2cf5f3e31eb4d5aa4133a07b2b31a6c",
            "placeholder": "​",
            "style": "IPY_MODEL_ad7060b6dafb42b8ae977e8e69c3734a",
            "value": " 21986/23262 [00:04&lt;00:00, 5568.15 examples/s]"
          }
        },
        "43b274cf6a0b4c6188c10c830b2f1a26": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": "hidden",
            "width": null
          }
        },
        "3952313ff40b4184b49405d7a1532d91": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3abfdcf3960e4c8bb00e3680984f42e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "2ad6fbbcb61140088830b43301d4a8d7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ccc01197186440f9874d940e13a2c14f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "b2cf5f3e31eb4d5aa4133a07b2b31a6c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ad7060b6dafb42b8ae977e8e69c3734a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Inteligencia Artificial y Redes Neuronales\n",
        "# PIA:         Entrenamiento de una red neuronal convolucional\n",
        "# Grupo:008    Hora: N4       Semestre: Agosto-Diciembre 2024\n",
        "# Equipo 1:    2127839 Bryan Alejandro Lara Carrera\n",
        "#              2020381 Mario Treviño Rocha\n",
        "#              1923949 Ovet Orlando García Quiroz\n",
        "#              1968723 Leonardo Antonio Chavez Mendoza"
      ],
      "metadata": {
        "id": "iSt8rpuP7I8L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4Ofbroz853L_"
      },
      "outputs": [],
      "source": [
        "# Paso 1: importar librerías\n",
        "\n",
        "import tensorflow as tf\n",
        "import tensorflow_datasets as tfds\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.callbacks import TensorBoard\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "datos, metadatos =tfds.load('cats_vs_dogs',\n",
        "                   as_supervised=True,\n",
        "                   with_info=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 133,
          "referenced_widgets": [
            "b783b34d5d524678891ff915b52adc07",
            "39aad754571145b7988fe9a3e02d49d4",
            "6e4c328d2da4441ea841b129fe66c49d",
            "d450f476a08942b6af60476a64eb3b10",
            "95d884ef4e534e6c98d8cc28d7112259",
            "5bc8eef435404233ac0de5e84fe1f5bf",
            "3ff9987e48284b90b1ac25bec29d467f",
            "52a049d1405543868687b329fa4d1d49",
            "bf3c05b7fdcb4347bbe56debd61288b1",
            "8aeb62c71394401f8261d51dd334aa7e",
            "b88bae7b89f0472a84db54f3a5352401",
            "aa461fe80611463c81a415ff845c8c3a",
            "a46bd3503f384778965058630734d409",
            "cb69beddafe545b5adfdbf686c0eeac0",
            "cdc75a3823254f99a8e49f7d67b9a7ce",
            "c0f8ae962e8d49358d186a69fde9028b",
            "5c0c9a57033748eaaf7c602ab8f03c99",
            "1d91ba79c06243ce829504f0d1ac78b2",
            "164e85afa1a241cfbb0e5d32b5556940",
            "51e279c40fbf4e0c8e9622c048708868",
            "3e0f7b43fef147429e6c9916205d5255",
            "1ac43e6265ea4ac1801b6be289721ff9",
            "f3310aa1669140dbb7a7eac1f70f8b21",
            "40ff75a4726448408396c45dcba0d4b5",
            "1c93f2de5eec4ed0a1358bfcac57108d",
            "ac345f41fd4a4f02893f4987260b2702",
            "837e93d48dd541169adc2c541f9b38f8",
            "2529974d29af4c0a8b0364f68da5cc55",
            "bcc97b29ad0446e7a01c8842be04353b",
            "6576f9f3120840c9bfc8318619f2c9bb",
            "5ce0561959264c3296db1c7312a6f95d",
            "123630ea7bbd44669186099ad13b4c14",
            "08bf552df4e2480d851e17621a515e34",
            "ff3e78e348764286a6c59ebc603c8c5d",
            "ba280ca55fd44482949412d711f1533f",
            "66c317683f154ce4b3e5b41084318f9e",
            "b83d42459e194307af6ab6e26e529275",
            "71d9b3ba4de248038bb046fbc48d6179",
            "35e56ecd44314515b5a6bda8b6f4334c",
            "ba21d2ebbd3d4e71b7b25af9edaa3790",
            "ada237e55fa94bddaa6fd0cead8975c8",
            "3e74462822e74811ba5f4ba49ad7364e",
            "5b60129dc3164545ab6ffbf6f1b6d3ce",
            "c2689b96132348a0a13659f35fbd16c7",
            "86f255367c664ec582e44e221b8035a5",
            "95e751182d7a463e9d4be0fe2e4fcf05",
            "3a8d65a8345e406f9f13113c2508b934",
            "46599de9f3df4710b028af861b648b04",
            "43b274cf6a0b4c6188c10c830b2f1a26",
            "3952313ff40b4184b49405d7a1532d91",
            "3abfdcf3960e4c8bb00e3680984f42e3",
            "2ad6fbbcb61140088830b43301d4a8d7",
            "ccc01197186440f9874d940e13a2c14f",
            "b2cf5f3e31eb4d5aa4133a07b2b31a6c",
            "ad7060b6dafb42b8ae977e8e69c3734a"
          ]
        },
        "id": "njBZtDo76mtB",
        "outputId": "6d5f2572-671c-4580-a276-0fdb3e9551f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading and preparing dataset 786.67 MiB (download: 786.67 MiB, generated: 1.04 GiB, total: 1.81 GiB) to /root/tensorflow_datasets/cats_vs_dogs/4.0.1...\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Dl Completed...: 0 url [00:00, ? url/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "b783b34d5d524678891ff915b52adc07"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Dl Size...: 0 MiB [00:00, ? MiB/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "aa461fe80611463c81a415ff845c8c3a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Generating splits...:   0%|          | 0/1 [00:00<?, ? splits/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f3310aa1669140dbb7a7eac1f70f8b21"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Generating train examples...:   0%|          | 0/23262 [00:00<?, ? examples/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "ff3e78e348764286a6c59ebc603c8c5d"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:1738 images were corrupted and were skipped\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Shuffling /root/tensorflow_datasets/cats_vs_dogs/incomplete.7KOL4I_4.0.1/cats_vs_dogs-train.tfrecord*...:   0%…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "86f255367c664ec582e44e221b8035a5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset cats_vs_dogs downloaded and prepared to /root/tensorflow_datasets/cats_vs_dogs/4.0.1. Subsequent calls will reuse this data.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Análisis de datos\n",
        "\n",
        "metadatos"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iT0rebJO7T7J",
        "outputId": "3c4acc68-e046-4ae8-f3ff-f7df54b977c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tfds.core.DatasetInfo(\n",
              "    name='cats_vs_dogs',\n",
              "    full_name='cats_vs_dogs/4.0.1',\n",
              "    description=\"\"\"\n",
              "    A large set of images of cats and dogs. There are 1738 corrupted images that are dropped.\n",
              "    \"\"\",\n",
              "    homepage='https://www.microsoft.com/en-us/download/details.aspx?id=54765',\n",
              "    data_dir=PosixGPath('/tmp/tmpz6eup8fetfds'),\n",
              "    file_format=tfrecord,\n",
              "    download_size=Unknown size,\n",
              "    dataset_size=1.04 GiB,\n",
              "    features=FeaturesDict({\n",
              "        'image': Image(shape=(None, None, 3), dtype=uint8),\n",
              "        'image/filename': Text(shape=(), dtype=string),\n",
              "        'label': ClassLabel(shape=(), dtype=int64, num_classes=2),\n",
              "    }),\n",
              "    supervised_keys=('image', 'label'),\n",
              "    disable_shuffling=False,\n",
              "    splits={\n",
              "        'train': <SplitInfo num_examples=23262, num_shards=16>,\n",
              "    },\n",
              "    citation=\"\"\"@Inproceedings (Conference){asirra-a-captcha-that-exploits-interest-aligned-manual-image-categorization,\n",
              "    author = {Elson, Jeremy and Douceur, John (JD) and Howell, Jon and Saul, Jared},\n",
              "    title = {Asirra: A CAPTCHA that Exploits Interest-Aligned Manual Image Categorization},\n",
              "    booktitle = {Proceedings of 14th ACM Conference on Computer and Communications Security (CCS)},\n",
              "    year = {2007},\n",
              "    month = {October},\n",
              "    publisher = {Association for Computing Machinery, Inc.},\n",
              "    url = {https://www.microsoft.com/en-us/research/publication/asirra-a-captcha-that-exploits-interest-aligned-manual-image-categorization/},\n",
              "    edition = {Proceedings of 14th ACM Conference on Computer and Communications Security (CCS)},\n",
              "    }\"\"\",\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Paso 3: Preprocesamiento de datos\n",
        "\n",
        "plt.figure(figsize=(20,20)) # Mostrar 20 imágenes\n",
        "Tamaño_img=80 #Tamaño de imagen\n",
        "\n",
        "for i, (imagen, etiqueta) in enumerate(datos['train'].take(25)):\n",
        "  imagen = cv2.resize(imagen.numpy(), (Tamaño_img, Tamaño_img)) #Cambiar tamaño de imagen\n",
        "  imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)\n",
        "  plt.subplot(5, 5, i+1)\n",
        "  plt.imshow(imagen, cmap='gray')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "H21pQ8_K7ZvX",
        "outputId": "e11f46d3-0e7a-4af8-84c2-07484658004b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x2000 with 25 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Creando variable de entrenamiento\n",
        "Img_entrena = []"
      ],
      "metadata": {
        "id": "UAcAXBrU8h90"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i, (imagen, etiqueta) in enumerate(datos['train']):\n",
        "  imagen = cv2.resize(imagen.numpy(), (Tamaño_img, Tamaño_img))\n",
        "  imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)\n",
        "  imagen = imagen.reshape(Tamaño_img, Tamaño_img, 1)\n",
        "  Img_entrena.append([imagen, etiqueta])"
      ],
      "metadata": {
        "id": "oHw39IoC-Ikh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Img_entrena"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "EGNSCe9t_PI1",
        "outputId": "db1b1fae-dc61-48ae-8a32-4b4a36d8b79f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[array([[[246],\n",
              "          [140],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [188],\n",
              "          [179],\n",
              "          [159]],\n",
              "  \n",
              "         [[202],\n",
              "          [ 88],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [167],\n",
              "          [165],\n",
              "          [184]],\n",
              "  \n",
              "         [[120],\n",
              "          [ 84],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [166],\n",
              "          [142],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[181],\n",
              "          [190],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 56],\n",
              "          [100]],\n",
              "  \n",
              "         [[146],\n",
              "          [165],\n",
              "          [138],\n",
              "          ...,\n",
              "          [104],\n",
              "          [163],\n",
              "          [129]],\n",
              "  \n",
              "         [[113],\n",
              "          [108],\n",
              "          [141],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 49],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[164],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 75],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 65],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 93],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 66],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 54],\n",
              "          [ 86]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 62],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 71],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 48],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 80],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 54],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[186],\n",
              "          [208],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 80],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[233],\n",
              "          [219],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[211],\n",
              "          [190],\n",
              "          [177],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          [ 72]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [ 99],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [212],\n",
              "          [216],\n",
              "          [229]],\n",
              "  \n",
              "         [[102],\n",
              "          [108],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [204],\n",
              "          [212],\n",
              "          [227]],\n",
              "  \n",
              "         [[134],\n",
              "          [102],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [201],\n",
              "          [211],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[51],\n",
              "          [54],\n",
              "          [55],\n",
              "          ...,\n",
              "          [76],\n",
              "          [74],\n",
              "          [71]],\n",
              "  \n",
              "         [[51],\n",
              "          [55],\n",
              "          [56],\n",
              "          ...,\n",
              "          [76],\n",
              "          [76],\n",
              "          [73]],\n",
              "  \n",
              "         [[50],\n",
              "          [55],\n",
              "          [58],\n",
              "          ...,\n",
              "          [77],\n",
              "          [76],\n",
              "          [73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[25],\n",
              "          [25],\n",
              "          [25],\n",
              "          ...,\n",
              "          [85],\n",
              "          [83],\n",
              "          [72]],\n",
              "  \n",
              "         [[24],\n",
              "          [24],\n",
              "          [24],\n",
              "          ...,\n",
              "          [85],\n",
              "          [80],\n",
              "          [71]],\n",
              "  \n",
              "         [[24],\n",
              "          [25],\n",
              "          [25],\n",
              "          ...,\n",
              "          [84],\n",
              "          [79],\n",
              "          [69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[140],\n",
              "          [143],\n",
              "          [152],\n",
              "          ...,\n",
              "          [174],\n",
              "          [176],\n",
              "          [181]],\n",
              "  \n",
              "         [[136],\n",
              "          [140],\n",
              "          [149],\n",
              "          ...,\n",
              "          [174],\n",
              "          [176],\n",
              "          [181]],\n",
              "  \n",
              "         [[126],\n",
              "          [126],\n",
              "          [130],\n",
              "          ...,\n",
              "          [174],\n",
              "          [176],\n",
              "          [181]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [152],\n",
              "          [174],\n",
              "          ...,\n",
              "          [164],\n",
              "          [158],\n",
              "          [162]],\n",
              "  \n",
              "         [[166],\n",
              "          [168],\n",
              "          [171],\n",
              "          ...,\n",
              "          [156],\n",
              "          [159],\n",
              "          [156]],\n",
              "  \n",
              "         [[168],\n",
              "          [170],\n",
              "          [172],\n",
              "          ...,\n",
              "          [159],\n",
              "          [165],\n",
              "          [160]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[125],\n",
              "          [109],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [118],\n",
              "          [114],\n",
              "          [128]],\n",
              "  \n",
              "         [[139],\n",
              "          [114],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [120],\n",
              "          [115],\n",
              "          [127]],\n",
              "  \n",
              "         [[150],\n",
              "          [117],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [121],\n",
              "          [114],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 70],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [128],\n",
              "          [119],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 68],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [123],\n",
              "          [116],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 71],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [113],\n",
              "          [108],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 46],\n",
              "          [ 47],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 87],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 59],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 74],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 65],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 65],\n",
              "          [ 98]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[177],\n",
              "          [167],\n",
              "          [168],\n",
              "          ...,\n",
              "          [102],\n",
              "          [178],\n",
              "          [179]],\n",
              "  \n",
              "         [[172],\n",
              "          [176],\n",
              "          [163],\n",
              "          ...,\n",
              "          [188],\n",
              "          [146],\n",
              "          [160]],\n",
              "  \n",
              "         [[171],\n",
              "          [165],\n",
              "          [162],\n",
              "          ...,\n",
              "          [190],\n",
              "          [158],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 47],\n",
              "          [ 71],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [164],\n",
              "          [ 80],\n",
              "          [158]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 62],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [158],\n",
              "          [ 41],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 54],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [164],\n",
              "          [ 76],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [136],\n",
              "          [140],\n",
              "          ...,\n",
              "          [147],\n",
              "          [144],\n",
              "          [143]],\n",
              "  \n",
              "         [[125],\n",
              "          [132],\n",
              "          [141],\n",
              "          ...,\n",
              "          [146],\n",
              "          [146],\n",
              "          [139]],\n",
              "  \n",
              "         [[124],\n",
              "          [130],\n",
              "          [145],\n",
              "          ...,\n",
              "          [139],\n",
              "          [144],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 32],\n",
              "          [ 24],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 54],\n",
              "          [190]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 27],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 84],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 34],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [106],\n",
              "          [150],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 72],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 83],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 56],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 91],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 55],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [113],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 38],\n",
              "          [ 38],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 49],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 37],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 61],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 36],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 54],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [117],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 37],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[113],\n",
              "          [109],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 37],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[102],\n",
              "          [107],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 40],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[139],\n",
              "          [149],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 21],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [126],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 20],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[134],\n",
              "          [110],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[124],\n",
              "          [125],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 83],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[120],\n",
              "          [119],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 68],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[127],\n",
              "          [120],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 74],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[134],\n",
              "          [136],\n",
              "          [136],\n",
              "          ...,\n",
              "          [119],\n",
              "          [118],\n",
              "          [119]],\n",
              "  \n",
              "         [[134],\n",
              "          [136],\n",
              "          [136],\n",
              "          ...,\n",
              "          [121],\n",
              "          [121],\n",
              "          [122]],\n",
              "  \n",
              "         [[135],\n",
              "          [136],\n",
              "          [136],\n",
              "          ...,\n",
              "          [120],\n",
              "          [122],\n",
              "          [121]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 97],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [179],\n",
              "          [181],\n",
              "          [180]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 96],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [173],\n",
              "          [180],\n",
              "          [182]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [103],\n",
              "          [112],\n",
              "          ...,\n",
              "          [168],\n",
              "          [177],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 84],\n",
              "          [ 89],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [142],\n",
              "          [136],\n",
              "          [128]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 71],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [141],\n",
              "          [135],\n",
              "          [128]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 39],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [141],\n",
              "          [134],\n",
              "          [130]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [100],\n",
              "          [101],\n",
              "          ...,\n",
              "          [108],\n",
              "          [103],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[105],\n",
              "          [ 98],\n",
              "          [101],\n",
              "          ...,\n",
              "          [103],\n",
              "          [101],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 98],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 96],\n",
              "          [ 90]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[109],\n",
              "          [106],\n",
              "          [106],\n",
              "          ...,\n",
              "          [139],\n",
              "          [136],\n",
              "          [140]],\n",
              "  \n",
              "         [[104],\n",
              "          [105],\n",
              "          [109],\n",
              "          ...,\n",
              "          [136],\n",
              "          [134],\n",
              "          [131]],\n",
              "  \n",
              "         [[109],\n",
              "          [106],\n",
              "          [104],\n",
              "          ...,\n",
              "          [139],\n",
              "          [134],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[235],\n",
              "          [236],\n",
              "          [233],\n",
              "          ...,\n",
              "          [206],\n",
              "          [209],\n",
              "          [203]],\n",
              "  \n",
              "         [[235],\n",
              "          [237],\n",
              "          [227],\n",
              "          ...,\n",
              "          [210],\n",
              "          [213],\n",
              "          [204]],\n",
              "  \n",
              "         [[234],\n",
              "          [240],\n",
              "          [237],\n",
              "          ...,\n",
              "          [212],\n",
              "          [207],\n",
              "          [214]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 88],\n",
              "          [ 93],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 21],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 93],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 17],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 36],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 19],\n",
              "          [ 16]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [117],\n",
              "          [124],\n",
              "          ...,\n",
              "          [166],\n",
              "          [164],\n",
              "          [159]],\n",
              "  \n",
              "         [[168],\n",
              "          [123],\n",
              "          [172],\n",
              "          ...,\n",
              "          [142],\n",
              "          [143],\n",
              "          [151]],\n",
              "  \n",
              "         [[134],\n",
              "          [134],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [145],\n",
              "          [141],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 17],\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 86],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 17],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 86],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 18],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 86],\n",
              "          [ 85]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [130],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 91],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[130],\n",
              "          [132],\n",
              "          [132],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 89],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[133],\n",
              "          [129],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 82],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 41],\n",
              "          [ 15],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 66],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 21],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 68],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 17],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 66],\n",
              "          [ 70]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[111],\n",
              "          [122],\n",
              "          [132],\n",
              "          ...,\n",
              "          [161],\n",
              "          [146],\n",
              "          [150]],\n",
              "  \n",
              "         [[111],\n",
              "          [117],\n",
              "          [119],\n",
              "          ...,\n",
              "          [157],\n",
              "          [174],\n",
              "          [164]],\n",
              "  \n",
              "         [[101],\n",
              "          [112],\n",
              "          [117],\n",
              "          ...,\n",
              "          [164],\n",
              "          [139],\n",
              "          [163]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[115],\n",
              "          [115],\n",
              "          [117],\n",
              "          ...,\n",
              "          [129],\n",
              "          [110],\n",
              "          [219]],\n",
              "  \n",
              "         [[114],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [130],\n",
              "          [104],\n",
              "          [220]],\n",
              "  \n",
              "         [[114],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [139],\n",
              "          [108],\n",
              "          [214]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [146],\n",
              "          [143],\n",
              "          ...,\n",
              "          [118],\n",
              "          [ 96],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[156],\n",
              "          [155],\n",
              "          [155],\n",
              "          ...,\n",
              "          [122],\n",
              "          [105],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[161],\n",
              "          [163],\n",
              "          [161],\n",
              "          ...,\n",
              "          [115],\n",
              "          [109],\n",
              "          [ 30]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 98],\n",
              "          [103],\n",
              "          [105],\n",
              "          ...,\n",
              "          [104],\n",
              "          [102],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [103],\n",
              "          [105],\n",
              "          ...,\n",
              "          [106],\n",
              "          [104],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[103],\n",
              "          [100],\n",
              "          [105],\n",
              "          ...,\n",
              "          [111],\n",
              "          [105],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 81],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [125],\n",
              "          [123],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 79],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [124],\n",
              "          [119],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 74],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [125],\n",
              "          [131],\n",
              "          [128]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[184],\n",
              "          [189],\n",
              "          [195],\n",
              "          ...,\n",
              "          [199],\n",
              "          [195],\n",
              "          [197]],\n",
              "  \n",
              "         [[191],\n",
              "          [186],\n",
              "          [185],\n",
              "          ...,\n",
              "          [192],\n",
              "          [195],\n",
              "          [196]],\n",
              "  \n",
              "         [[184],\n",
              "          [189],\n",
              "          [186],\n",
              "          ...,\n",
              "          [189],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[187],\n",
              "          [188],\n",
              "          [189],\n",
              "          ...,\n",
              "          [156],\n",
              "          [165],\n",
              "          [172]],\n",
              "  \n",
              "         [[187],\n",
              "          [188],\n",
              "          [190],\n",
              "          ...,\n",
              "          [154],\n",
              "          [161],\n",
              "          [178]],\n",
              "  \n",
              "         [[188],\n",
              "          [187],\n",
              "          [192],\n",
              "          ...,\n",
              "          [154],\n",
              "          [163],\n",
              "          [170]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[232],\n",
              "          [ 58],\n",
              "          [253],\n",
              "          ...,\n",
              "          [227],\n",
              "          [ 62],\n",
              "          [180]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 57],\n",
              "          [120],\n",
              "          ...,\n",
              "          [229],\n",
              "          [ 58],\n",
              "          [172]],\n",
              "  \n",
              "         [[222],\n",
              "          [ 55],\n",
              "          [254],\n",
              "          ...,\n",
              "          [228],\n",
              "          [ 55],\n",
              "          [171]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[203],\n",
              "          [196],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [  9],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[195],\n",
              "          [195],\n",
              "          [197],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [  6],\n",
              "          [  9]],\n",
              "  \n",
              "         [[190],\n",
              "          [190],\n",
              "          [186],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 20],\n",
              "          [ 29]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[251],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [166],\n",
              "          [173],\n",
              "          [180]],\n",
              "  \n",
              "         [[251],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [166],\n",
              "          [176],\n",
              "          [173]],\n",
              "  \n",
              "         [[250],\n",
              "          [248],\n",
              "          [250],\n",
              "          ...,\n",
              "          [174],\n",
              "          [181],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[225],\n",
              "          [233],\n",
              "          [238],\n",
              "          ...,\n",
              "          [191],\n",
              "          [191],\n",
              "          [190]],\n",
              "  \n",
              "         [[237],\n",
              "          [240],\n",
              "          [240],\n",
              "          ...,\n",
              "          [190],\n",
              "          [190],\n",
              "          [189]],\n",
              "  \n",
              "         [[242],\n",
              "          [244],\n",
              "          [245],\n",
              "          ...,\n",
              "          [190],\n",
              "          [187],\n",
              "          [189]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[195],\n",
              "          [200],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 77],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[187],\n",
              "          [184],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 76],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[169],\n",
              "          [190],\n",
              "          [187],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 73],\n",
              "          [ 78]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[180],\n",
              "          [ 87],\n",
              "          [140],\n",
              "          ...,\n",
              "          [178],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         [[159],\n",
              "          [164],\n",
              "          [122],\n",
              "          ...,\n",
              "          [103],\n",
              "          [107],\n",
              "          [176]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [158],\n",
              "          [155],\n",
              "          ...,\n",
              "          [148],\n",
              "          [134],\n",
              "          [123]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 62],\n",
              "          [ 61],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 90],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 28],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 87],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 30],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 87],\n",
              "          [ 88]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[117],\n",
              "          [112],\n",
              "          [115],\n",
              "          ...,\n",
              "          [104],\n",
              "          [109],\n",
              "          [103]],\n",
              "  \n",
              "         [[113],\n",
              "          [110],\n",
              "          [104],\n",
              "          ...,\n",
              "          [104],\n",
              "          [100],\n",
              "          [108]],\n",
              "  \n",
              "         [[131],\n",
              "          [132],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [103],\n",
              "          [111]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[45],\n",
              "          [40],\n",
              "          [36],\n",
              "          ...,\n",
              "          [27],\n",
              "          [29],\n",
              "          [31]],\n",
              "  \n",
              "         [[45],\n",
              "          [44],\n",
              "          [40],\n",
              "          ...,\n",
              "          [30],\n",
              "          [30],\n",
              "          [31]],\n",
              "  \n",
              "         [[42],\n",
              "          [44],\n",
              "          [42],\n",
              "          ...,\n",
              "          [32],\n",
              "          [30],\n",
              "          [31]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[60],\n",
              "          [42],\n",
              "          [60],\n",
              "          ...,\n",
              "          [37],\n",
              "          [52],\n",
              "          [32]],\n",
              "  \n",
              "         [[60],\n",
              "          [51],\n",
              "          [45],\n",
              "          ...,\n",
              "          [41],\n",
              "          [52],\n",
              "          [51]],\n",
              "  \n",
              "         [[58],\n",
              "          [43],\n",
              "          [48],\n",
              "          ...,\n",
              "          [51],\n",
              "          [38],\n",
              "          [46]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 49],\n",
              "          [ 47],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 88],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 49],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 81],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 51],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 78],\n",
              "          [ 78]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [123],\n",
              "          [122],\n",
              "          ...,\n",
              "          [128],\n",
              "          [129],\n",
              "          [107]],\n",
              "  \n",
              "         [[124],\n",
              "          [125],\n",
              "          [125],\n",
              "          ...,\n",
              "          [135],\n",
              "          [133],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[120],\n",
              "          [123],\n",
              "          [124],\n",
              "          ...,\n",
              "          [116],\n",
              "          [118],\n",
              "          [101]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 74],\n",
              "          [ 75],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [132],\n",
              "          [132],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 60],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [142],\n",
              "          [141],\n",
              "          [138]],\n",
              "  \n",
              "         [[101],\n",
              "          [100],\n",
              "          [102],\n",
              "          ...,\n",
              "          [145],\n",
              "          [146],\n",
              "          [142]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 19],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 36],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 21],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 32],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 20],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 41],\n",
              "          [ 37]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 76],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 51],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 90],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 52],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 83],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 52],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 44],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 46],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 52],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 51],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 73],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 47],\n",
              "          [ 47]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[155],\n",
              "          [153],\n",
              "          [146],\n",
              "          ...,\n",
              "          [160],\n",
              "          [177],\n",
              "          [169]],\n",
              "  \n",
              "         [[146],\n",
              "          [151],\n",
              "          [155],\n",
              "          ...,\n",
              "          [162],\n",
              "          [162],\n",
              "          [174]],\n",
              "  \n",
              "         [[151],\n",
              "          [150],\n",
              "          [150],\n",
              "          ...,\n",
              "          [174],\n",
              "          [162],\n",
              "          [167]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[115],\n",
              "          [137],\n",
              "          [131],\n",
              "          ...,\n",
              "          [140],\n",
              "          [160],\n",
              "          [161]],\n",
              "  \n",
              "         [[115],\n",
              "          [129],\n",
              "          [132],\n",
              "          ...,\n",
              "          [141],\n",
              "          [137],\n",
              "          [176]],\n",
              "  \n",
              "         [[111],\n",
              "          [130],\n",
              "          [123],\n",
              "          ...,\n",
              "          [157],\n",
              "          [173],\n",
              "          [148]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 42],\n",
              "          [ 83],\n",
              "          [137],\n",
              "          ...,\n",
              "          [156],\n",
              "          [126],\n",
              "          [148]],\n",
              "  \n",
              "         [[183],\n",
              "          [178],\n",
              "          [224],\n",
              "          ...,\n",
              "          [171],\n",
              "          [105],\n",
              "          [101]],\n",
              "  \n",
              "         [[198],\n",
              "          [117],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [165],\n",
              "          [214],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[194],\n",
              "          [222],\n",
              "          [234],\n",
              "          ...,\n",
              "          [151],\n",
              "          [169],\n",
              "          [178]],\n",
              "  \n",
              "         [[212],\n",
              "          [218],\n",
              "          [229],\n",
              "          ...,\n",
              "          [218],\n",
              "          [172],\n",
              "          [189]],\n",
              "  \n",
              "         [[217],\n",
              "          [218],\n",
              "          [217],\n",
              "          ...,\n",
              "          [194],\n",
              "          [178],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[116],\n",
              "          [175],\n",
              "          [149],\n",
              "          ...,\n",
              "          [105],\n",
              "          [151],\n",
              "          [112]],\n",
              "  \n",
              "         [[125],\n",
              "          [168],\n",
              "          [154],\n",
              "          ...,\n",
              "          [121],\n",
              "          [112],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[112],\n",
              "          [ 91],\n",
              "          [153],\n",
              "          ...,\n",
              "          [112],\n",
              "          [117],\n",
              "          [167]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [ 85],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 70],\n",
              "          [138]],\n",
              "  \n",
              "         [[150],\n",
              "          [ 56],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [148],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[150],\n",
              "          [ 51],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 55],\n",
              "          [ 56]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  5],\n",
              "          [  2],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  0]],\n",
              "  \n",
              "         [[  5],\n",
              "          [  3],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  3],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  2],\n",
              "          [  2]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [153],\n",
              "          [164],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 88],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[142],\n",
              "          [152],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 80],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[155],\n",
              "          [151],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 79],\n",
              "          [ 83]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[100],\n",
              "          [103],\n",
              "          [213],\n",
              "          ...,\n",
              "          [107],\n",
              "          [104],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [101],\n",
              "          [185],\n",
              "          ...,\n",
              "          [106],\n",
              "          [104],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [102],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [102],\n",
              "          [118],\n",
              "          [ 65]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[239],\n",
              "          [245],\n",
              "          [247],\n",
              "          ...,\n",
              "          [100],\n",
              "          [185],\n",
              "          [100]],\n",
              "  \n",
              "         [[241],\n",
              "          [245],\n",
              "          [249],\n",
              "          ...,\n",
              "          [158],\n",
              "          [200],\n",
              "          [236]],\n",
              "  \n",
              "         [[238],\n",
              "          [250],\n",
              "          [244],\n",
              "          ...,\n",
              "          [185],\n",
              "          [177],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[108],\n",
              "          [109],\n",
              "          [111],\n",
              "          ...,\n",
              "          [144],\n",
              "          [144],\n",
              "          [143]],\n",
              "  \n",
              "         [[105],\n",
              "          [106],\n",
              "          [109],\n",
              "          ...,\n",
              "          [143],\n",
              "          [142],\n",
              "          [146]],\n",
              "  \n",
              "         [[109],\n",
              "          [110],\n",
              "          [109],\n",
              "          ...,\n",
              "          [145],\n",
              "          [144],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[196],\n",
              "          [196],\n",
              "          [195],\n",
              "          ...,\n",
              "          [182],\n",
              "          [146],\n",
              "          [180]],\n",
              "  \n",
              "         [[198],\n",
              "          [198],\n",
              "          [198],\n",
              "          ...,\n",
              "          [166],\n",
              "          [189],\n",
              "          [175]],\n",
              "  \n",
              "         [[197],\n",
              "          [199],\n",
              "          [200],\n",
              "          ...,\n",
              "          [149],\n",
              "          [187],\n",
              "          [186]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [101],\n",
              "          [101],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 94],\n",
              "          [100]],\n",
              "  \n",
              "         [[103],\n",
              "          [102],\n",
              "          [100],\n",
              "          ...,\n",
              "          [105],\n",
              "          [104],\n",
              "          [103]],\n",
              "  \n",
              "         [[107],\n",
              "          [103],\n",
              "          [104],\n",
              "          ...,\n",
              "          [108],\n",
              "          [108],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [145],\n",
              "          [145],\n",
              "          ...,\n",
              "          [152],\n",
              "          [144],\n",
              "          [149]],\n",
              "  \n",
              "         [[146],\n",
              "          [143],\n",
              "          [145],\n",
              "          ...,\n",
              "          [145],\n",
              "          [150],\n",
              "          [147]],\n",
              "  \n",
              "         [[142],\n",
              "          [144],\n",
              "          [146],\n",
              "          ...,\n",
              "          [152],\n",
              "          [150],\n",
              "          [151]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 19],\n",
              "          [ 61],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 70],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 49],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 79],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 13],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 30],\n",
              "          [ 52]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [128],\n",
              "          [138],\n",
              "          ...,\n",
              "          [202],\n",
              "          [201],\n",
              "          [195]],\n",
              "  \n",
              "         [[129],\n",
              "          [137],\n",
              "          [146],\n",
              "          ...,\n",
              "          [206],\n",
              "          [199],\n",
              "          [206]],\n",
              "  \n",
              "         [[139],\n",
              "          [150],\n",
              "          [151],\n",
              "          ...,\n",
              "          [210],\n",
              "          [200],\n",
              "          [191]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 85],\n",
              "          [ 75],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 85],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 74],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [103],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 88],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 65],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 52],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 53],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 85],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 59],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[132],\n",
              "          [152],\n",
              "          [160],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 50],\n",
              "          [ 53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[244],\n",
              "          [244],\n",
              "          [244],\n",
              "          ...,\n",
              "          [101],\n",
              "          [113],\n",
              "          [104]],\n",
              "  \n",
              "         [[244],\n",
              "          [244],\n",
              "          [244],\n",
              "          ...,\n",
              "          [104],\n",
              "          [115],\n",
              "          [111]],\n",
              "  \n",
              "         [[245],\n",
              "          [245],\n",
              "          [245],\n",
              "          ...,\n",
              "          [107],\n",
              "          [119],\n",
              "          [115]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [128],\n",
              "          [122],\n",
              "          ...,\n",
              "          [122],\n",
              "          [120],\n",
              "          [117]],\n",
              "  \n",
              "         [[111],\n",
              "          [126],\n",
              "          [120],\n",
              "          ...,\n",
              "          [108],\n",
              "          [106],\n",
              "          [113]],\n",
              "  \n",
              "         [[120],\n",
              "          [114],\n",
              "          [107],\n",
              "          ...,\n",
              "          [129],\n",
              "          [114],\n",
              "          [123]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[172],\n",
              "          [180],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 72],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[194],\n",
              "          [227],\n",
              "          [198],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 69],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [182],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 70],\n",
              "          [ 75]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 84],\n",
              "          [152],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  7],\n",
              "          [  6]],\n",
              "  \n",
              "         [[140],\n",
              "          [109],\n",
              "          [147],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  7],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[154],\n",
              "          [153],\n",
              "          [149],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  4]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[28],\n",
              "          [14],\n",
              "          [72],\n",
              "          ...,\n",
              "          [27],\n",
              "          [60],\n",
              "          [39]],\n",
              "  \n",
              "         [[29],\n",
              "          [15],\n",
              "          [64],\n",
              "          ...,\n",
              "          [10],\n",
              "          [14],\n",
              "          [15]],\n",
              "  \n",
              "         [[29],\n",
              "          [20],\n",
              "          [60],\n",
              "          ...,\n",
              "          [37],\n",
              "          [37],\n",
              "          [35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 5],\n",
              "          [ 8],\n",
              "          [32],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 2],\n",
              "          [ 3]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [10],\n",
              "          [34],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 3],\n",
              "          [ 0]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [10],\n",
              "          [35],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 2]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[206],\n",
              "          [210],\n",
              "          [209],\n",
              "          ...,\n",
              "          [205],\n",
              "          [217],\n",
              "          [243]],\n",
              "  \n",
              "         [[205],\n",
              "          [206],\n",
              "          [209],\n",
              "          ...,\n",
              "          [209],\n",
              "          [218],\n",
              "          [232]],\n",
              "  \n",
              "         [[205],\n",
              "          [206],\n",
              "          [209],\n",
              "          ...,\n",
              "          [211],\n",
              "          [212],\n",
              "          [223]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [218],\n",
              "          [207],\n",
              "          [206]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [216],\n",
              "          [206],\n",
              "          [206]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [213],\n",
              "          [203],\n",
              "          [200]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 9],\n",
              "          [12],\n",
              "          [70],\n",
              "          ...,\n",
              "          [60],\n",
              "          [61],\n",
              "          [58]],\n",
              "  \n",
              "         [[11],\n",
              "          [22],\n",
              "          [37],\n",
              "          ...,\n",
              "          [65],\n",
              "          [62],\n",
              "          [61]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [20],\n",
              "          [61],\n",
              "          ...,\n",
              "          [61],\n",
              "          [61],\n",
              "          [61]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[92],\n",
              "          [93],\n",
              "          [95],\n",
              "          ...,\n",
              "          [93],\n",
              "          [89],\n",
              "          [82]],\n",
              "  \n",
              "         [[88],\n",
              "          [92],\n",
              "          [95],\n",
              "          ...,\n",
              "          [94],\n",
              "          [89],\n",
              "          [73]],\n",
              "  \n",
              "         [[85],\n",
              "          [89],\n",
              "          [92],\n",
              "          ...,\n",
              "          [91],\n",
              "          [87],\n",
              "          [60]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[176],\n",
              "          [183],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 57],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[166],\n",
              "          [173],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 66],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[154],\n",
              "          [166],\n",
              "          [173],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 68],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 35],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 30],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 34],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 36],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 36],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 35],\n",
              "          [ 34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 30],\n",
              "          [ 10],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [128],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 12],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [136],\n",
              "          [252],\n",
              "          [251]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 12],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [171],\n",
              "          [254],\n",
              "          [236]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 88],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [149],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 22],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 30],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 24],\n",
              "          [161],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 21],\n",
              "          [ 81]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 99],\n",
              "          [ 42],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 47],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 23],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 48],\n",
              "          [132]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 99],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 49],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[221],\n",
              "          [222],\n",
              "          [220],\n",
              "          ...,\n",
              "          [234],\n",
              "          [235],\n",
              "          [236]],\n",
              "  \n",
              "         [[221],\n",
              "          [222],\n",
              "          [223],\n",
              "          ...,\n",
              "          [240],\n",
              "          [235],\n",
              "          [232]],\n",
              "  \n",
              "         [[219],\n",
              "          [221],\n",
              "          [221],\n",
              "          ...,\n",
              "          [237],\n",
              "          [237],\n",
              "          [236]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [251],\n",
              "          [248],\n",
              "          ...,\n",
              "          [219],\n",
              "          [224],\n",
              "          [192]],\n",
              "  \n",
              "         [[253],\n",
              "          [252],\n",
              "          [250],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 11],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[244],\n",
              "          [252],\n",
              "          [253],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 27],\n",
              "          [ 28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 65],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 67],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 63],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 74],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 59],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 39],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [130],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [130],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [130],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[229],\n",
              "          [229],\n",
              "          [229],\n",
              "          ...,\n",
              "          [253],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[229],\n",
              "          [229],\n",
              "          [229],\n",
              "          ...,\n",
              "          [253],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[229],\n",
              "          [229],\n",
              "          [229],\n",
              "          ...,\n",
              "          [253],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 80],\n",
              "          [ 81],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [108],\n",
              "          [111],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 75],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [105],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 89],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [110],\n",
              "          [113]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [102],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 84],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 84],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 66],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 77],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 64],\n",
              "          [ 64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[249],\n",
              "          [242],\n",
              "          [217],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 82],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[246],\n",
              "          [236],\n",
              "          [205],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[249],\n",
              "          [248],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 95],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 84],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 95],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 76],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 84],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 82],\n",
              "          [ 66]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 93],\n",
              "          [ 90],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 52],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 95],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 49],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 97],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 52],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[117],\n",
              "          [114],\n",
              "          [139],\n",
              "          ...,\n",
              "          [133],\n",
              "          [149],\n",
              "          [137]],\n",
              "  \n",
              "         [[116],\n",
              "          [120],\n",
              "          [115],\n",
              "          ...,\n",
              "          [132],\n",
              "          [127],\n",
              "          [133]],\n",
              "  \n",
              "         [[131],\n",
              "          [112],\n",
              "          [108],\n",
              "          ...,\n",
              "          [145],\n",
              "          [136],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[103],\n",
              "          [102],\n",
              "          [101],\n",
              "          ...,\n",
              "          [105],\n",
              "          [102],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[106],\n",
              "          [121],\n",
              "          [180],\n",
              "          ...,\n",
              "          [159],\n",
              "          [137],\n",
              "          [104]],\n",
              "  \n",
              "         [[103],\n",
              "          [115],\n",
              "          [187],\n",
              "          ...,\n",
              "          [155],\n",
              "          [125],\n",
              "          [100]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[102],\n",
              "          [126],\n",
              "          [217],\n",
              "          ...,\n",
              "          [185],\n",
              "          [136],\n",
              "          [104]],\n",
              "  \n",
              "         [[100],\n",
              "          [117],\n",
              "          [174],\n",
              "          ...,\n",
              "          [156],\n",
              "          [123],\n",
              "          [104]],\n",
              "  \n",
              "         [[103],\n",
              "          [103],\n",
              "          [104],\n",
              "          ...,\n",
              "          [104],\n",
              "          [102],\n",
              "          [104]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[158],\n",
              "          [ 69],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 30],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[136],\n",
              "          [ 79],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 58],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[170],\n",
              "          [105],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 61],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 72],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 55],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 34],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 47],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 51],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 39],\n",
              "          [ 25]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 72],\n",
              "          [ 32],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 91],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 69],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 77],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 38],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 57],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [163],\n",
              "          [126],\n",
              "          ...,\n",
              "          [191],\n",
              "          [204],\n",
              "          [203]],\n",
              "  \n",
              "         [[149],\n",
              "          [149],\n",
              "          [165],\n",
              "          ...,\n",
              "          [153],\n",
              "          [216],\n",
              "          [169]],\n",
              "  \n",
              "         [[129],\n",
              "          [161],\n",
              "          [205],\n",
              "          ...,\n",
              "          [178],\n",
              "          [175],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[27],\n",
              "          [22],\n",
              "          [23],\n",
              "          ...,\n",
              "          [18],\n",
              "          [19],\n",
              "          [18]],\n",
              "  \n",
              "         [[28],\n",
              "          [24],\n",
              "          [21],\n",
              "          ...,\n",
              "          [18],\n",
              "          [19],\n",
              "          [19]],\n",
              "  \n",
              "         [[24],\n",
              "          [26],\n",
              "          [19],\n",
              "          ...,\n",
              "          [19],\n",
              "          [19],\n",
              "          [19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[44],\n",
              "          [29],\n",
              "          [46],\n",
              "          ...,\n",
              "          [34],\n",
              "          [40],\n",
              "          [37]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [41],\n",
              "          [42],\n",
              "          ...,\n",
              "          [34],\n",
              "          [37],\n",
              "          [33]],\n",
              "  \n",
              "         [[37],\n",
              "          [42],\n",
              "          [40],\n",
              "          ...,\n",
              "          [39],\n",
              "          [36],\n",
              "          [36]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[177],\n",
              "          [153],\n",
              "          [173],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 92],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[163],\n",
              "          [149],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 90],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[149],\n",
              "          [136],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 76],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [128],\n",
              "          [138],\n",
              "          ...,\n",
              "          [230],\n",
              "          [225],\n",
              "          [228]],\n",
              "  \n",
              "         [[117],\n",
              "          [122],\n",
              "          [129],\n",
              "          ...,\n",
              "          [227],\n",
              "          [230],\n",
              "          [225]],\n",
              "  \n",
              "         [[107],\n",
              "          [114],\n",
              "          [117],\n",
              "          ...,\n",
              "          [222],\n",
              "          [221],\n",
              "          [236]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[35],\n",
              "          [39],\n",
              "          [34],\n",
              "          ...,\n",
              "          [43],\n",
              "          [24],\n",
              "          [23]],\n",
              "  \n",
              "         [[35],\n",
              "          [38],\n",
              "          [36],\n",
              "          ...,\n",
              "          [54],\n",
              "          [24],\n",
              "          [43]],\n",
              "  \n",
              "         [[33],\n",
              "          [33],\n",
              "          [29],\n",
              "          ...,\n",
              "          [49],\n",
              "          [34],\n",
              "          [38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[89],\n",
              "          [71],\n",
              "          [68],\n",
              "          ...,\n",
              "          [58],\n",
              "          [63],\n",
              "          [59]],\n",
              "  \n",
              "         [[92],\n",
              "          [81],\n",
              "          [75],\n",
              "          ...,\n",
              "          [77],\n",
              "          [68],\n",
              "          [67]],\n",
              "  \n",
              "         [[95],\n",
              "          [83],\n",
              "          [82],\n",
              "          ...,\n",
              "          [70],\n",
              "          [58],\n",
              "          [59]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[143],\n",
              "          [ 63],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [125],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[135],\n",
              "          [ 74],\n",
              "          [116],\n",
              "          ...,\n",
              "          [120],\n",
              "          [157],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[124],\n",
              "          [ 79],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [239],\n",
              "          [104],\n",
              "          [ 68]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[129],\n",
              "          [179],\n",
              "          [135],\n",
              "          ...,\n",
              "          [137],\n",
              "          [159],\n",
              "          [164]],\n",
              "  \n",
              "         [[159],\n",
              "          [162],\n",
              "          [103],\n",
              "          ...,\n",
              "          [155],\n",
              "          [170],\n",
              "          [135]],\n",
              "  \n",
              "         [[146],\n",
              "          [167],\n",
              "          [131],\n",
              "          ...,\n",
              "          [143],\n",
              "          [153],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[223],\n",
              "          [232],\n",
              "          [230],\n",
              "          ...,\n",
              "          [145],\n",
              "          [140],\n",
              "          [150]],\n",
              "  \n",
              "         [[226],\n",
              "          [231],\n",
              "          [233],\n",
              "          ...,\n",
              "          [159],\n",
              "          [154],\n",
              "          [158]],\n",
              "  \n",
              "         [[227],\n",
              "          [229],\n",
              "          [233],\n",
              "          ...,\n",
              "          [167],\n",
              "          [164],\n",
              "          [166]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 93],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 58],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 92],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 59],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 90],\n",
              "          [ 91]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[122],\n",
              "          [117],\n",
              "          [152],\n",
              "          ...,\n",
              "          [150],\n",
              "          [130],\n",
              "          [133]],\n",
              "  \n",
              "         [[122],\n",
              "          [107],\n",
              "          [130],\n",
              "          ...,\n",
              "          [150],\n",
              "          [152],\n",
              "          [142]],\n",
              "  \n",
              "         [[120],\n",
              "          [127],\n",
              "          [125],\n",
              "          ...,\n",
              "          [149],\n",
              "          [143],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [115],\n",
              "          [121],\n",
              "          ...,\n",
              "          [119],\n",
              "          [129],\n",
              "          [120]],\n",
              "  \n",
              "         [[115],\n",
              "          [120],\n",
              "          [121],\n",
              "          ...,\n",
              "          [126],\n",
              "          [117],\n",
              "          [109]],\n",
              "  \n",
              "         [[116],\n",
              "          [105],\n",
              "          [107],\n",
              "          ...,\n",
              "          [119],\n",
              "          [111],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[127],\n",
              "          [128],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 49],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[124],\n",
              "          [122],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 22],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 32],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 21],\n",
              "          [ 30]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[175],\n",
              "          [169],\n",
              "          [173],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 54],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[165],\n",
              "          [172],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 50],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[168],\n",
              "          [170],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 52],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 34],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [137],\n",
              "          [148],\n",
              "          [134]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 41],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [136],\n",
              "          [141],\n",
              "          [146]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 38],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [151],\n",
              "          [137],\n",
              "          [147]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 78],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [153],\n",
              "          [164],\n",
              "          [171]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 81],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [171],\n",
              "          [175],\n",
              "          [172]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 89],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [174],\n",
              "          [182],\n",
              "          [180]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  0],\n",
              "          [  1],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [106],\n",
              "          [ 32],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  1],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 36],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  2],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 21],\n",
              "          [ 17]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 63],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 68],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 59],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 64],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 55],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 63],\n",
              "          [ 60]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[139],\n",
              "          [176],\n",
              "          [167],\n",
              "          ...,\n",
              "          [171],\n",
              "          [ 91],\n",
              "          [142]],\n",
              "  \n",
              "         [[170],\n",
              "          [180],\n",
              "          [181],\n",
              "          ...,\n",
              "          [164],\n",
              "          [ 99],\n",
              "          [146]],\n",
              "  \n",
              "         [[178],\n",
              "          [183],\n",
              "          [179],\n",
              "          ...,\n",
              "          [162],\n",
              "          [150],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[165],\n",
              "          [172],\n",
              "          [180],\n",
              "          ...,\n",
              "          [158],\n",
              "          [170],\n",
              "          [172]],\n",
              "  \n",
              "         [[173],\n",
              "          [176],\n",
              "          [176],\n",
              "          ...,\n",
              "          [168],\n",
              "          [173],\n",
              "          [161]],\n",
              "  \n",
              "         [[172],\n",
              "          [171],\n",
              "          [176],\n",
              "          ...,\n",
              "          [164],\n",
              "          [169],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 23],\n",
              "          [ 55],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 50],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [191],\n",
              "          [170],\n",
              "          ...,\n",
              "          [131],\n",
              "          [167],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [204],\n",
              "          [209],\n",
              "          ...,\n",
              "          [128],\n",
              "          [ 69],\n",
              "          [ 30]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 29],\n",
              "          [108],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 70],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 85],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 49],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[  6],\n",
              "          [ 14],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [  5]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 13],\n",
              "          [ 15],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 70],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 23],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 70],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 57],\n",
              "          [ 58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[230],\n",
              "          [225],\n",
              "          [230],\n",
              "          ...,\n",
              "          [187],\n",
              "          [190],\n",
              "          [194]],\n",
              "  \n",
              "         [[233],\n",
              "          [231],\n",
              "          [233],\n",
              "          ...,\n",
              "          [187],\n",
              "          [196],\n",
              "          [201]],\n",
              "  \n",
              "         [[223],\n",
              "          [220],\n",
              "          [219],\n",
              "          ...,\n",
              "          [191],\n",
              "          [195],\n",
              "          [199]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[133],\n",
              "          [121],\n",
              "          [116],\n",
              "          ...,\n",
              "          [130],\n",
              "          [122],\n",
              "          [120]],\n",
              "  \n",
              "         [[132],\n",
              "          [127],\n",
              "          [120],\n",
              "          ...,\n",
              "          [125],\n",
              "          [129],\n",
              "          [120]],\n",
              "  \n",
              "         [[130],\n",
              "          [147],\n",
              "          [120],\n",
              "          ...,\n",
              "          [133],\n",
              "          [119],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[123],\n",
              "          [136],\n",
              "          [119],\n",
              "          ...,\n",
              "          [114],\n",
              "          [120],\n",
              "          [105]],\n",
              "  \n",
              "         [[113],\n",
              "          [118],\n",
              "          [124],\n",
              "          ...,\n",
              "          [110],\n",
              "          [109],\n",
              "          [104]],\n",
              "  \n",
              "         [[109],\n",
              "          [ 85],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [121],\n",
              "          [109],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[203],\n",
              "          [202],\n",
              "          [206],\n",
              "          ...,\n",
              "          [227],\n",
              "          [217],\n",
              "          [211]],\n",
              "  \n",
              "         [[201],\n",
              "          [210],\n",
              "          [217],\n",
              "          ...,\n",
              "          [229],\n",
              "          [215],\n",
              "          [204]],\n",
              "  \n",
              "         [[205],\n",
              "          [207],\n",
              "          [216],\n",
              "          ...,\n",
              "          [221],\n",
              "          [210],\n",
              "          [204]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[125],\n",
              "          [125],\n",
              "          [123],\n",
              "          ...,\n",
              "          [235],\n",
              "          [240],\n",
              "          [242]],\n",
              "  \n",
              "         [[128],\n",
              "          [135],\n",
              "          [131],\n",
              "          ...,\n",
              "          [240],\n",
              "          [234],\n",
              "          [237]],\n",
              "  \n",
              "         [[122],\n",
              "          [122],\n",
              "          [134],\n",
              "          ...,\n",
              "          [241],\n",
              "          [238],\n",
              "          [236]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[209],\n",
              "          [ 86],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [142],\n",
              "          [133],\n",
              "          [131]],\n",
              "  \n",
              "         [[211],\n",
              "          [ 91],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [148],\n",
              "          [143],\n",
              "          [152]],\n",
              "  \n",
              "         [[207],\n",
              "          [118],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [152],\n",
              "          [151],\n",
              "          [164]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 94],\n",
              "          [154],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 67],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [148],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 73],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [140],\n",
              "          [124],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 81],\n",
              "          [ 35]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [134],\n",
              "          [159],\n",
              "          ...,\n",
              "          [124],\n",
              "          [107],\n",
              "          [125]],\n",
              "  \n",
              "         [[138],\n",
              "          [139],\n",
              "          [151],\n",
              "          ...,\n",
              "          [132],\n",
              "          [122],\n",
              "          [117]],\n",
              "  \n",
              "         [[139],\n",
              "          [144],\n",
              "          [134],\n",
              "          ...,\n",
              "          [143],\n",
              "          [135],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [151],\n",
              "          [119],\n",
              "          ...,\n",
              "          [136],\n",
              "          [106],\n",
              "          [173]],\n",
              "  \n",
              "         [[101],\n",
              "          [104],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [154],\n",
              "          [137],\n",
              "          [136]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [117],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [114],\n",
              "          [165]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 64],\n",
              "          [ 61],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 14],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 62],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 15],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 39],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 24],\n",
              "          [ 17]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 83],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [221],\n",
              "          [215],\n",
              "          [207]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [218],\n",
              "          [218],\n",
              "          [209]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 66],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [219],\n",
              "          [220],\n",
              "          [214]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[182],\n",
              "          [181],\n",
              "          [129],\n",
              "          ...,\n",
              "          [145],\n",
              "          [139],\n",
              "          [117]],\n",
              "  \n",
              "         [[176],\n",
              "          [179],\n",
              "          [128],\n",
              "          ...,\n",
              "          [130],\n",
              "          [139],\n",
              "          [130]],\n",
              "  \n",
              "         [[180],\n",
              "          [181],\n",
              "          [129],\n",
              "          ...,\n",
              "          [136],\n",
              "          [125],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [125],\n",
              "          [135],\n",
              "          ...,\n",
              "          [141],\n",
              "          [144],\n",
              "          [140]],\n",
              "  \n",
              "         [[113],\n",
              "          [100],\n",
              "          [121],\n",
              "          ...,\n",
              "          [144],\n",
              "          [143],\n",
              "          [144]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [105],\n",
              "          [103],\n",
              "          ...,\n",
              "          [138],\n",
              "          [145],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[209],\n",
              "          [194],\n",
              "          [220],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 44],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[190],\n",
              "          [193],\n",
              "          [209],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 48],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[200],\n",
              "          [196],\n",
              "          [211],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 44],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[187],\n",
              "          [182],\n",
              "          [172],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 66],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[181],\n",
              "          [186],\n",
              "          [132],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 59],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[186],\n",
              "          [180],\n",
              "          [163],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 33],\n",
              "          [131]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 95],\n",
              "          [ 92],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [177],\n",
              "          [160],\n",
              "          [171]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 72],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [139],\n",
              "          [131],\n",
              "          [162]],\n",
              "  \n",
              "         [[132],\n",
              "          [119],\n",
              "          [125],\n",
              "          ...,\n",
              "          [119],\n",
              "          [134],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 81],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [199],\n",
              "          [200],\n",
              "          [197]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [205],\n",
              "          [209],\n",
              "          [204]],\n",
              "  \n",
              "         [[143],\n",
              "          [117],\n",
              "          [117],\n",
              "          ...,\n",
              "          [198],\n",
              "          [204],\n",
              "          [206]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 68],\n",
              "          [ 53],\n",
              "          [160],\n",
              "          ...,\n",
              "          [217],\n",
              "          [217],\n",
              "          [219]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 86],\n",
              "          [149],\n",
              "          ...,\n",
              "          [209],\n",
              "          [213],\n",
              "          [211]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [154],\n",
              "          [159],\n",
              "          ...,\n",
              "          [216],\n",
              "          [218],\n",
              "          [217]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 13],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [109],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 12],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [113],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 13],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [108],\n",
              "          [111]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[145],\n",
              "          [145],\n",
              "          [147],\n",
              "          ...,\n",
              "          [153],\n",
              "          [153],\n",
              "          [151]],\n",
              "  \n",
              "         [[142],\n",
              "          [144],\n",
              "          [147],\n",
              "          ...,\n",
              "          [153],\n",
              "          [153],\n",
              "          [150]],\n",
              "  \n",
              "         [[142],\n",
              "          [146],\n",
              "          [143],\n",
              "          ...,\n",
              "          [152],\n",
              "          [152],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 95],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 78],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 87],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 79],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 95],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 78],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 63],\n",
              "          [ 75],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 94],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [104],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 98],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [106],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 90],\n",
              "          [ 95]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [ 99],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 21],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[134],\n",
              "          [180],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 62],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[176],\n",
              "          [166],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 42],\n",
              "          [ 10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 32],\n",
              "          [ 76],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  5],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 72],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [  3],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 71],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 78],\n",
              "          [ 86]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[157],\n",
              "          [172],\n",
              "          [176],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [  5],\n",
              "          [  1]],\n",
              "  \n",
              "         [[161],\n",
              "          [170],\n",
              "          [174],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [ 24],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[166],\n",
              "          [169],\n",
              "          [170],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [ 62],\n",
              "          [ 24]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[145],\n",
              "          [142],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [147],\n",
              "          [146],\n",
              "          [143]],\n",
              "  \n",
              "         [[154],\n",
              "          [142],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [147],\n",
              "          [145],\n",
              "          [143]],\n",
              "  \n",
              "         [[157],\n",
              "          [146],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [147],\n",
              "          [145],\n",
              "          [143]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 43],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [111],\n",
              "          [118],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 52],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [105],\n",
              "          [113],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 56],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [118],\n",
              "          [109],\n",
              "          [111]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 52],\n",
              "          [ 54],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [229],\n",
              "          [230],\n",
              "          [232]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 62],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [227],\n",
              "          [230],\n",
              "          [228]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 58],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [228],\n",
              "          [228],\n",
              "          [228]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 61],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [125],\n",
              "          [130],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 65],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [128],\n",
              "          [131],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 68],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [130],\n",
              "          [135],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[36],\n",
              "          [40],\n",
              "          [42],\n",
              "          ...,\n",
              "          [14],\n",
              "          [13],\n",
              "          [13]],\n",
              "  \n",
              "         [[36],\n",
              "          [40],\n",
              "          [42],\n",
              "          ...,\n",
              "          [14],\n",
              "          [13],\n",
              "          [13]],\n",
              "  \n",
              "         [[36],\n",
              "          [40],\n",
              "          [41],\n",
              "          ...,\n",
              "          [14],\n",
              "          [14],\n",
              "          [13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[38],\n",
              "          [40],\n",
              "          [34],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 5],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[33],\n",
              "          [36],\n",
              "          [38],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[28],\n",
              "          [31],\n",
              "          [35],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          [ 5]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 97],\n",
              "          [103],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 64],\n",
              "          [197]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 74],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 22],\n",
              "          [199]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 69],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 21],\n",
              "          [153]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[144],\n",
              "          [145],\n",
              "          [146],\n",
              "          ...,\n",
              "          [117],\n",
              "          [128],\n",
              "          [114]],\n",
              "  \n",
              "         [[151],\n",
              "          [144],\n",
              "          [149],\n",
              "          ...,\n",
              "          [132],\n",
              "          [ 96],\n",
              "          [110]],\n",
              "  \n",
              "         [[153],\n",
              "          [150],\n",
              "          [151],\n",
              "          ...,\n",
              "          [123],\n",
              "          [103],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[135],\n",
              "          [139],\n",
              "          [124],\n",
              "          ...,\n",
              "          [149],\n",
              "          [148],\n",
              "          [147]],\n",
              "  \n",
              "         [[143],\n",
              "          [135],\n",
              "          [140],\n",
              "          ...,\n",
              "          [146],\n",
              "          [146],\n",
              "          [139]],\n",
              "  \n",
              "         [[140],\n",
              "          [140],\n",
              "          [135],\n",
              "          ...,\n",
              "          [153],\n",
              "          [153],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[176],\n",
              "          [171],\n",
              "          [175],\n",
              "          ...,\n",
              "          [152],\n",
              "          [145],\n",
              "          [137]],\n",
              "  \n",
              "         [[175],\n",
              "          [170],\n",
              "          [172],\n",
              "          ...,\n",
              "          [149],\n",
              "          [149],\n",
              "          [129]],\n",
              "  \n",
              "         [[176],\n",
              "          [173],\n",
              "          [173],\n",
              "          ...,\n",
              "          [152],\n",
              "          [146],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 55],\n",
              "          [ 45],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [166],\n",
              "          [161],\n",
              "          [155]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 60],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [149],\n",
              "          [155],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 69],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [162],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[170],\n",
              "          [164],\n",
              "          [173],\n",
              "          ...,\n",
              "          [196],\n",
              "          [186],\n",
              "          [176]],\n",
              "  \n",
              "         [[175],\n",
              "          [170],\n",
              "          [146],\n",
              "          ...,\n",
              "          [184],\n",
              "          [188],\n",
              "          [185]],\n",
              "  \n",
              "         [[169],\n",
              "          [169],\n",
              "          [166],\n",
              "          ...,\n",
              "          [193],\n",
              "          [196],\n",
              "          [184]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 50],\n",
              "          [ 70],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 29],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 54],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 29],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 44],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 27],\n",
              "          [ 28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 24],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [180],\n",
              "          [176],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 33],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [172],\n",
              "          [159],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [113],\n",
              "          [135],\n",
              "          ...,\n",
              "          [130],\n",
              "          [ 64],\n",
              "          [ 52]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [106],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [117],\n",
              "          [160],\n",
              "          [146]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 97],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [123],\n",
              "          [156],\n",
              "          [146]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 99],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [129],\n",
              "          [150],\n",
              "          [142]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [173],\n",
              "          [171],\n",
              "          ...,\n",
              "          [163],\n",
              "          [164],\n",
              "          [167]],\n",
              "  \n",
              "         [[173],\n",
              "          [171],\n",
              "          [169],\n",
              "          ...,\n",
              "          [165],\n",
              "          [166],\n",
              "          [167]],\n",
              "  \n",
              "         [[160],\n",
              "          [168],\n",
              "          [171],\n",
              "          ...,\n",
              "          [170],\n",
              "          [173],\n",
              "          [172]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 28],\n",
              "          [ 26],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 20],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[234],\n",
              "          [230],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  3],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 28],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 74],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 52],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 77],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 66],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 71],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 63],\n",
              "          [ 66]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [142],\n",
              "          [139],\n",
              "          ...,\n",
              "          [155],\n",
              "          [153],\n",
              "          [151]],\n",
              "  \n",
              "         [[144],\n",
              "          [140],\n",
              "          [144],\n",
              "          ...,\n",
              "          [154],\n",
              "          [154],\n",
              "          [152]],\n",
              "  \n",
              "         [[146],\n",
              "          [143],\n",
              "          [145],\n",
              "          ...,\n",
              "          [157],\n",
              "          [156],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[188],\n",
              "          [189],\n",
              "          [181],\n",
              "          ...,\n",
              "          [156],\n",
              "          [168],\n",
              "          [160]],\n",
              "  \n",
              "         [[186],\n",
              "          [183],\n",
              "          [188],\n",
              "          ...,\n",
              "          [160],\n",
              "          [162],\n",
              "          [162]],\n",
              "  \n",
              "         [[189],\n",
              "          [190],\n",
              "          [189],\n",
              "          ...,\n",
              "          [158],\n",
              "          [163],\n",
              "          [163]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 99],\n",
              "          [104],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 60],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [103],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 71],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 44],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[100],\n",
              "          [ 68],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 55],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 69],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 50],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 88],\n",
              "          [ 77]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[40],\n",
              "          [32],\n",
              "          [43],\n",
              "          ...,\n",
              "          [33],\n",
              "          [27],\n",
              "          [36]],\n",
              "  \n",
              "         [[41],\n",
              "          [30],\n",
              "          [45],\n",
              "          ...,\n",
              "          [33],\n",
              "          [30],\n",
              "          [37]],\n",
              "  \n",
              "         [[40],\n",
              "          [31],\n",
              "          [44],\n",
              "          ...,\n",
              "          [32],\n",
              "          [30],\n",
              "          [32]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[63],\n",
              "          [64],\n",
              "          [48],\n",
              "          ...,\n",
              "          [71],\n",
              "          [70],\n",
              "          [48]],\n",
              "  \n",
              "         [[61],\n",
              "          [65],\n",
              "          [56],\n",
              "          ...,\n",
              "          [55],\n",
              "          [77],\n",
              "          [71]],\n",
              "  \n",
              "         [[62],\n",
              "          [57],\n",
              "          [50],\n",
              "          ...,\n",
              "          [59],\n",
              "          [69],\n",
              "          [74]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[85],\n",
              "          [86],\n",
              "          [87],\n",
              "          ...,\n",
              "          [80],\n",
              "          [80],\n",
              "          [79]],\n",
              "  \n",
              "         [[92],\n",
              "          [89],\n",
              "          [87],\n",
              "          ...,\n",
              "          [83],\n",
              "          [81],\n",
              "          [78]],\n",
              "  \n",
              "         [[94],\n",
              "          [90],\n",
              "          [88],\n",
              "          ...,\n",
              "          [85],\n",
              "          [86],\n",
              "          [84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[79],\n",
              "          [80],\n",
              "          [93],\n",
              "          ...,\n",
              "          [70],\n",
              "          [72],\n",
              "          [73]],\n",
              "  \n",
              "         [[38],\n",
              "          [29],\n",
              "          [29],\n",
              "          ...,\n",
              "          [68],\n",
              "          [70],\n",
              "          [71]],\n",
              "  \n",
              "         [[27],\n",
              "          [24],\n",
              "          [28],\n",
              "          ...,\n",
              "          [70],\n",
              "          [71],\n",
              "          [72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 53],\n",
              "          [ 53],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 91],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 53],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 89],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 53],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 89],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 97],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 91],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 93],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 95],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 94],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 86],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [122],\n",
              "          [144],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 97],\n",
              "          [129]],\n",
              "  \n",
              "         [[133],\n",
              "          [134],\n",
              "          [141],\n",
              "          ...,\n",
              "          [127],\n",
              "          [130],\n",
              "          [103]],\n",
              "  \n",
              "         [[129],\n",
              "          [136],\n",
              "          [132],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 76],\n",
              "          [ 48]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[128],\n",
              "          [158],\n",
              "          [118],\n",
              "          ...,\n",
              "          [159],\n",
              "          [120],\n",
              "          [177]],\n",
              "  \n",
              "         [[142],\n",
              "          [192],\n",
              "          [133],\n",
              "          ...,\n",
              "          [153],\n",
              "          [ 91],\n",
              "          [130]],\n",
              "  \n",
              "         [[101],\n",
              "          [132],\n",
              "          [117],\n",
              "          ...,\n",
              "          [173],\n",
              "          [109],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[103],\n",
              "          [104],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [100],\n",
              "          [107],\n",
              "          [103]],\n",
              "  \n",
              "         [[104],\n",
              "          [104],\n",
              "          [104],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 99],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [100],\n",
              "          [103],\n",
              "          ...,\n",
              "          [104],\n",
              "          [110],\n",
              "          [101]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[192],\n",
              "          [207],\n",
              "          [193],\n",
              "          ...,\n",
              "          [173],\n",
              "          [179],\n",
              "          [167]],\n",
              "  \n",
              "         [[174],\n",
              "          [193],\n",
              "          [206],\n",
              "          ...,\n",
              "          [173],\n",
              "          [176],\n",
              "          [178]],\n",
              "  \n",
              "         [[202],\n",
              "          [187],\n",
              "          [197],\n",
              "          ...,\n",
              "          [175],\n",
              "          [175],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[174],\n",
              "          [210],\n",
              "          [206],\n",
              "          ...,\n",
              "          [159],\n",
              "          [154],\n",
              "          [145]],\n",
              "  \n",
              "         [[197],\n",
              "          [209],\n",
              "          [211],\n",
              "          ...,\n",
              "          [163],\n",
              "          [143],\n",
              "          [134]],\n",
              "  \n",
              "         [[202],\n",
              "          [208],\n",
              "          [206],\n",
              "          ...,\n",
              "          [154],\n",
              "          [150],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [121],\n",
              "          [139],\n",
              "          ...,\n",
              "          [194],\n",
              "          [177],\n",
              "          [172]],\n",
              "  \n",
              "         [[142],\n",
              "          [142],\n",
              "          [131],\n",
              "          ...,\n",
              "          [178],\n",
              "          [180],\n",
              "          [171]],\n",
              "  \n",
              "         [[127],\n",
              "          [137],\n",
              "          [125],\n",
              "          ...,\n",
              "          [198],\n",
              "          [156],\n",
              "          [159]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[137],\n",
              "          [135],\n",
              "          [135],\n",
              "          ...,\n",
              "          [171],\n",
              "          [171],\n",
              "          [170]],\n",
              "  \n",
              "         [[137],\n",
              "          [135],\n",
              "          [140],\n",
              "          ...,\n",
              "          [171],\n",
              "          [172],\n",
              "          [178]],\n",
              "  \n",
              "         [[135],\n",
              "          [138],\n",
              "          [140],\n",
              "          ...,\n",
              "          [169],\n",
              "          [174],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [172],\n",
              "          [172],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 16],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[172],\n",
              "          [171],\n",
              "          [173],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 15],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[172],\n",
              "          [171],\n",
              "          [175],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 11],\n",
              "          [ 12]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[170],\n",
              "          [164],\n",
              "          [168],\n",
              "          ...,\n",
              "          [187],\n",
              "          [191],\n",
              "          [185]],\n",
              "  \n",
              "         [[180],\n",
              "          [179],\n",
              "          [182],\n",
              "          ...,\n",
              "          [185],\n",
              "          [183],\n",
              "          [179]],\n",
              "  \n",
              "         [[179],\n",
              "          [177],\n",
              "          [183],\n",
              "          ...,\n",
              "          [179],\n",
              "          [180],\n",
              "          [175]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[119],\n",
              "          [115],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 91],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[106],\n",
              "          [120],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 82],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[109],\n",
              "          [124],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 83],\n",
              "          [ 74]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 60],\n",
              "          [ 64],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 36],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 64],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 42],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 66],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 44],\n",
              "          [ 57]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [132],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [118],\n",
              "          [117],\n",
              "          [130]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 89],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 88],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [109],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 84],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[27],\n",
              "          [32],\n",
              "          [37],\n",
              "          ...,\n",
              "          [43],\n",
              "          [29],\n",
              "          [37]],\n",
              "  \n",
              "         [[27],\n",
              "          [32],\n",
              "          [31],\n",
              "          ...,\n",
              "          [45],\n",
              "          [39],\n",
              "          [38]],\n",
              "  \n",
              "         [[12],\n",
              "          [17],\n",
              "          [22],\n",
              "          ...,\n",
              "          [41],\n",
              "          [39],\n",
              "          [35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[42],\n",
              "          [28],\n",
              "          [32],\n",
              "          ...,\n",
              "          [17],\n",
              "          [31],\n",
              "          [20]],\n",
              "  \n",
              "         [[48],\n",
              "          [34],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [34],\n",
              "          [18],\n",
              "          [ 9]],\n",
              "  \n",
              "         [[52],\n",
              "          [33],\n",
              "          [18],\n",
              "          ...,\n",
              "          [18],\n",
              "          [15],\n",
              "          [13]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 59],\n",
              "          [ 72],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 56],\n",
              "          [138]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [218],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 41],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [100],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 58],\n",
              "          [ 54]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [ 88],\n",
              "          [111],\n",
              "          ...,\n",
              "          [124],\n",
              "          [120],\n",
              "          [118]],\n",
              "  \n",
              "         [[118],\n",
              "          [115],\n",
              "          [105],\n",
              "          ...,\n",
              "          [142],\n",
              "          [117],\n",
              "          [124]],\n",
              "  \n",
              "         [[106],\n",
              "          [113],\n",
              "          [105],\n",
              "          ...,\n",
              "          [125],\n",
              "          [105],\n",
              "          [111]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[169],\n",
              "          [175],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [137],\n",
              "          [134],\n",
              "          [132]],\n",
              "  \n",
              "         [[170],\n",
              "          [176],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [138],\n",
              "          [136],\n",
              "          [137]],\n",
              "  \n",
              "         [[172],\n",
              "          [172],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [137],\n",
              "          [125],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [108],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 66],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[117],\n",
              "          [112],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 71],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[118],\n",
              "          [132],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 71],\n",
              "          [ 75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[166],\n",
              "          [171],\n",
              "          [170],\n",
              "          ...,\n",
              "          [170],\n",
              "          [210],\n",
              "          [233]],\n",
              "  \n",
              "         [[161],\n",
              "          [194],\n",
              "          [173],\n",
              "          ...,\n",
              "          [233],\n",
              "          [223],\n",
              "          [236]],\n",
              "  \n",
              "         [[201],\n",
              "          [175],\n",
              "          [238],\n",
              "          ...,\n",
              "          [235],\n",
              "          [236],\n",
              "          [230]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [163],\n",
              "          [143],\n",
              "          ...,\n",
              "          [188],\n",
              "          [186],\n",
              "          [183]],\n",
              "  \n",
              "         [[105],\n",
              "          [204],\n",
              "          [144],\n",
              "          ...,\n",
              "          [189],\n",
              "          [188],\n",
              "          [181]],\n",
              "  \n",
              "         [[125],\n",
              "          [231],\n",
              "          [133],\n",
              "          ...,\n",
              "          [178],\n",
              "          [165],\n",
              "          [160]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[187],\n",
              "          [189],\n",
              "          [193],\n",
              "          ...,\n",
              "          [255],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[180],\n",
              "          [186],\n",
              "          [185],\n",
              "          ...,\n",
              "          [255],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[179],\n",
              "          [180],\n",
              "          [179],\n",
              "          ...,\n",
              "          [249],\n",
              "          [249],\n",
              "          [251]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[242],\n",
              "          [252],\n",
              "          [247],\n",
              "          ...,\n",
              "          [254],\n",
              "          [255],\n",
              "          [253]],\n",
              "  \n",
              "         [[248],\n",
              "          [254],\n",
              "          [255],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         [[253],\n",
              "          [254],\n",
              "          [255],\n",
              "          ...,\n",
              "          [253],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[120],\n",
              "          [ 71],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [148],\n",
              "          [153],\n",
              "          [152]],\n",
              "  \n",
              "         [[126],\n",
              "          [ 64],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [147],\n",
              "          [155],\n",
              "          [154]],\n",
              "  \n",
              "         [[150],\n",
              "          [ 60],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [149],\n",
              "          [158],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 95],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 30],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 94],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 32],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 92],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 32],\n",
              "          [ 33]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 20],\n",
              "          [ 45],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 86],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 47],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 28],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 49],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 89],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 10],\n",
              "          [  9],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [111],\n",
              "          [108],\n",
              "          [112]],\n",
              "  \n",
              "         [[  4],\n",
              "          [ 18],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [104],\n",
              "          [100],\n",
              "          [100]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  2],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [104],\n",
              "          [101],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[162],\n",
              "          [168],\n",
              "          [169],\n",
              "          ...,\n",
              "          [140],\n",
              "          [141],\n",
              "          [143]],\n",
              "  \n",
              "         [[160],\n",
              "          [169],\n",
              "          [167],\n",
              "          ...,\n",
              "          [141],\n",
              "          [142],\n",
              "          [145]],\n",
              "  \n",
              "         [[158],\n",
              "          [168],\n",
              "          [162],\n",
              "          ...,\n",
              "          [143],\n",
              "          [143],\n",
              "          [143]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  7],\n",
              "          [ 17],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 43],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 18],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 31],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 27],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 45],\n",
              "          [ 44]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 79],\n",
              "          [ 81],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [107],\n",
              "          [101],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 85],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [114],\n",
              "          [122],\n",
              "          [169]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 84],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [113],\n",
              "          [151],\n",
              "          [183]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[238],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [224],\n",
              "          [205],\n",
              "          [229]],\n",
              "  \n",
              "         [[236],\n",
              "          [237],\n",
              "          [240],\n",
              "          ...,\n",
              "          [225],\n",
              "          [225],\n",
              "          [217]],\n",
              "  \n",
              "         [[238],\n",
              "          [241],\n",
              "          [238],\n",
              "          ...,\n",
              "          [233],\n",
              "          [229],\n",
              "          [223]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [186],\n",
              "          [ 84],\n",
              "          [185]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [180],\n",
              "          [ 88],\n",
              "          [183]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [183],\n",
              "          [ 90],\n",
              "          [184]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[219],\n",
              "          [184],\n",
              "          [170],\n",
              "          ...,\n",
              "          [168],\n",
              "          [180],\n",
              "          [194]],\n",
              "  \n",
              "         [[235],\n",
              "          [204],\n",
              "          [187],\n",
              "          ...,\n",
              "          [180],\n",
              "          [230],\n",
              "          [233]],\n",
              "  \n",
              "         [[233],\n",
              "          [224],\n",
              "          [230],\n",
              "          ...,\n",
              "          [230],\n",
              "          [228],\n",
              "          [219]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[102],\n",
              "          [105],\n",
              "          [107],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 99],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[102],\n",
              "          [105],\n",
              "          [107],\n",
              "          ...,\n",
              "          [102],\n",
              "          [100],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[106],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [103],\n",
              "          [100],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 70],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 77],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[110],\n",
              "          [ 60],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 68],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 61],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 69],\n",
              "          [ 76]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [150],\n",
              "          [150],\n",
              "          ...,\n",
              "          [181],\n",
              "          [181],\n",
              "          [169]],\n",
              "  \n",
              "         [[145],\n",
              "          [149],\n",
              "          [150],\n",
              "          ...,\n",
              "          [181],\n",
              "          [182],\n",
              "          [170]],\n",
              "  \n",
              "         [[148],\n",
              "          [147],\n",
              "          [151],\n",
              "          ...,\n",
              "          [181],\n",
              "          [182],\n",
              "          [171]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[180],\n",
              "          [190],\n",
              "          [186],\n",
              "          ...,\n",
              "          [168],\n",
              "          [166],\n",
              "          [168]],\n",
              "  \n",
              "         [[183],\n",
              "          [181],\n",
              "          [186],\n",
              "          ...,\n",
              "          [174],\n",
              "          [170],\n",
              "          [169]],\n",
              "  \n",
              "         [[186],\n",
              "          [184],\n",
              "          [189],\n",
              "          ...,\n",
              "          [166],\n",
              "          [165],\n",
              "          [168]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 27],\n",
              "          [ 26],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 52],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 27],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 50],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 25],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 50],\n",
              "          [ 49]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 67],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [170],\n",
              "          [157],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 68],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [165],\n",
              "          [193],\n",
              "          [107]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 68],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [201],\n",
              "          [150],\n",
              "          [145]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 29],\n",
              "          [ 32],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 39],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 23],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 38],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 38],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 36],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 36],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [144],\n",
              "          [121],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 37],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [123],\n",
              "          [117],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 31],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [124],\n",
              "          [118],\n",
              "          [113]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 43],\n",
              "          [ 58],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 43],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 37],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 77],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 61],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 57],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[107],\n",
              "          [ 89],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [180],\n",
              "          [189],\n",
              "          [116]],\n",
              "  \n",
              "         [[122],\n",
              "          [ 71],\n",
              "          [117],\n",
              "          ...,\n",
              "          [106],\n",
              "          [131],\n",
              "          [100]],\n",
              "  \n",
              "         [[102],\n",
              "          [147],\n",
              "          [105],\n",
              "          ...,\n",
              "          [127],\n",
              "          [132],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 88],\n",
              "          [107],\n",
              "          [128],\n",
              "          ...,\n",
              "          [253],\n",
              "          [254],\n",
              "          [253]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 62],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 51],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[141],\n",
              "          [130],\n",
              "          [144],\n",
              "          ...,\n",
              "          [198],\n",
              "          [192],\n",
              "          [191]],\n",
              "  \n",
              "         [[130],\n",
              "          [131],\n",
              "          [139],\n",
              "          ...,\n",
              "          [187],\n",
              "          [192],\n",
              "          [186]],\n",
              "  \n",
              "         [[127],\n",
              "          [133],\n",
              "          [142],\n",
              "          ...,\n",
              "          [192],\n",
              "          [194],\n",
              "          [192]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[66],\n",
              "          [68],\n",
              "          [64],\n",
              "          ...,\n",
              "          [98],\n",
              "          [94],\n",
              "          [88]],\n",
              "  \n",
              "         [[65],\n",
              "          [61],\n",
              "          [66],\n",
              "          ...,\n",
              "          [91],\n",
              "          [88],\n",
              "          [89]],\n",
              "  \n",
              "         [[64],\n",
              "          [71],\n",
              "          [72],\n",
              "          ...,\n",
              "          [87],\n",
              "          [91],\n",
              "          [84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[39],\n",
              "          [38],\n",
              "          [39],\n",
              "          ...,\n",
              "          [48],\n",
              "          [42],\n",
              "          [42]],\n",
              "  \n",
              "         [[37],\n",
              "          [37],\n",
              "          [35],\n",
              "          ...,\n",
              "          [47],\n",
              "          [43],\n",
              "          [40]],\n",
              "  \n",
              "         [[34],\n",
              "          [37],\n",
              "          [31],\n",
              "          ...,\n",
              "          [39],\n",
              "          [38],\n",
              "          [41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 87],\n",
              "          [ 84],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [224],\n",
              "          [225],\n",
              "          [221]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 86],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [234],\n",
              "          [229],\n",
              "          [226]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 78],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [245],\n",
              "          [239],\n",
              "          [234]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [115],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 80],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[126],\n",
              "          [132],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 81],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[114],\n",
              "          [119],\n",
              "          [115],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 83],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 32],\n",
              "          [ 32],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [188],\n",
              "          [189],\n",
              "          [192]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 36],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [128],\n",
              "          [133],\n",
              "          [136]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 40],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 95],\n",
              "          [ 97]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 95],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [144],\n",
              "          [177],\n",
              "          [208]],\n",
              "  \n",
              "         [[156],\n",
              "          [162],\n",
              "          [162],\n",
              "          ...,\n",
              "          [148],\n",
              "          [179],\n",
              "          [211]],\n",
              "  \n",
              "         [[218],\n",
              "          [215],\n",
              "          [213],\n",
              "          ...,\n",
              "          [156],\n",
              "          [185],\n",
              "          [218]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [ 76],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [101],\n",
              "          [123],\n",
              "          [133]],\n",
              "  \n",
              "         [[106],\n",
              "          [110],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [119],\n",
              "          [116],\n",
              "          [102]],\n",
              "  \n",
              "         [[103],\n",
              "          [101],\n",
              "          [106],\n",
              "          ...,\n",
              "          [136],\n",
              "          [155],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[131],\n",
              "          [122],\n",
              "          [109],\n",
              "          ...,\n",
              "          [123],\n",
              "          [117],\n",
              "          [136]],\n",
              "  \n",
              "         [[125],\n",
              "          [100],\n",
              "          [121],\n",
              "          ...,\n",
              "          [146],\n",
              "          [115],\n",
              "          [134]],\n",
              "  \n",
              "         [[117],\n",
              "          [129],\n",
              "          [130],\n",
              "          ...,\n",
              "          [140],\n",
              "          [120],\n",
              "          [124]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 86],\n",
              "          [ 60],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [250],\n",
              "          [228],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 67],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [255],\n",
              "          [251],\n",
              "          [253]],\n",
              "  \n",
              "         [[103],\n",
              "          [114],\n",
              "          [169],\n",
              "          ...,\n",
              "          [255],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[158],\n",
              "          [122],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [108],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[125],\n",
              "          [153],\n",
              "          [134],\n",
              "          ...,\n",
              "          [121],\n",
              "          [137],\n",
              "          [120]],\n",
              "  \n",
              "         [[140],\n",
              "          [137],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [160],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[39],\n",
              "          [38],\n",
              "          [36],\n",
              "          ...,\n",
              "          [14],\n",
              "          [53],\n",
              "          [39]],\n",
              "  \n",
              "         [[37],\n",
              "          [38],\n",
              "          [36],\n",
              "          ...,\n",
              "          [11],\n",
              "          [13],\n",
              "          [86]],\n",
              "  \n",
              "         [[37],\n",
              "          [38],\n",
              "          [35],\n",
              "          ...,\n",
              "          [17],\n",
              "          [12],\n",
              "          [92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[40],\n",
              "          [38],\n",
              "          [50],\n",
              "          ...,\n",
              "          [40],\n",
              "          [38],\n",
              "          [35]],\n",
              "  \n",
              "         [[39],\n",
              "          [40],\n",
              "          [43],\n",
              "          ...,\n",
              "          [37],\n",
              "          [35],\n",
              "          [33]],\n",
              "  \n",
              "         [[63],\n",
              "          [57],\n",
              "          [51],\n",
              "          ...,\n",
              "          [37],\n",
              "          [34],\n",
              "          [40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[182],\n",
              "          [182],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 31],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[183],\n",
              "          [181],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 33],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[179],\n",
              "          [179],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 28],\n",
              "          [ 32]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [145],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 57],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[155],\n",
              "          [148],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[164],\n",
              "          [157],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 57],\n",
              "          [ 64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 75],\n",
              "          [ 76],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [232],\n",
              "          [219],\n",
              "          [213]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 32],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [226],\n",
              "          [221],\n",
              "          [204]],\n",
              "  \n",
              "         [[108],\n",
              "          [ 50],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [221],\n",
              "          [203],\n",
              "          [194]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[123],\n",
              "          [128],\n",
              "          [134],\n",
              "          ...,\n",
              "          [125],\n",
              "          [129],\n",
              "          [125]],\n",
              "  \n",
              "         [[117],\n",
              "          [126],\n",
              "          [129],\n",
              "          ...,\n",
              "          [126],\n",
              "          [130],\n",
              "          [125]],\n",
              "  \n",
              "         [[113],\n",
              "          [117],\n",
              "          [128],\n",
              "          ...,\n",
              "          [123],\n",
              "          [122],\n",
              "          [121]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 3],\n",
              "          [ 6],\n",
              "          [10],\n",
              "          ...,\n",
              "          [13],\n",
              "          [ 6],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 5],\n",
              "          [13],\n",
              "          [22],\n",
              "          ...,\n",
              "          [29],\n",
              "          [17],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[ 8],\n",
              "          [19],\n",
              "          [32],\n",
              "          ...,\n",
              "          [61],\n",
              "          [34],\n",
              "          [18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[11],\n",
              "          [28],\n",
              "          [44],\n",
              "          ...,\n",
              "          [50],\n",
              "          [26],\n",
              "          [13]],\n",
              "  \n",
              "         [[ 5],\n",
              "          [15],\n",
              "          [22],\n",
              "          ...,\n",
              "          [27],\n",
              "          [12],\n",
              "          [ 6]],\n",
              "  \n",
              "         [[ 3],\n",
              "          [ 9],\n",
              "          [13],\n",
              "          ...,\n",
              "          [14],\n",
              "          [ 7],\n",
              "          [ 4]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[238],\n",
              "          [237],\n",
              "          [245],\n",
              "          ...,\n",
              "          [248],\n",
              "          [241],\n",
              "          [239]],\n",
              "  \n",
              "         [[247],\n",
              "          [228],\n",
              "          [235],\n",
              "          ...,\n",
              "          [240],\n",
              "          [234],\n",
              "          [239]],\n",
              "  \n",
              "         [[242],\n",
              "          [ 90],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 89],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[244],\n",
              "          [ 90],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 92],\n",
              "          [239]],\n",
              "  \n",
              "         [[248],\n",
              "          [234],\n",
              "          [244],\n",
              "          ...,\n",
              "          [250],\n",
              "          [240],\n",
              "          [239]],\n",
              "  \n",
              "         [[239],\n",
              "          [239],\n",
              "          [239],\n",
              "          ...,\n",
              "          [239],\n",
              "          [239],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[121],\n",
              "          [123],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 70],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[128],\n",
              "          [124],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 69],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[132],\n",
              "          [126],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[198],\n",
              "          [199],\n",
              "          [186],\n",
              "          ...,\n",
              "          [205],\n",
              "          [199],\n",
              "          [211]],\n",
              "  \n",
              "         [[198],\n",
              "          [195],\n",
              "          [177],\n",
              "          ...,\n",
              "          [186],\n",
              "          [203],\n",
              "          [207]],\n",
              "  \n",
              "         [[193],\n",
              "          [186],\n",
              "          [168],\n",
              "          ...,\n",
              "          [197],\n",
              "          [206],\n",
              "          [197]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[31],\n",
              "          [39],\n",
              "          [34],\n",
              "          ...,\n",
              "          [18],\n",
              "          [31],\n",
              "          [31]],\n",
              "  \n",
              "         [[29],\n",
              "          [30],\n",
              "          [39],\n",
              "          ...,\n",
              "          [24],\n",
              "          [31],\n",
              "          [34]],\n",
              "  \n",
              "         [[27],\n",
              "          [53],\n",
              "          [37],\n",
              "          ...,\n",
              "          [24],\n",
              "          [31],\n",
              "          [34]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[64],\n",
              "          [68],\n",
              "          [70],\n",
              "          ...,\n",
              "          [49],\n",
              "          [49],\n",
              "          [49]],\n",
              "  \n",
              "         [[72],\n",
              "          [71],\n",
              "          [68],\n",
              "          ...,\n",
              "          [51],\n",
              "          [50],\n",
              "          [50]],\n",
              "  \n",
              "         [[75],\n",
              "          [75],\n",
              "          [70],\n",
              "          ...,\n",
              "          [52],\n",
              "          [47],\n",
              "          [49]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 75],\n",
              "          [ 75],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 72],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 77],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 76],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 78],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 74],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [109],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [108],\n",
              "          [112],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 68],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [111],\n",
              "          [116],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 67],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [111],\n",
              "          [116],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[114],\n",
              "          [132],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [105],\n",
              "          [112]],\n",
              "  \n",
              "         [[113],\n",
              "          [127],\n",
              "          [130],\n",
              "          ...,\n",
              "          [105],\n",
              "          [102],\n",
              "          [113]],\n",
              "  \n",
              "         [[100],\n",
              "          [115],\n",
              "          [127],\n",
              "          ...,\n",
              "          [109],\n",
              "          [104],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [142],\n",
              "          [133],\n",
              "          ...,\n",
              "          [135],\n",
              "          [121],\n",
              "          [116]],\n",
              "  \n",
              "         [[140],\n",
              "          [129],\n",
              "          [133],\n",
              "          ...,\n",
              "          [123],\n",
              "          [107],\n",
              "          [117]],\n",
              "  \n",
              "         [[116],\n",
              "          [151],\n",
              "          [131],\n",
              "          ...,\n",
              "          [113],\n",
              "          [110],\n",
              "          [126]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 26],\n",
              "          [114],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 32],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [112],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 30],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [117],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 29],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 64],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [129],\n",
              "          [121],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 21],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 14],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [114],\n",
              "          [112],\n",
              "          [109]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[212],\n",
              "          [ 46],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [187],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[143],\n",
              "          [ 58],\n",
              "          [128],\n",
              "          ...,\n",
              "          [142],\n",
              "          [ 73],\n",
              "          [184]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [130],\n",
              "          [135],\n",
              "          ...,\n",
              "          [206],\n",
              "          [115],\n",
              "          [129]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 49],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 30],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 43],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 23],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 39],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 24],\n",
              "          [ 25]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 76],\n",
              "          [ 83],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 83],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 85],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 27],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 83],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 12],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[136],\n",
              "          [151],\n",
              "          [172],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 41],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 94],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 28],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [106],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 20],\n",
              "          [ 46]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[162],\n",
              "          [137],\n",
              "          [152],\n",
              "          ...,\n",
              "          [125],\n",
              "          [ 90],\n",
              "          [120]],\n",
              "  \n",
              "         [[150],\n",
              "          [176],\n",
              "          [167],\n",
              "          ...,\n",
              "          [117],\n",
              "          [100],\n",
              "          [126]],\n",
              "  \n",
              "         [[116],\n",
              "          [142],\n",
              "          [131],\n",
              "          ...,\n",
              "          [110],\n",
              "          [107],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[164],\n",
              "          [155],\n",
              "          [125],\n",
              "          ...,\n",
              "          [129],\n",
              "          [ 96],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [130],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [123],\n",
              "          [154]],\n",
              "  \n",
              "         [[151],\n",
              "          [157],\n",
              "          [154],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [128],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 56],\n",
              "          [ 60],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 43],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 67],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 92],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 59],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 90],\n",
              "          [ 94]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 80],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [171],\n",
              "          [147],\n",
              "          [150]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 82],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 85],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 49],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 74],\n",
              "          [ 58]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 29],\n",
              "          [ 33],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 74],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 27],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 68],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 28],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 69],\n",
              "          [ 80]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[207],\n",
              "          [198],\n",
              "          [184],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 49],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[152],\n",
              "          [170],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 55],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[109],\n",
              "          [155],\n",
              "          [214],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 39],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[159],\n",
              "          [160],\n",
              "          [165],\n",
              "          ...,\n",
              "          [160],\n",
              "          [158],\n",
              "          [155]],\n",
              "  \n",
              "         [[163],\n",
              "          [163],\n",
              "          [168],\n",
              "          ...,\n",
              "          [163],\n",
              "          [162],\n",
              "          [159]],\n",
              "  \n",
              "         [[165],\n",
              "          [166],\n",
              "          [168],\n",
              "          ...,\n",
              "          [166],\n",
              "          [165],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[154],\n",
              "          [157],\n",
              "          [162],\n",
              "          ...,\n",
              "          [166],\n",
              "          [161],\n",
              "          [159]],\n",
              "  \n",
              "         [[149],\n",
              "          [151],\n",
              "          [156],\n",
              "          ...,\n",
              "          [161],\n",
              "          [156],\n",
              "          [152]],\n",
              "  \n",
              "         [[140],\n",
              "          [143],\n",
              "          [148],\n",
              "          ...,\n",
              "          [155],\n",
              "          [152],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[105],\n",
              "          [105],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [103],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[104],\n",
              "          [105],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [104],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[104],\n",
              "          [105],\n",
              "          [147],\n",
              "          ...,\n",
              "          [101],\n",
              "          [101],\n",
              "          [ 97]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [105],\n",
              "          [204],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [101],\n",
              "          [100]],\n",
              "  \n",
              "         [[104],\n",
              "          [102],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [103],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [100],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 98],\n",
              "          [ 95]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[56],\n",
              "          [56],\n",
              "          [55],\n",
              "          ...,\n",
              "          [79],\n",
              "          [78],\n",
              "          [81]],\n",
              "  \n",
              "         [[56],\n",
              "          [56],\n",
              "          [55],\n",
              "          ...,\n",
              "          [78],\n",
              "          [78],\n",
              "          [81]],\n",
              "  \n",
              "         [[56],\n",
              "          [56],\n",
              "          [55],\n",
              "          ...,\n",
              "          [78],\n",
              "          [79],\n",
              "          [81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[79],\n",
              "          [80],\n",
              "          [80],\n",
              "          ...,\n",
              "          [76],\n",
              "          [76],\n",
              "          [78]],\n",
              "  \n",
              "         [[81],\n",
              "          [80],\n",
              "          [80],\n",
              "          ...,\n",
              "          [76],\n",
              "          [76],\n",
              "          [78]],\n",
              "  \n",
              "         [[80],\n",
              "          [80],\n",
              "          [80],\n",
              "          ...,\n",
              "          [75],\n",
              "          [77],\n",
              "          [78]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[15],\n",
              "          [19],\n",
              "          [21],\n",
              "          ...,\n",
              "          [66],\n",
              "          [66],\n",
              "          [57]],\n",
              "  \n",
              "         [[16],\n",
              "          [20],\n",
              "          [21],\n",
              "          ...,\n",
              "          [64],\n",
              "          [56],\n",
              "          [59]],\n",
              "  \n",
              "         [[17],\n",
              "          [21],\n",
              "          [20],\n",
              "          ...,\n",
              "          [60],\n",
              "          [58],\n",
              "          [59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[40],\n",
              "          [45],\n",
              "          [67],\n",
              "          ...,\n",
              "          [52],\n",
              "          [44],\n",
              "          [35]],\n",
              "  \n",
              "         [[50],\n",
              "          [60],\n",
              "          [44],\n",
              "          ...,\n",
              "          [38],\n",
              "          [61],\n",
              "          [35]],\n",
              "  \n",
              "         [[51],\n",
              "          [52],\n",
              "          [49],\n",
              "          ...,\n",
              "          [44],\n",
              "          [49],\n",
              "          [40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[150],\n",
              "          [120],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [171],\n",
              "          [179],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [132],\n",
              "          [147],\n",
              "          ...,\n",
              "          [175],\n",
              "          [186],\n",
              "          [137]],\n",
              "  \n",
              "         [[135],\n",
              "          [138],\n",
              "          [147],\n",
              "          ...,\n",
              "          [182],\n",
              "          [191],\n",
              "          [178]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 55],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 30],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 27],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 84],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 87],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [104],\n",
              "          [104],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[127],\n",
              "          [137],\n",
              "          [137],\n",
              "          ...,\n",
              "          [132],\n",
              "          [118],\n",
              "          [120]],\n",
              "  \n",
              "         [[103],\n",
              "          [115],\n",
              "          [133],\n",
              "          ...,\n",
              "          [135],\n",
              "          [129],\n",
              "          [143]],\n",
              "  \n",
              "         [[141],\n",
              "          [132],\n",
              "          [147],\n",
              "          ...,\n",
              "          [133],\n",
              "          [138],\n",
              "          [139]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [111],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 60],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[113],\n",
              "          [103],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 96],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[120],\n",
              "          [112],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [109],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[176],\n",
              "          [177],\n",
              "          [178],\n",
              "          ...,\n",
              "          [128],\n",
              "          [127],\n",
              "          [130]],\n",
              "  \n",
              "         [[176],\n",
              "          [177],\n",
              "          [177],\n",
              "          ...,\n",
              "          [128],\n",
              "          [126],\n",
              "          [130]],\n",
              "  \n",
              "         [[175],\n",
              "          [173],\n",
              "          [174],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [147],\n",
              "          [141]],\n",
              "  \n",
              "         [[141],\n",
              "          [141],\n",
              "          [146],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 45],\n",
              "          [133]],\n",
              "  \n",
              "         [[134],\n",
              "          [143],\n",
              "          [142],\n",
              "          ...,\n",
              "          [131],\n",
              "          [ 45],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  2],\n",
              "          [ 44],\n",
              "          [132],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 12],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [129],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[112],\n",
              "          [ 98],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 11],\n",
              "          [ 12]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 92],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 81],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 94],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 81],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 94],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 83],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[108],\n",
              "          [107],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[104],\n",
              "          [101],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[105],\n",
              "          [103],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          [ 57]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[154],\n",
              "          [159],\n",
              "          [140],\n",
              "          ...,\n",
              "          [168],\n",
              "          [154],\n",
              "          [154]],\n",
              "  \n",
              "         [[124],\n",
              "          [155],\n",
              "          [136],\n",
              "          ...,\n",
              "          [156],\n",
              "          [137],\n",
              "          [122]],\n",
              "  \n",
              "         [[134],\n",
              "          [129],\n",
              "          [131],\n",
              "          ...,\n",
              "          [151],\n",
              "          [146],\n",
              "          [117]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[185],\n",
              "          [206],\n",
              "          [237],\n",
              "          ...,\n",
              "          [118],\n",
              "          [ 70],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[223],\n",
              "          [222],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 48],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[222],\n",
              "          [231],\n",
              "          [221],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 51],\n",
              "          [ 47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 90],\n",
              "          [126],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 23],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[225],\n",
              "          [214],\n",
              "          [216],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 19],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[186],\n",
              "          [213],\n",
              "          [201],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 18],\n",
              "          [ 23]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 90],\n",
              "          [ 74],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 55],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 60],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 63],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 69],\n",
              "          [ 71]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[208],\n",
              "          [209],\n",
              "          [209],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 46],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[209],\n",
              "          [210],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 47],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[212],\n",
              "          [212],\n",
              "          [212],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 43],\n",
              "          [ 42]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[130],\n",
              "          [118],\n",
              "          [117],\n",
              "          ...,\n",
              "          [125],\n",
              "          [138],\n",
              "          [130]],\n",
              "  \n",
              "         [[131],\n",
              "          [124],\n",
              "          [102],\n",
              "          ...,\n",
              "          [146],\n",
              "          [143],\n",
              "          [124]],\n",
              "  \n",
              "         [[131],\n",
              "          [118],\n",
              "          [128],\n",
              "          ...,\n",
              "          [154],\n",
              "          [149],\n",
              "          [157]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[145],\n",
              "          [165],\n",
              "          [161],\n",
              "          ...,\n",
              "          [117],\n",
              "          [144],\n",
              "          [178]],\n",
              "  \n",
              "         [[191],\n",
              "          [166],\n",
              "          [188],\n",
              "          ...,\n",
              "          [175],\n",
              "          [209],\n",
              "          [145]],\n",
              "  \n",
              "         [[162],\n",
              "          [132],\n",
              "          [161],\n",
              "          ...,\n",
              "          [175],\n",
              "          [188],\n",
              "          [169]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[60],\n",
              "          [50],\n",
              "          [52],\n",
              "          ...,\n",
              "          [45],\n",
              "          [53],\n",
              "          [57]],\n",
              "  \n",
              "         [[55],\n",
              "          [53],\n",
              "          [51],\n",
              "          ...,\n",
              "          [47],\n",
              "          [53],\n",
              "          [57]],\n",
              "  \n",
              "         [[58],\n",
              "          [46],\n",
              "          [47],\n",
              "          ...,\n",
              "          [55],\n",
              "          [44],\n",
              "          [54]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[55],\n",
              "          [56],\n",
              "          [57],\n",
              "          ...,\n",
              "          [71],\n",
              "          [71],\n",
              "          [67]],\n",
              "  \n",
              "         [[34],\n",
              "          [39],\n",
              "          [36],\n",
              "          ...,\n",
              "          [58],\n",
              "          [54],\n",
              "          [51]],\n",
              "  \n",
              "         [[35],\n",
              "          [35],\n",
              "          [32],\n",
              "          ...,\n",
              "          [54],\n",
              "          [50],\n",
              "          [48]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[109],\n",
              "          [102],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 47],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[135],\n",
              "          [140],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 57],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[127],\n",
              "          [146],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 65],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 84],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 72],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 83],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 62],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 82],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 60],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 22],\n",
              "          [ 62],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  0]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 47],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 47],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 99],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 88],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 86],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 13],\n",
              "          [ 25]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[145],\n",
              "          [133],\n",
              "          [129],\n",
              "          ...,\n",
              "          [129],\n",
              "          [130],\n",
              "          [129]],\n",
              "  \n",
              "         [[126],\n",
              "          [ 97],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [131],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 57],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [131],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[139],\n",
              "          [150],\n",
              "          [154],\n",
              "          ...,\n",
              "          [169],\n",
              "          [170],\n",
              "          [166]],\n",
              "  \n",
              "         [[133],\n",
              "          [139],\n",
              "          [157],\n",
              "          ...,\n",
              "          [175],\n",
              "          [174],\n",
              "          [171]],\n",
              "  \n",
              "         [[126],\n",
              "          [140],\n",
              "          [150],\n",
              "          ...,\n",
              "          [191],\n",
              "          [182],\n",
              "          [188]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 71],\n",
              "          [ 81],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 42],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 81],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 32],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 80],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 21],\n",
              "          [ 22]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 95],\n",
              "          [102],\n",
              "          ...,\n",
              "          [154],\n",
              "          [150],\n",
              "          [147]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 87],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [148],\n",
              "          [146],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 87],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [150],\n",
              "          [147],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 73],\n",
              "          [ 74],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 48],\n",
              "          [  6]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 79],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 64],\n",
              "          [  8]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 82],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 84],\n",
              "          [  6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 12],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  6],\n",
              "          [  4]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 26],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  6],\n",
              "          [  8]],\n",
              "  \n",
              "         [[133],\n",
              "          [192],\n",
              "          [229],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  6],\n",
              "          [  8]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 68],\n",
              "          [ 53],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [193],\n",
              "          [196],\n",
              "          [196]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 54],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [196],\n",
              "          [197],\n",
              "          [197]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 53],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [196],\n",
              "          [197],\n",
              "          [196]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 23],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 44],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 23],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 39],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 23],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 39],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 66],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [125],\n",
              "          [115],\n",
              "          [101]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [127],\n",
              "          [113],\n",
              "          [108]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[149],\n",
              "          [149],\n",
              "          [151],\n",
              "          ...,\n",
              "          [213],\n",
              "          [211],\n",
              "          [207]],\n",
              "  \n",
              "         [[148],\n",
              "          [147],\n",
              "          [150],\n",
              "          ...,\n",
              "          [210],\n",
              "          [209],\n",
              "          [215]],\n",
              "  \n",
              "         [[145],\n",
              "          [145],\n",
              "          [149],\n",
              "          ...,\n",
              "          [213],\n",
              "          [215],\n",
              "          [206]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 18],\n",
              "          [ 24],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 25],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 16],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 26],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 17],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 23],\n",
              "          [ 30]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 87],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 69],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 56],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [107],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 60],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 72],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[144],\n",
              "          [171],\n",
              "          [160],\n",
              "          ...,\n",
              "          [123],\n",
              "          [204],\n",
              "          [191]],\n",
              "  \n",
              "         [[148],\n",
              "          [150],\n",
              "          [148],\n",
              "          ...,\n",
              "          [112],\n",
              "          [198],\n",
              "          [196]],\n",
              "  \n",
              "         [[152],\n",
              "          [162],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [204],\n",
              "          [194]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[170],\n",
              "          [144],\n",
              "          [166],\n",
              "          ...,\n",
              "          [180],\n",
              "          [163],\n",
              "          [175]],\n",
              "  \n",
              "         [[155],\n",
              "          [148],\n",
              "          [167],\n",
              "          ...,\n",
              "          [173],\n",
              "          [171],\n",
              "          [169]],\n",
              "  \n",
              "         [[113],\n",
              "          [153],\n",
              "          [152],\n",
              "          ...,\n",
              "          [157],\n",
              "          [162],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 79],\n",
              "          [ 78],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 12],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 80],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 18],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 83],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 27],\n",
              "          [ 28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [111],\n",
              "          [116],\n",
              "          ...,\n",
              "          [161],\n",
              "          [161],\n",
              "          [144]],\n",
              "  \n",
              "         [[110],\n",
              "          [109],\n",
              "          [113],\n",
              "          ...,\n",
              "          [165],\n",
              "          [159],\n",
              "          [148]],\n",
              "  \n",
              "         [[121],\n",
              "          [109],\n",
              "          [112],\n",
              "          ...,\n",
              "          [144],\n",
              "          [159],\n",
              "          [147]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[126],\n",
              "          [121],\n",
              "          [119],\n",
              "          ...,\n",
              "          [133],\n",
              "          [137],\n",
              "          [132]],\n",
              "  \n",
              "         [[127],\n",
              "          [125],\n",
              "          [119],\n",
              "          ...,\n",
              "          [144],\n",
              "          [139],\n",
              "          [145]],\n",
              "  \n",
              "         [[131],\n",
              "          [128],\n",
              "          [121],\n",
              "          ...,\n",
              "          [136],\n",
              "          [139],\n",
              "          [136]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[207],\n",
              "          [212],\n",
              "          [202],\n",
              "          ...,\n",
              "          [202],\n",
              "          [215],\n",
              "          [221]],\n",
              "  \n",
              "         [[214],\n",
              "          [214],\n",
              "          [208],\n",
              "          ...,\n",
              "          [214],\n",
              "          [212],\n",
              "          [218]],\n",
              "  \n",
              "         [[205],\n",
              "          [215],\n",
              "          [217],\n",
              "          ...,\n",
              "          [225],\n",
              "          [211],\n",
              "          [215]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 44],\n",
              "          [ 55],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 63],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 42],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 58],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 31],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 59],\n",
              "          [ 72]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[137],\n",
              "          [142],\n",
              "          [166],\n",
              "          ...,\n",
              "          [221],\n",
              "          [229],\n",
              "          [224]],\n",
              "  \n",
              "         [[156],\n",
              "          [145],\n",
              "          [169],\n",
              "          ...,\n",
              "          [195],\n",
              "          [223],\n",
              "          [216]],\n",
              "  \n",
              "         [[151],\n",
              "          [142],\n",
              "          [162],\n",
              "          ...,\n",
              "          [168],\n",
              "          [196],\n",
              "          [213]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[155],\n",
              "          [124],\n",
              "          [108],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 72],\n",
              "          [122]],\n",
              "  \n",
              "         [[157],\n",
              "          [131],\n",
              "          [110],\n",
              "          ...,\n",
              "          [124],\n",
              "          [ 93],\n",
              "          [132]],\n",
              "  \n",
              "         [[160],\n",
              "          [129],\n",
              "          [111],\n",
              "          ...,\n",
              "          [129],\n",
              "          [ 98],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[133],\n",
              "          [ 70],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 71],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[133],\n",
              "          [ 82],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 77],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 82],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 74],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[241],\n",
              "          [240],\n",
              "          [240],\n",
              "          ...,\n",
              "          [240],\n",
              "          [240],\n",
              "          [241]],\n",
              "  \n",
              "         [[239],\n",
              "          [210],\n",
              "          [209],\n",
              "          ...,\n",
              "          [208],\n",
              "          [209],\n",
              "          [239]],\n",
              "  \n",
              "         [[240],\n",
              "          [205],\n",
              "          [178],\n",
              "          ...,\n",
              "          [179],\n",
              "          [208],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[240],\n",
              "          [211],\n",
              "          [181],\n",
              "          ...,\n",
              "          [184],\n",
              "          [211],\n",
              "          [241]],\n",
              "  \n",
              "         [[239],\n",
              "          [213],\n",
              "          [212],\n",
              "          ...,\n",
              "          [211],\n",
              "          [216],\n",
              "          [241]],\n",
              "  \n",
              "         [[242],\n",
              "          [241],\n",
              "          [241],\n",
              "          ...,\n",
              "          [241],\n",
              "          [241],\n",
              "          [243]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 80],\n",
              "          [ 49],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 65],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 87],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 36],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [133],\n",
              "          [107],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 60],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [113],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 73],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [103],\n",
              "          [112],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 53],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [114],\n",
              "          [101],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[199],\n",
              "          [200],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 14],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[200],\n",
              "          [201],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 10],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[200],\n",
              "          [202],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [  8],\n",
              "          [ 10]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 47],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 28],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 52],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 28],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 51],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 27],\n",
              "          [ 34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[139],\n",
              "          [140],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 12],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[134],\n",
              "          [140],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 11],\n",
              "          [  9]],\n",
              "  \n",
              "         [[138],\n",
              "          [137],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 11],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[186],\n",
              "          [185],\n",
              "          [190],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 29],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[176],\n",
              "          [190],\n",
              "          [183],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 43],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[187],\n",
              "          [177],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 47],\n",
              "          [ 42]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[111],\n",
              "          [ 73],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [198],\n",
              "          [193],\n",
              "          [195]],\n",
              "  \n",
              "         [[131],\n",
              "          [ 82],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [184],\n",
              "          [189],\n",
              "          [194]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 64],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [192],\n",
              "          [200],\n",
              "          [191]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [166],\n",
              "          [138],\n",
              "          ...,\n",
              "          [192],\n",
              "          [185],\n",
              "          [165]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [100],\n",
              "          [109],\n",
              "          ...,\n",
              "          [120],\n",
              "          [164],\n",
              "          [199]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [159],\n",
              "          [200],\n",
              "          ...,\n",
              "          [186],\n",
              "          [139],\n",
              "          [118]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 97],\n",
              "          [ 95],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 87],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 88],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 85],\n",
              "          [ 85]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[157],\n",
              "          [163],\n",
              "          [163],\n",
              "          ...,\n",
              "          [158],\n",
              "          [157],\n",
              "          [156]],\n",
              "  \n",
              "         [[170],\n",
              "          [170],\n",
              "          [177],\n",
              "          ...,\n",
              "          [160],\n",
              "          [160],\n",
              "          [159]],\n",
              "  \n",
              "         [[181],\n",
              "          [186],\n",
              "          [184],\n",
              "          ...,\n",
              "          [160],\n",
              "          [160],\n",
              "          [161]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 72],\n",
              "          [ 69],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 47],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 63],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 46],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 63],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 48],\n",
              "          [ 45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [165],\n",
              "          [192],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 35],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[167],\n",
              "          [180],\n",
              "          [195],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 33],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[188],\n",
              "          [195],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 28],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[12],\n",
              "          [11],\n",
              "          [10],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [ 8],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[12],\n",
              "          [11],\n",
              "          [10],\n",
              "          ...,\n",
              "          [11],\n",
              "          [ 9],\n",
              "          [ 8]],\n",
              "  \n",
              "         [[12],\n",
              "          [11],\n",
              "          [12],\n",
              "          ...,\n",
              "          [11],\n",
              "          [10],\n",
              "          [ 9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[17],\n",
              "          [18],\n",
              "          [18],\n",
              "          ...,\n",
              "          [16],\n",
              "          [13],\n",
              "          [17]],\n",
              "  \n",
              "         [[16],\n",
              "          [18],\n",
              "          [18],\n",
              "          ...,\n",
              "          [16],\n",
              "          [17],\n",
              "          [14]],\n",
              "  \n",
              "         [[18],\n",
              "          [16],\n",
              "          [16],\n",
              "          ...,\n",
              "          [17],\n",
              "          [17],\n",
              "          [16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[103],\n",
              "          [227],\n",
              "          [205],\n",
              "          ...,\n",
              "          [147],\n",
              "          [133],\n",
              "          [153]],\n",
              "  \n",
              "         [[116],\n",
              "          [225],\n",
              "          [209],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [142],\n",
              "          [156]],\n",
              "  \n",
              "         [[134],\n",
              "          [210],\n",
              "          [211],\n",
              "          ...,\n",
              "          [133],\n",
              "          [111],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[181],\n",
              "          [160],\n",
              "          [217],\n",
              "          ...,\n",
              "          [110],\n",
              "          [112],\n",
              "          [120]],\n",
              "  \n",
              "         [[188],\n",
              "          [162],\n",
              "          [216],\n",
              "          ...,\n",
              "          [118],\n",
              "          [106],\n",
              "          [122]],\n",
              "  \n",
              "         [[189],\n",
              "          [161],\n",
              "          [207],\n",
              "          ...,\n",
              "          [116],\n",
              "          [110],\n",
              "          [108]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[186],\n",
              "          [234],\n",
              "          [208],\n",
              "          ...,\n",
              "          [242],\n",
              "          [221],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[174],\n",
              "          [223],\n",
              "          [234],\n",
              "          ...,\n",
              "          [218],\n",
              "          [222],\n",
              "          [151]],\n",
              "  \n",
              "         [[171],\n",
              "          [210],\n",
              "          [250],\n",
              "          ...,\n",
              "          [180],\n",
              "          [196],\n",
              "          [213]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [ 73],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 46],\n",
              "          [115]],\n",
              "  \n",
              "         [[137],\n",
              "          [177],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 41],\n",
              "          [143]],\n",
              "  \n",
              "         [[117],\n",
              "          [128],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 99],\n",
              "          [163]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[12],\n",
              "          [16],\n",
              "          [36],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [10],\n",
              "          [ 8]],\n",
              "  \n",
              "         [[10],\n",
              "          [16],\n",
              "          [32],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 8],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[12],\n",
              "          [13],\n",
              "          [33],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          [ 6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 8],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 2]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 79],\n",
              "          [ 78],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 68],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 84],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 69],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 87],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 66],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 27],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 94],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 32],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [115],\n",
              "          [106],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 34],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [117],\n",
              "          [118],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[160],\n",
              "          [164],\n",
              "          [170],\n",
              "          ...,\n",
              "          [137],\n",
              "          [209],\n",
              "          [148]],\n",
              "  \n",
              "         [[161],\n",
              "          [165],\n",
              "          [169],\n",
              "          ...,\n",
              "          [131],\n",
              "          [185],\n",
              "          [151]],\n",
              "  \n",
              "         [[160],\n",
              "          [164],\n",
              "          [168],\n",
              "          ...,\n",
              "          [133],\n",
              "          [196],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[227],\n",
              "          [240],\n",
              "          [249],\n",
              "          ...,\n",
              "          [187],\n",
              "          [186],\n",
              "          [185]],\n",
              "  \n",
              "         [[222],\n",
              "          [234],\n",
              "          [248],\n",
              "          ...,\n",
              "          [186],\n",
              "          [184],\n",
              "          [182]],\n",
              "  \n",
              "         [[213],\n",
              "          [228],\n",
              "          [243],\n",
              "          ...,\n",
              "          [182],\n",
              "          [182],\n",
              "          [180]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 89],\n",
              "          [ 95],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 76],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [123],\n",
              "          [155]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 54],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [122],\n",
              "          [ 91],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 64],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [144],\n",
              "          [150]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [216],\n",
              "          [221],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 86],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [227],\n",
              "          [202],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[13],\n",
              "          [21],\n",
              "          [28],\n",
              "          ...,\n",
              "          [33],\n",
              "          [27],\n",
              "          [28]],\n",
              "  \n",
              "         [[34],\n",
              "          [35],\n",
              "          [23],\n",
              "          ...,\n",
              "          [39],\n",
              "          [34],\n",
              "          [36]],\n",
              "  \n",
              "         [[12],\n",
              "          [12],\n",
              "          [12],\n",
              "          ...,\n",
              "          [45],\n",
              "          [44],\n",
              "          [38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[34],\n",
              "          [25],\n",
              "          [73],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 3],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[32],\n",
              "          [22],\n",
              "          [62],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 2],\n",
              "          [ 3]],\n",
              "  \n",
              "         [[29],\n",
              "          [25],\n",
              "          [27],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 3]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 55],\n",
              "          [ 66],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 52],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 67],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 74],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 77],\n",
              "          [ 50]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  5],\n",
              "          [  5],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [173],\n",
              "          [146],\n",
              "          [145]],\n",
              "  \n",
              "         [[  3],\n",
              "          [  5],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [152],\n",
              "          [152],\n",
              "          [156]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  5],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [161],\n",
              "          [152],\n",
              "          [136]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[114],\n",
              "          [114],\n",
              "          [114],\n",
              "          ...,\n",
              "          [148],\n",
              "          [146],\n",
              "          [143]],\n",
              "  \n",
              "         [[122],\n",
              "          [120],\n",
              "          [119],\n",
              "          ...,\n",
              "          [151],\n",
              "          [151],\n",
              "          [152]],\n",
              "  \n",
              "         [[133],\n",
              "          [130],\n",
              "          [128],\n",
              "          ...,\n",
              "          [154],\n",
              "          [155],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 72],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [120],\n",
              "          [118],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 83],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [119],\n",
              "          [117],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 93],\n",
              "          [100],\n",
              "          ...,\n",
              "          [119],\n",
              "          [117],\n",
              "          [119]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[251],\n",
              "          [250],\n",
              "          [255],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 22],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[241],\n",
              "          [244],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[231],\n",
              "          [253],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [108],\n",
              "          [108],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 95],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[108],\n",
              "          [110],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 94],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[106],\n",
              "          [110],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 96],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[244],\n",
              "          [242],\n",
              "          [239],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 14],\n",
              "          [  9]],\n",
              "  \n",
              "         [[247],\n",
              "          [244],\n",
              "          [240],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 15],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[234],\n",
              "          [230],\n",
              "          [237],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 16],\n",
              "          [ 20]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[204],\n",
              "          [206],\n",
              "          [204],\n",
              "          ...,\n",
              "          [110],\n",
              "          [110],\n",
              "          [110]],\n",
              "  \n",
              "         [[200],\n",
              "          [205],\n",
              "          [210],\n",
              "          ...,\n",
              "          [115],\n",
              "          [114],\n",
              "          [111]],\n",
              "  \n",
              "         [[202],\n",
              "          [202],\n",
              "          [212],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[150],\n",
              "          [145],\n",
              "          [144],\n",
              "          ...,\n",
              "          [125],\n",
              "          [123],\n",
              "          [119]],\n",
              "  \n",
              "         [[156],\n",
              "          [143],\n",
              "          [143],\n",
              "          ...,\n",
              "          [127],\n",
              "          [125],\n",
              "          [121]],\n",
              "  \n",
              "         [[152],\n",
              "          [145],\n",
              "          [143],\n",
              "          ...,\n",
              "          [126],\n",
              "          [126],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[145],\n",
              "          [139],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [122],\n",
              "          [133],\n",
              "          [149]],\n",
              "  \n",
              "         [[146],\n",
              "          [106],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [117],\n",
              "          [141],\n",
              "          [152]],\n",
              "  \n",
              "         [[148],\n",
              "          [112],\n",
              "          [138],\n",
              "          ...,\n",
              "          [139],\n",
              "          [149],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[180],\n",
              "          [198],\n",
              "          [205],\n",
              "          ...,\n",
              "          [253],\n",
              "          [223],\n",
              "          [198]],\n",
              "  \n",
              "         [[205],\n",
              "          [215],\n",
              "          [189],\n",
              "          ...,\n",
              "          [234],\n",
              "          [212],\n",
              "          [194]],\n",
              "  \n",
              "         [[197],\n",
              "          [187],\n",
              "          [188],\n",
              "          ...,\n",
              "          [192],\n",
              "          [199],\n",
              "          [221]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[197],\n",
              "          [174],\n",
              "          [185],\n",
              "          ...,\n",
              "          [236],\n",
              "          [172],\n",
              "          [175]],\n",
              "  \n",
              "         [[231],\n",
              "          [220],\n",
              "          [210],\n",
              "          ...,\n",
              "          [162],\n",
              "          [166],\n",
              "          [220]],\n",
              "  \n",
              "         [[206],\n",
              "          [225],\n",
              "          [209],\n",
              "          ...,\n",
              "          [173],\n",
              "          [157],\n",
              "          [203]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 26],\n",
              "          [ 27],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 50],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 51],\n",
              "          [128]],\n",
              "  \n",
              "         [[106],\n",
              "          [ 36],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 46],\n",
              "          [131]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[195],\n",
              "          [199],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 93],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[192],\n",
              "          [201],\n",
              "          [197],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 92],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[195],\n",
              "          [201],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 90],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[165],\n",
              "          [159],\n",
              "          [152],\n",
              "          ...,\n",
              "          [182],\n",
              "          [181],\n",
              "          [176]],\n",
              "  \n",
              "         [[155],\n",
              "          [154],\n",
              "          [150],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [178]],\n",
              "  \n",
              "         [[161],\n",
              "          [153],\n",
              "          [156],\n",
              "          ...,\n",
              "          [181],\n",
              "          [180],\n",
              "          [182]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[153],\n",
              "          [159],\n",
              "          [159],\n",
              "          ...,\n",
              "          [147],\n",
              "          [147],\n",
              "          [115]],\n",
              "  \n",
              "         [[152],\n",
              "          [160],\n",
              "          [179],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 68],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[153],\n",
              "          [141],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 41],\n",
              "          [ 35]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 64],\n",
              "          [ 50],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [207],\n",
              "          [207],\n",
              "          [207]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 40],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [207],\n",
              "          [205],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 40],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [208],\n",
              "          [204],\n",
              "          [206]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [124],\n",
              "          [124],\n",
              "          ...,\n",
              "          [124],\n",
              "          [126],\n",
              "          [122]],\n",
              "  \n",
              "         [[123],\n",
              "          [125],\n",
              "          [126],\n",
              "          ...,\n",
              "          [126],\n",
              "          [124],\n",
              "          [123]],\n",
              "  \n",
              "         [[121],\n",
              "          [123],\n",
              "          [124],\n",
              "          ...,\n",
              "          [122],\n",
              "          [119],\n",
              "          [119]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[148],\n",
              "          [153],\n",
              "          [155],\n",
              "          ...,\n",
              "          [151],\n",
              "          [141],\n",
              "          [158]],\n",
              "  \n",
              "         [[147],\n",
              "          [150],\n",
              "          [153],\n",
              "          ...,\n",
              "          [142],\n",
              "          [155],\n",
              "          [165]],\n",
              "  \n",
              "         [[148],\n",
              "          [150],\n",
              "          [153],\n",
              "          ...,\n",
              "          [155],\n",
              "          [166],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[180],\n",
              "          [182],\n",
              "          [183],\n",
              "          ...,\n",
              "          [198],\n",
              "          [193],\n",
              "          [194]],\n",
              "  \n",
              "         [[177],\n",
              "          [180],\n",
              "          [181],\n",
              "          ...,\n",
              "          [194],\n",
              "          [192],\n",
              "          [188]],\n",
              "  \n",
              "         [[174],\n",
              "          [175],\n",
              "          [179],\n",
              "          ...,\n",
              "          [189],\n",
              "          [196],\n",
              "          [205]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[18],\n",
              "          [24],\n",
              "          [31],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[22],\n",
              "          [35],\n",
              "          [16],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[24],\n",
              "          [32],\n",
              "          [34],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 2],\n",
              "          [ 6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[77],\n",
              "          [77],\n",
              "          [75],\n",
              "          ...,\n",
              "          [38],\n",
              "          [11],\n",
              "          [42]],\n",
              "  \n",
              "         [[71],\n",
              "          [73],\n",
              "          [64],\n",
              "          ...,\n",
              "          [71],\n",
              "          [66],\n",
              "          [58]],\n",
              "  \n",
              "         [[66],\n",
              "          [58],\n",
              "          [77],\n",
              "          ...,\n",
              "          [68],\n",
              "          [63],\n",
              "          [75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 18],\n",
              "          [ 85],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 27],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 44],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 22],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 93],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 33],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 45],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 43],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 49],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 45],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 52],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 46],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[144],\n",
              "          [147],\n",
              "          [147],\n",
              "          ...,\n",
              "          [124],\n",
              "          [124],\n",
              "          [123]],\n",
              "  \n",
              "         [[148],\n",
              "          [148],\n",
              "          [152],\n",
              "          ...,\n",
              "          [122],\n",
              "          [122],\n",
              "          [121]],\n",
              "  \n",
              "         [[152],\n",
              "          [147],\n",
              "          [151],\n",
              "          ...,\n",
              "          [121],\n",
              "          [123],\n",
              "          [122]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[188],\n",
              "          [192],\n",
              "          [195],\n",
              "          ...,\n",
              "          [169],\n",
              "          [168],\n",
              "          [169]],\n",
              "  \n",
              "         [[192],\n",
              "          [190],\n",
              "          [191],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [170]],\n",
              "  \n",
              "         [[193],\n",
              "          [194],\n",
              "          [195],\n",
              "          ...,\n",
              "          [170],\n",
              "          [167],\n",
              "          [169]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 97],\n",
              "          [ 96],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [112],\n",
              "          [112],\n",
              "          [117]],\n",
              "  \n",
              "         [[100],\n",
              "          [102],\n",
              "          [102],\n",
              "          ...,\n",
              "          [108],\n",
              "          [113],\n",
              "          [110]],\n",
              "  \n",
              "         [[101],\n",
              "          [103],\n",
              "          [102],\n",
              "          ...,\n",
              "          [112],\n",
              "          [106],\n",
              "          [108]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[201],\n",
              "          [197],\n",
              "          [190],\n",
              "          ...,\n",
              "          [167],\n",
              "          [172],\n",
              "          [173]],\n",
              "  \n",
              "         [[192],\n",
              "          [188],\n",
              "          [183],\n",
              "          ...,\n",
              "          [176],\n",
              "          [172],\n",
              "          [166]],\n",
              "  \n",
              "         [[184],\n",
              "          [181],\n",
              "          [181],\n",
              "          ...,\n",
              "          [178],\n",
              "          [172],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[127],\n",
              "          [135],\n",
              "          [112],\n",
              "          ...,\n",
              "          [134],\n",
              "          [138],\n",
              "          [141]],\n",
              "  \n",
              "         [[117],\n",
              "          [113],\n",
              "          [106],\n",
              "          ...,\n",
              "          [139],\n",
              "          [135],\n",
              "          [138]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [122],\n",
              "          [120],\n",
              "          ...,\n",
              "          [123],\n",
              "          [130],\n",
              "          [148]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[115],\n",
              "          [142],\n",
              "          [112],\n",
              "          ...,\n",
              "          [155],\n",
              "          [136],\n",
              "          [193]],\n",
              "  \n",
              "         [[116],\n",
              "          [121],\n",
              "          [134],\n",
              "          ...,\n",
              "          [184],\n",
              "          [176],\n",
              "          [178]],\n",
              "  \n",
              "         [[102],\n",
              "          [123],\n",
              "          [143],\n",
              "          ...,\n",
              "          [182],\n",
              "          [156],\n",
              "          [185]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [252],\n",
              "          [250],\n",
              "          ...,\n",
              "          [251],\n",
              "          [250],\n",
              "          [239]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [253],\n",
              "          ...,\n",
              "          [250],\n",
              "          [249],\n",
              "          [238]],\n",
              "  \n",
              "         [[252],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [251],\n",
              "          [249],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[220],\n",
              "          [220],\n",
              "          [227],\n",
              "          ...,\n",
              "          [237],\n",
              "          [207],\n",
              "          [228]],\n",
              "  \n",
              "         [[228],\n",
              "          [225],\n",
              "          [223],\n",
              "          ...,\n",
              "          [239],\n",
              "          [210],\n",
              "          [232]],\n",
              "  \n",
              "         [[222],\n",
              "          [219],\n",
              "          [219],\n",
              "          ...,\n",
              "          [237],\n",
              "          [211],\n",
              "          [232]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 97],\n",
              "          [100],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [  9],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 87],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 11],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [115],\n",
              "          [132],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 15],\n",
              "          [  7]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  5],\n",
              "          [ 64],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 87],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 62],\n",
              "          [141],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 82],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 54],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 78],\n",
              "          [ 95]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[156],\n",
              "          [180],\n",
              "          [170],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [118]],\n",
              "  \n",
              "         [[110],\n",
              "          [177],\n",
              "          [183],\n",
              "          ...,\n",
              "          [124],\n",
              "          [125],\n",
              "          [122]],\n",
              "  \n",
              "         [[101],\n",
              "          [178],\n",
              "          [176],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [152],\n",
              "          [150],\n",
              "          ...,\n",
              "          [162],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         [[120],\n",
              "          [148],\n",
              "          [150],\n",
              "          ...,\n",
              "          [166],\n",
              "          [162],\n",
              "          [163]],\n",
              "  \n",
              "         [[145],\n",
              "          [143],\n",
              "          [149],\n",
              "          ...,\n",
              "          [164],\n",
              "          [160],\n",
              "          [128]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 70],\n",
              "          [ 68],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [108],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 69],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [108],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 70],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [109],\n",
              "          [110]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 57],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 10],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 59],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [  9]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 66],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [  8],\n",
              "          [  6]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 73],\n",
              "          [ 84],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 76],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 86],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 72],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 86],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 66],\n",
              "          [ 70]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  7],\n",
              "          [  6],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [108],\n",
              "          [105],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 90],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 40],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 88],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[177],\n",
              "          [102],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 23],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[177],\n",
              "          [102],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 26],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[178],\n",
              "          [ 96],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 47],\n",
              "          [196],\n",
              "          ...,\n",
              "          [162],\n",
              "          [124],\n",
              "          [155]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 39],\n",
              "          [141],\n",
              "          ...,\n",
              "          [129],\n",
              "          [111],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 39],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 85],\n",
              "          [140]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[36],\n",
              "          [36],\n",
              "          [35],\n",
              "          ...,\n",
              "          [29],\n",
              "          [33],\n",
              "          [33]],\n",
              "  \n",
              "         [[39],\n",
              "          [39],\n",
              "          [37],\n",
              "          ...,\n",
              "          [29],\n",
              "          [33],\n",
              "          [33]],\n",
              "  \n",
              "         [[45],\n",
              "          [37],\n",
              "          [39],\n",
              "          ...,\n",
              "          [28],\n",
              "          [34],\n",
              "          [33]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[77],\n",
              "          [75],\n",
              "          [77],\n",
              "          ...,\n",
              "          [69],\n",
              "          [83],\n",
              "          [82]],\n",
              "  \n",
              "         [[78],\n",
              "          [78],\n",
              "          [73],\n",
              "          ...,\n",
              "          [83],\n",
              "          [79],\n",
              "          [71]],\n",
              "  \n",
              "         [[83],\n",
              "          [80],\n",
              "          [78],\n",
              "          ...,\n",
              "          [76],\n",
              "          [75],\n",
              "          [44]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[110],\n",
              "          [118],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [102],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[109],\n",
              "          [115],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 90],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [107],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [103],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [137],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 27],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[112],\n",
              "          [113],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 44],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[112],\n",
              "          [117],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 54],\n",
              "          [ 29]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 95],\n",
              "          [ 96],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 56],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 96],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 20],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 94],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 32],\n",
              "          [ 42]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[206],\n",
              "          [208],\n",
              "          [212],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 90],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[204],\n",
              "          [206],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 88],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[200],\n",
              "          [206],\n",
              "          [209],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 88],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 59],\n",
              "          [ 55],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 56],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 56],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 55],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 55],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 45],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 25],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [146],\n",
              "          [133],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 25],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [126],\n",
              "          [115],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 24],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [112],\n",
              "          [105],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [253],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [252],\n",
              "          ...,\n",
              "          [254],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 39],\n",
              "          [ 43],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [167],\n",
              "          [167],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 42],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [167],\n",
              "          [168],\n",
              "          [165]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 46],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [167],\n",
              "          [167],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[161],\n",
              "          [156],\n",
              "          [138],\n",
              "          ...,\n",
              "          [134],\n",
              "          [139],\n",
              "          [144]],\n",
              "  \n",
              "         [[162],\n",
              "          [162],\n",
              "          [142],\n",
              "          ...,\n",
              "          [128],\n",
              "          [133],\n",
              "          [139]],\n",
              "  \n",
              "         [[163],\n",
              "          [158],\n",
              "          [161],\n",
              "          ...,\n",
              "          [120],\n",
              "          [132],\n",
              "          [139]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 91],\n",
              "          [ 91],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 97],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 89],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 96],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 90],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [101],\n",
              "          [ 87]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[139],\n",
              "          [109],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[140],\n",
              "          [101],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 76],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[139],\n",
              "          [113],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 81]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[33],\n",
              "          [33],\n",
              "          [32],\n",
              "          ...,\n",
              "          [19],\n",
              "          [13],\n",
              "          [10]],\n",
              "  \n",
              "         [[38],\n",
              "          [36],\n",
              "          [32],\n",
              "          ...,\n",
              "          [34],\n",
              "          [25],\n",
              "          [20]],\n",
              "  \n",
              "         [[39],\n",
              "          [33],\n",
              "          [30],\n",
              "          ...,\n",
              "          [54],\n",
              "          [49],\n",
              "          [44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[12],\n",
              "          [47],\n",
              "          [66],\n",
              "          ...,\n",
              "          [28],\n",
              "          [46],\n",
              "          [37]],\n",
              "  \n",
              "         [[14],\n",
              "          [47],\n",
              "          [61],\n",
              "          ...,\n",
              "          [30],\n",
              "          [47],\n",
              "          [35]],\n",
              "  \n",
              "         [[15],\n",
              "          [46],\n",
              "          [58],\n",
              "          ...,\n",
              "          [25],\n",
              "          [42],\n",
              "          [44]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 57],\n",
              "          [ 49],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 58],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 66],\n",
              "          [176],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[156],\n",
              "          [197],\n",
              "          [233],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [  9],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[173],\n",
              "          [219],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [  9],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[210],\n",
              "          [198],\n",
              "          [172],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [  9],\n",
              "          [  5]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [250],\n",
              "          [222],\n",
              "          ...,\n",
              "          [233],\n",
              "          [232],\n",
              "          [232]],\n",
              "  \n",
              "         [[236],\n",
              "          [190],\n",
              "          [113],\n",
              "          ...,\n",
              "          [235],\n",
              "          [234],\n",
              "          [232]],\n",
              "  \n",
              "         [[246],\n",
              "          [ 64],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [236],\n",
              "          [234],\n",
              "          [233]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 69],\n",
              "          [121],\n",
              "          ...,\n",
              "          [110],\n",
              "          [116],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 77],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [114],\n",
              "          [124],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 76],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [110],\n",
              "          [ 95],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 75],\n",
              "          [ 60],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [126],\n",
              "          [120],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 59],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [125],\n",
              "          [119],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 57],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [128],\n",
              "          [121],\n",
              "          [101]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 41],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [106],\n",
              "          [109],\n",
              "          [107]],\n",
              "  \n",
              "         [[117],\n",
              "          [109],\n",
              "          [112],\n",
              "          ...,\n",
              "          [106],\n",
              "          [106],\n",
              "          [106]],\n",
              "  \n",
              "         [[142],\n",
              "          [127],\n",
              "          [121],\n",
              "          ...,\n",
              "          [103],\n",
              "          [103],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[225],\n",
              "          [208],\n",
              "          [210],\n",
              "          ...,\n",
              "          [220],\n",
              "          [243],\n",
              "          [206]],\n",
              "  \n",
              "         [[201],\n",
              "          [223],\n",
              "          [189],\n",
              "          ...,\n",
              "          [231],\n",
              "          [215],\n",
              "          [217]],\n",
              "  \n",
              "         [[234],\n",
              "          [225],\n",
              "          [217],\n",
              "          ...,\n",
              "          [230],\n",
              "          [243],\n",
              "          [216]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[189],\n",
              "          [153],\n",
              "          [166],\n",
              "          ...,\n",
              "          [212],\n",
              "          [193],\n",
              "          [234]],\n",
              "  \n",
              "         [[196],\n",
              "          [194],\n",
              "          [214],\n",
              "          ...,\n",
              "          [151],\n",
              "          [225],\n",
              "          [117]],\n",
              "  \n",
              "         [[185],\n",
              "          [198],\n",
              "          [193],\n",
              "          ...,\n",
              "          [192],\n",
              "          [224],\n",
              "          [183]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  6],\n",
              "          [  7],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [ 24],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 33],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  4],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 25],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 49],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 99],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 94],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 69],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 83],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 95],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 54],\n",
              "          [ 52],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [134],\n",
              "          [148],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 40],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [165],\n",
              "          [167],\n",
              "          [138]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 44],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [191],\n",
              "          [185],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[113],\n",
              "          [140],\n",
              "          [146],\n",
              "          ...,\n",
              "          [118],\n",
              "          [105],\n",
              "          [161]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [125],\n",
              "          [134],\n",
              "          ...,\n",
              "          [137],\n",
              "          [109],\n",
              "          [121]],\n",
              "  \n",
              "         [[108],\n",
              "          [102],\n",
              "          [133],\n",
              "          ...,\n",
              "          [126],\n",
              "          [128],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 41],\n",
              "          [ 18],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 27],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 56],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 25],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 51],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 25],\n",
              "          [ 27]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 18],\n",
              "          [  4],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [169],\n",
              "          [169],\n",
              "          [163]],\n",
              "  \n",
              "         [[185],\n",
              "          [ 36],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [207],\n",
              "          [191],\n",
              "          [189]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 28],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [195],\n",
              "          [206],\n",
              "          [194]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 27],\n",
              "          [ 30],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 55],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 31],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 57],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [126],\n",
              "          [ 75],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 31],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 36],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 29],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 33],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[108],\n",
              "          [ 93],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 34],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[107],\n",
              "          [ 61],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 26],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[106],\n",
              "          [ 33],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [109],\n",
              "          [ 69],\n",
              "          [106]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [174],\n",
              "          [175],\n",
              "          ...,\n",
              "          [221],\n",
              "          [216],\n",
              "          [210]],\n",
              "  \n",
              "         [[174],\n",
              "          [183],\n",
              "          [184],\n",
              "          ...,\n",
              "          [209],\n",
              "          [209],\n",
              "          [208]],\n",
              "  \n",
              "         [[186],\n",
              "          [162],\n",
              "          [190],\n",
              "          ...,\n",
              "          [206],\n",
              "          [208],\n",
              "          [196]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 70],\n",
              "          [105],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 76],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 64],\n",
              "          [105],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 77],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 68],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [110],\n",
              "          [ 74],\n",
              "          [ 68]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[144],\n",
              "          [146],\n",
              "          [179],\n",
              "          ...,\n",
              "          [173],\n",
              "          [169],\n",
              "          [170]],\n",
              "  \n",
              "         [[137],\n",
              "          [158],\n",
              "          [163],\n",
              "          ...,\n",
              "          [159],\n",
              "          [162],\n",
              "          [159]],\n",
              "  \n",
              "         [[145],\n",
              "          [147],\n",
              "          [148],\n",
              "          ...,\n",
              "          [167],\n",
              "          [170],\n",
              "          [158]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[138],\n",
              "          [143],\n",
              "          [173],\n",
              "          ...,\n",
              "          [156],\n",
              "          [165],\n",
              "          [154]],\n",
              "  \n",
              "         [[181],\n",
              "          [144],\n",
              "          [144],\n",
              "          ...,\n",
              "          [162],\n",
              "          [158],\n",
              "          [197]],\n",
              "  \n",
              "         [[233],\n",
              "          [175],\n",
              "          [151],\n",
              "          ...,\n",
              "          [153],\n",
              "          [160],\n",
              "          [195]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[191],\n",
              "          [147],\n",
              "          [147],\n",
              "          ...,\n",
              "          [100],\n",
              "          [117],\n",
              "          [217]],\n",
              "  \n",
              "         [[189],\n",
              "          [134],\n",
              "          [185],\n",
              "          ...,\n",
              "          [133],\n",
              "          [197],\n",
              "          [163]],\n",
              "  \n",
              "         [[212],\n",
              "          [164],\n",
              "          [165],\n",
              "          ...,\n",
              "          [133],\n",
              "          [189],\n",
              "          [132]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 74],\n",
              "          [ 72],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 79],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 76],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 93],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 54],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [164],\n",
              "          [152],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 60],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [166],\n",
              "          [158],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 60],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [141],\n",
              "          [170],\n",
              "          [165]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[242],\n",
              "          [227],\n",
              "          [213],\n",
              "          ...,\n",
              "          [243],\n",
              "          [242],\n",
              "          [242]],\n",
              "  \n",
              "         [[246],\n",
              "          [232],\n",
              "          [211],\n",
              "          ...,\n",
              "          [244],\n",
              "          [243],\n",
              "          [242]],\n",
              "  \n",
              "         [[246],\n",
              "          [235],\n",
              "          [205],\n",
              "          ...,\n",
              "          [244],\n",
              "          [247],\n",
              "          [247]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[215],\n",
              "          [220],\n",
              "          [222],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 82],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[215],\n",
              "          [217],\n",
              "          [219],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 83],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[213],\n",
              "          [215],\n",
              "          [217],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 76],\n",
              "          [ 98]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[156],\n",
              "          [150],\n",
              "          [145],\n",
              "          ...,\n",
              "          [141],\n",
              "          [141],\n",
              "          [134]],\n",
              "  \n",
              "         [[172],\n",
              "          [170],\n",
              "          [163],\n",
              "          ...,\n",
              "          [141],\n",
              "          [130],\n",
              "          [126]],\n",
              "  \n",
              "         [[149],\n",
              "          [145],\n",
              "          [146],\n",
              "          ...,\n",
              "          [143],\n",
              "          [144],\n",
              "          [142]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [181],\n",
              "          [177],\n",
              "          ...,\n",
              "          [117],\n",
              "          [110],\n",
              "          [130]],\n",
              "  \n",
              "         [[177],\n",
              "          [173],\n",
              "          [170],\n",
              "          ...,\n",
              "          [112],\n",
              "          [106],\n",
              "          [124]],\n",
              "  \n",
              "         [[172],\n",
              "          [172],\n",
              "          [176],\n",
              "          ...,\n",
              "          [121],\n",
              "          [126],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[214],\n",
              "          [153],\n",
              "          [190],\n",
              "          ...,\n",
              "          [187],\n",
              "          [225],\n",
              "          [234]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [108],\n",
              "          [139],\n",
              "          ...,\n",
              "          [252],\n",
              "          [250],\n",
              "          [250]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [135],\n",
              "          [108],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[177],\n",
              "          [188],\n",
              "          [187],\n",
              "          ...,\n",
              "          [170],\n",
              "          [186],\n",
              "          [188]],\n",
              "  \n",
              "         [[177],\n",
              "          [176],\n",
              "          [179],\n",
              "          ...,\n",
              "          [212],\n",
              "          [206],\n",
              "          [191]],\n",
              "  \n",
              "         [[177],\n",
              "          [180],\n",
              "          [177],\n",
              "          ...,\n",
              "          [188],\n",
              "          [184],\n",
              "          [185]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[198],\n",
              "          [194],\n",
              "          [229],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 29],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[169],\n",
              "          [197],\n",
              "          [245],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 20],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[157],\n",
              "          [183],\n",
              "          [204],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 68],\n",
              "          [100]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[226],\n",
              "          [225],\n",
              "          [228],\n",
              "          ...,\n",
              "          [159],\n",
              "          [129],\n",
              "          [125]],\n",
              "  \n",
              "         [[228],\n",
              "          [228],\n",
              "          [228],\n",
              "          ...,\n",
              "          [133],\n",
              "          [127],\n",
              "          [128]],\n",
              "  \n",
              "         [[226],\n",
              "          [228],\n",
              "          [226],\n",
              "          ...,\n",
              "          [186],\n",
              "          [168],\n",
              "          [180]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[111],\n",
              "          [111],\n",
              "          [108],\n",
              "          ...,\n",
              "          [108],\n",
              "          [113],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 99],\n",
              "          [111],\n",
              "          ...,\n",
              "          [108],\n",
              "          [112],\n",
              "          [112]],\n",
              "  \n",
              "         [[136],\n",
              "          [136],\n",
              "          [132],\n",
              "          ...,\n",
              "          [108],\n",
              "          [113],\n",
              "          [113]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 72],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 75],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 54],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 80],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 49],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[162],\n",
              "          [201],\n",
              "          [227],\n",
              "          ...,\n",
              "          [199],\n",
              "          [208],\n",
              "          [220]],\n",
              "  \n",
              "         [[118],\n",
              "          [131],\n",
              "          [190],\n",
              "          ...,\n",
              "          [221],\n",
              "          [206],\n",
              "          [157]],\n",
              "  \n",
              "         [[103],\n",
              "          [138],\n",
              "          [105],\n",
              "          ...,\n",
              "          [188],\n",
              "          [141],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[251],\n",
              "          [205],\n",
              "          [217],\n",
              "          ...,\n",
              "          [202],\n",
              "          [148],\n",
              "          [188]],\n",
              "  \n",
              "         [[246],\n",
              "          [147],\n",
              "          [166],\n",
              "          ...,\n",
              "          [228],\n",
              "          [184],\n",
              "          [188]],\n",
              "  \n",
              "         [[251],\n",
              "          [220],\n",
              "          [211],\n",
              "          ...,\n",
              "          [233],\n",
              "          [242],\n",
              "          [233]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[134],\n",
              "          [127],\n",
              "          [114],\n",
              "          ...,\n",
              "          [120],\n",
              "          [113],\n",
              "          [123]],\n",
              "  \n",
              "         [[114],\n",
              "          [107],\n",
              "          [108],\n",
              "          ...,\n",
              "          [117],\n",
              "          [118],\n",
              "          [113]],\n",
              "  \n",
              "         [[126],\n",
              "          [120],\n",
              "          [112],\n",
              "          ...,\n",
              "          [121],\n",
              "          [120],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [137],\n",
              "          [140],\n",
              "          ...,\n",
              "          [131],\n",
              "          [140],\n",
              "          [129]],\n",
              "  \n",
              "         [[141],\n",
              "          [151],\n",
              "          [150],\n",
              "          ...,\n",
              "          [113],\n",
              "          [124],\n",
              "          [117]],\n",
              "  \n",
              "         [[154],\n",
              "          [148],\n",
              "          [150],\n",
              "          ...,\n",
              "          [121],\n",
              "          [108],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  7],\n",
              "          [  4],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 39],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  7],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 38],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  0],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 38],\n",
              "          [ 38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [129],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 34],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[142],\n",
              "          [139],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 31],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[127],\n",
              "          [145],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 29],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 42],\n",
              "          [ 39],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [150],\n",
              "          [158],\n",
              "          [154]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 57],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [149],\n",
              "          [159],\n",
              "          [156]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 55],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [152],\n",
              "          [162],\n",
              "          [158]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [137],\n",
              "          [132],\n",
              "          ...,\n",
              "          [128],\n",
              "          [139],\n",
              "          [127]],\n",
              "  \n",
              "         [[157],\n",
              "          [145],\n",
              "          [146],\n",
              "          ...,\n",
              "          [129],\n",
              "          [136],\n",
              "          [125]],\n",
              "  \n",
              "         [[125],\n",
              "          [123],\n",
              "          [124],\n",
              "          ...,\n",
              "          [128],\n",
              "          [135],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 67],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 88],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[253],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 78],\n",
              "          [ 74]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[218],\n",
              "          [208],\n",
              "          [215],\n",
              "          ...,\n",
              "          [131],\n",
              "          [134],\n",
              "          [120]],\n",
              "  \n",
              "         [[215],\n",
              "          [213],\n",
              "          [219],\n",
              "          ...,\n",
              "          [129],\n",
              "          [127],\n",
              "          [129]],\n",
              "  \n",
              "         [[213],\n",
              "          [219],\n",
              "          [228],\n",
              "          ...,\n",
              "          [141],\n",
              "          [134],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  8],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  8]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  8]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  8]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [147],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 11],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[132],\n",
              "          [137],\n",
              "          [144],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 12],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[122],\n",
              "          [138],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          [ 12]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[107],\n",
              "          [ 87],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 51],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 90],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 39],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [108],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 19],\n",
              "          [ 48]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[221],\n",
              "          [228],\n",
              "          [225],\n",
              "          ...,\n",
              "          [199],\n",
              "          [212],\n",
              "          [221]],\n",
              "  \n",
              "         [[223],\n",
              "          [229],\n",
              "          [227],\n",
              "          ...,\n",
              "          [226],\n",
              "          [221],\n",
              "          [218]],\n",
              "  \n",
              "         [[228],\n",
              "          [226],\n",
              "          [225],\n",
              "          ...,\n",
              "          [230],\n",
              "          [232],\n",
              "          [235]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 75],\n",
              "          [ 74],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [103],\n",
              "          [103],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 73],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 98],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 70],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 96],\n",
              "          [100]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 32],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 53],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 36],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 47],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 32],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 38],\n",
              "          [ 26]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 79],\n",
              "          [129],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 73],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [108],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [164],\n",
              "          [139],\n",
              "          [128]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 89],\n",
              "          [174],\n",
              "          ...,\n",
              "          [114],\n",
              "          [101],\n",
              "          [ 96]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 41],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 66],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 20],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 62],\n",
              "          [ 61]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 82],\n",
              "          [ 75],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 66],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 81],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 62],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 76],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 65],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [143],\n",
              "          [161],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 84],\n",
              "          [104]],\n",
              "  \n",
              "         [[145],\n",
              "          [160],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 78],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[117],\n",
              "          [159],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 55],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  8],\n",
              "          [  7],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 44],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  7],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 46],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [  7],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 51],\n",
              "          [ 48]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[114],\n",
              "          [116],\n",
              "          [123],\n",
              "          ...,\n",
              "          [140],\n",
              "          [135],\n",
              "          [134]],\n",
              "  \n",
              "         [[107],\n",
              "          [113],\n",
              "          [117],\n",
              "          ...,\n",
              "          [135],\n",
              "          [134],\n",
              "          [131]],\n",
              "  \n",
              "         [[108],\n",
              "          [113],\n",
              "          [120],\n",
              "          ...,\n",
              "          [142],\n",
              "          [131],\n",
              "          [128]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 4],\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 3],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 4],\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 6],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[ 3],\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 6],\n",
              "          [11]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[34],\n",
              "          [34],\n",
              "          [34],\n",
              "          ...,\n",
              "          [36],\n",
              "          [26],\n",
              "          [15]],\n",
              "  \n",
              "         [[29],\n",
              "          [29],\n",
              "          [29],\n",
              "          ...,\n",
              "          [34],\n",
              "          [21],\n",
              "          [12]],\n",
              "  \n",
              "         [[24],\n",
              "          [25],\n",
              "          [26],\n",
              "          ...,\n",
              "          [30],\n",
              "          [19],\n",
              "          [10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 59],\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 54],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 54],\n",
              "          [ 50]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [123],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 88],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[120],\n",
              "          [124],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 89],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[124],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 91],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[174],\n",
              "          [158],\n",
              "          [139],\n",
              "          ...,\n",
              "          [159],\n",
              "          [167],\n",
              "          [158]],\n",
              "  \n",
              "         [[167],\n",
              "          [142],\n",
              "          [133],\n",
              "          ...,\n",
              "          [155],\n",
              "          [171],\n",
              "          [143]],\n",
              "  \n",
              "         [[185],\n",
              "          [159],\n",
              "          [138],\n",
              "          ...,\n",
              "          [141],\n",
              "          [116],\n",
              "          [119]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [149],\n",
              "          [126],\n",
              "          ...,\n",
              "          [142],\n",
              "          [140],\n",
              "          [129]],\n",
              "  \n",
              "         [[154],\n",
              "          [149],\n",
              "          [156],\n",
              "          ...,\n",
              "          [130],\n",
              "          [146],\n",
              "          [111]],\n",
              "  \n",
              "         [[126],\n",
              "          [111],\n",
              "          [155],\n",
              "          ...,\n",
              "          [135],\n",
              "          [138],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [241],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[253],\n",
              "          [252],\n",
              "          [253],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 72],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[247],\n",
              "          [253],\n",
              "          [250],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 75],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[199],\n",
              "          [198],\n",
              "          [198],\n",
              "          ...,\n",
              "          [151],\n",
              "          [147],\n",
              "          [144]],\n",
              "  \n",
              "         [[198],\n",
              "          [198],\n",
              "          [202],\n",
              "          ...,\n",
              "          [157],\n",
              "          [154],\n",
              "          [156]],\n",
              "  \n",
              "         [[198],\n",
              "          [196],\n",
              "          [201],\n",
              "          ...,\n",
              "          [156],\n",
              "          [159],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[148],\n",
              "          [137],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 91],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[134],\n",
              "          [143],\n",
              "          [138],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 90],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[131],\n",
              "          [143],\n",
              "          [138],\n",
              "          ...,\n",
              "          [153],\n",
              "          [ 94],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 65],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  4],\n",
              "          [  8]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 77],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  9]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [100],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  8],\n",
              "          [  8]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[116],\n",
              "          [108],\n",
              "          [126],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 98],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[121],\n",
              "          [120],\n",
              "          [111],\n",
              "          ...,\n",
              "          [106],\n",
              "          [109],\n",
              "          [104]],\n",
              "  \n",
              "         [[123],\n",
              "          [119],\n",
              "          [104],\n",
              "          ...,\n",
              "          [107],\n",
              "          [105],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [128],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 85],\n",
              "          [112]],\n",
              "  \n",
              "         [[126],\n",
              "          [130],\n",
              "          [128],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 99],\n",
              "          [122]],\n",
              "  \n",
              "         [[133],\n",
              "          [132],\n",
              "          [120],\n",
              "          ...,\n",
              "          [107],\n",
              "          [108],\n",
              "          [126]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[176],\n",
              "          [177],\n",
              "          [177],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 75],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[180],\n",
              "          [181],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 88],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[184],\n",
              "          [185],\n",
              "          [183],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [114],\n",
              "          [ 97]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [127],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 76],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[127],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 91],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[123],\n",
              "          [125],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 91],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 63],\n",
              "          [ 77],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 83],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 66],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 97],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 48],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [120],\n",
              "          [ 83]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [118],\n",
              "          [120],\n",
              "          ...,\n",
              "          [159],\n",
              "          [162],\n",
              "          [160]],\n",
              "  \n",
              "         [[113],\n",
              "          [115],\n",
              "          [131],\n",
              "          ...,\n",
              "          [147],\n",
              "          [148],\n",
              "          [149]],\n",
              "  \n",
              "         [[111],\n",
              "          [121],\n",
              "          [116],\n",
              "          ...,\n",
              "          [158],\n",
              "          [147],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  2],\n",
              "          [ 20],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 83],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  7],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [123],\n",
              "          [ 87],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  2],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 44],\n",
              "          [ 26]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [102],\n",
              "          [102],\n",
              "          ...,\n",
              "          [143],\n",
              "          [138],\n",
              "          [134]],\n",
              "  \n",
              "         [[111],\n",
              "          [120],\n",
              "          [117],\n",
              "          ...,\n",
              "          [145],\n",
              "          [137],\n",
              "          [124]],\n",
              "  \n",
              "         [[104],\n",
              "          [108],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 92],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[179],\n",
              "          [182],\n",
              "          [185],\n",
              "          ...,\n",
              "          [201],\n",
              "          [193],\n",
              "          [187]],\n",
              "  \n",
              "         [[175],\n",
              "          [179],\n",
              "          [183],\n",
              "          ...,\n",
              "          [186],\n",
              "          [189],\n",
              "          [195]],\n",
              "  \n",
              "         [[174],\n",
              "          [178],\n",
              "          [179],\n",
              "          ...,\n",
              "          [208],\n",
              "          [214],\n",
              "          [205]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 48],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 27],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 48],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 34],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 55],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 54],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[135],\n",
              "          [132],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 30],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[138],\n",
              "          [132],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 31],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[142],\n",
              "          [133],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 20],\n",
              "          [ 17]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 75],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 88],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 72],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 84],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 72],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 80],\n",
              "          [ 77]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[120],\n",
              "          [134],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 68],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[106],\n",
              "          [120],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 61],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [115],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 20],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[210],\n",
              "          [220],\n",
              "          [230],\n",
              "          ...,\n",
              "          [251],\n",
              "          [235],\n",
              "          [235]],\n",
              "  \n",
              "         [[204],\n",
              "          [215],\n",
              "          [228],\n",
              "          ...,\n",
              "          [250],\n",
              "          [245],\n",
              "          [233]],\n",
              "  \n",
              "         [[198],\n",
              "          [214],\n",
              "          [229],\n",
              "          ...,\n",
              "          [250],\n",
              "          [251],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[139],\n",
              "          [139],\n",
              "          [144],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 26],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[152],\n",
              "          [130],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 22],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[150],\n",
              "          [139],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 21],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[111],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [118],\n",
              "          [106],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 98],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [120],\n",
              "          [ 98],\n",
              "          [103]],\n",
              "  \n",
              "         [[115],\n",
              "          [114],\n",
              "          [113],\n",
              "          ...,\n",
              "          [110],\n",
              "          [100],\n",
              "          [101]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[123],\n",
              "          [122],\n",
              "          [116],\n",
              "          ...,\n",
              "          [123],\n",
              "          [126],\n",
              "          [134]],\n",
              "  \n",
              "         [[130],\n",
              "          [122],\n",
              "          [125],\n",
              "          ...,\n",
              "          [121],\n",
              "          [131],\n",
              "          [136]],\n",
              "  \n",
              "         [[117],\n",
              "          [115],\n",
              "          [119],\n",
              "          ...,\n",
              "          [118],\n",
              "          [132],\n",
              "          [141]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 61],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 47],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 41],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 68],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 10],\n",
              "          [ 39]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 60],\n",
              "          [ 62],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [178],\n",
              "          [177],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 67],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [180],\n",
              "          [181],\n",
              "          [177]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 73],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [187],\n",
              "          [186],\n",
              "          [181]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[179],\n",
              "          [185],\n",
              "          [188],\n",
              "          ...,\n",
              "          [211],\n",
              "          [205],\n",
              "          [201]],\n",
              "  \n",
              "         [[177],\n",
              "          [183],\n",
              "          [188],\n",
              "          ...,\n",
              "          [239],\n",
              "          [202],\n",
              "          [196]],\n",
              "  \n",
              "         [[172],\n",
              "          [177],\n",
              "          [182],\n",
              "          ...,\n",
              "          [246],\n",
              "          [233],\n",
              "          [215]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[139],\n",
              "          [139],\n",
              "          [139],\n",
              "          ...,\n",
              "          [212],\n",
              "          [212],\n",
              "          [210]],\n",
              "  \n",
              "         [[144],\n",
              "          [146],\n",
              "          [147],\n",
              "          ...,\n",
              "          [212],\n",
              "          [211],\n",
              "          [209]],\n",
              "  \n",
              "         [[148],\n",
              "          [148],\n",
              "          [151],\n",
              "          ...,\n",
              "          [212],\n",
              "          [211],\n",
              "          [210]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[215],\n",
              "          [214],\n",
              "          [214],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 89],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[215],\n",
              "          [212],\n",
              "          [212],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 90],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[213],\n",
              "          [213],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 88],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[102],\n",
              "          [102],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 92],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[147],\n",
              "          [147],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 92],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[151],\n",
              "          [151],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 91],\n",
              "          [ 90]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 34],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 83],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 35],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 91],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 35],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 92],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 42],\n",
              "          [ 41],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [210],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [197],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 39],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [109],\n",
              "          [173],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [137],\n",
              "          [130],\n",
              "          ...,\n",
              "          [156],\n",
              "          [131],\n",
              "          [147]],\n",
              "  \n",
              "         [[138],\n",
              "          [152],\n",
              "          [132],\n",
              "          ...,\n",
              "          [152],\n",
              "          [146],\n",
              "          [165]],\n",
              "  \n",
              "         [[136],\n",
              "          [143],\n",
              "          [145],\n",
              "          ...,\n",
              "          [150],\n",
              "          [158],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 11],\n",
              "          [ 14],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [114],\n",
              "          [107],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [124],\n",
              "          [120],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 11],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [130],\n",
              "          [124],\n",
              "          [122]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 42],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 64],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 38],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 58],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 46],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 56],\n",
              "          [ 57]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [122],\n",
              "          [124],\n",
              "          ...,\n",
              "          [120],\n",
              "          [123],\n",
              "          [117]],\n",
              "  \n",
              "         [[114],\n",
              "          [129],\n",
              "          [121],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [113]],\n",
              "  \n",
              "         [[120],\n",
              "          [128],\n",
              "          [128],\n",
              "          ...,\n",
              "          [121],\n",
              "          [121],\n",
              "          [129]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [118],\n",
              "          [126],\n",
              "          ...,\n",
              "          [120],\n",
              "          [119],\n",
              "          [110]],\n",
              "  \n",
              "         [[141],\n",
              "          [112],\n",
              "          [142],\n",
              "          ...,\n",
              "          [126],\n",
              "          [134],\n",
              "          [111]],\n",
              "  \n",
              "         [[164],\n",
              "          [102],\n",
              "          [126],\n",
              "          ...,\n",
              "          [131],\n",
              "          [134],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 22],\n",
              "          [ 34],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 12],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [105],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 15],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[145],\n",
              "          [148],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 16],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 48],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 39],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 28],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 38],\n",
              "          [  9]],\n",
              "  \n",
              "         [[  3],\n",
              "          [ 10],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 38],\n",
              "          [  7]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[204],\n",
              "          [203],\n",
              "          [201],\n",
              "          ...,\n",
              "          [115],\n",
              "          [143],\n",
              "          [118]],\n",
              "  \n",
              "         [[204],\n",
              "          [205],\n",
              "          [202],\n",
              "          ...,\n",
              "          [154],\n",
              "          [154],\n",
              "          [127]],\n",
              "  \n",
              "         [[203],\n",
              "          [203],\n",
              "          [202],\n",
              "          ...,\n",
              "          [128],\n",
              "          [129],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[195],\n",
              "          [195],\n",
              "          [196],\n",
              "          ...,\n",
              "          [121],\n",
              "          [114],\n",
              "          [129]],\n",
              "  \n",
              "         [[198],\n",
              "          [198],\n",
              "          [194],\n",
              "          ...,\n",
              "          [118],\n",
              "          [109],\n",
              "          [118]],\n",
              "  \n",
              "         [[198],\n",
              "          [197],\n",
              "          [197],\n",
              "          ...,\n",
              "          [116],\n",
              "          [120],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 4],\n",
              "          [ 4],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 5],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[ 4],\n",
              "          [ 4],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 5],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 3],\n",
              "          [ 8],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 8],\n",
              "          [ 6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[37],\n",
              "          [35],\n",
              "          [47],\n",
              "          ...,\n",
              "          [55],\n",
              "          [47],\n",
              "          [20]],\n",
              "  \n",
              "         [[49],\n",
              "          [44],\n",
              "          [38],\n",
              "          ...,\n",
              "          [58],\n",
              "          [42],\n",
              "          [10]],\n",
              "  \n",
              "         [[45],\n",
              "          [51],\n",
              "          [49],\n",
              "          ...,\n",
              "          [55],\n",
              "          [38],\n",
              "          [ 7]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[199],\n",
              "          [201],\n",
              "          [200],\n",
              "          ...,\n",
              "          [235],\n",
              "          [229],\n",
              "          [221]],\n",
              "  \n",
              "         [[204],\n",
              "          [199],\n",
              "          [201],\n",
              "          ...,\n",
              "          [233],\n",
              "          [232],\n",
              "          [227]],\n",
              "  \n",
              "         [[198],\n",
              "          [202],\n",
              "          [202],\n",
              "          ...,\n",
              "          [222],\n",
              "          [234],\n",
              "          [232]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 65],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 91],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 58],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 94],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 59],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 86],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 58],\n",
              "          [116],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [102],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 89],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 89],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 82],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 70],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[107],\n",
              "          [ 48],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [154],\n",
              "          [139],\n",
              "          [103]],\n",
              "  \n",
              "         [[212],\n",
              "          [148],\n",
              "          [156],\n",
              "          ...,\n",
              "          [133],\n",
              "          [136],\n",
              "          [153]],\n",
              "  \n",
              "         [[120],\n",
              "          [ 67],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [121],\n",
              "          [103],\n",
              "          [ 93]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 49],\n",
              "          [ 41],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 22],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 46],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 20],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 37],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 19],\n",
              "          [ 29]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [101],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 69],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 98],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 81],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [103],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 80],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 34],\n",
              "          [ 60],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [130],\n",
              "          [129],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 60],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [130],\n",
              "          [107],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 52],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [131],\n",
              "          [117],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 93],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [  9],\n",
              "          [  8]],\n",
              "  \n",
              "         [[107],\n",
              "          [122],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [  8],\n",
              "          [  7]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 86],\n",
              "          [104],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  7],\n",
              "          [  8]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[208],\n",
              "          [208],\n",
              "          [206],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 35],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[205],\n",
              "          [207],\n",
              "          [204],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 36],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[202],\n",
              "          [204],\n",
              "          [204],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 42],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [126],\n",
              "          [106],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 37],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [112],\n",
              "          [142],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 42],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [138],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[235],\n",
              "          [224],\n",
              "          [191],\n",
              "          ...,\n",
              "          [109],\n",
              "          [106],\n",
              "          [109]],\n",
              "  \n",
              "         [[230],\n",
              "          [219],\n",
              "          [182],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [111]],\n",
              "  \n",
              "         [[235],\n",
              "          [201],\n",
              "          [214],\n",
              "          ...,\n",
              "          [111],\n",
              "          [111],\n",
              "          [109]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[208],\n",
              "          [190],\n",
              "          [178],\n",
              "          ...,\n",
              "          [128],\n",
              "          [124],\n",
              "          [123]],\n",
              "  \n",
              "         [[183],\n",
              "          [211],\n",
              "          [195],\n",
              "          ...,\n",
              "          [128],\n",
              "          [128],\n",
              "          [124]],\n",
              "  \n",
              "         [[138],\n",
              "          [115],\n",
              "          [171],\n",
              "          ...,\n",
              "          [130],\n",
              "          [126],\n",
              "          [123]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 49],\n",
              "          [ 57],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [192],\n",
              "          [113],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 43],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [187],\n",
              "          [ 55],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 41],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [185],\n",
              "          [ 58],\n",
              "          [ 36]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 14],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 60],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [  9],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 63],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[  8],\n",
              "          [ 10],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 45],\n",
              "          [ 53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 92],\n",
              "          [103],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 42],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 86],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 39],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 55],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 28],\n",
              "          [ 22]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [107],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [107],\n",
              "          [108],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[103],\n",
              "          [102],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [112],\n",
              "          [106],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 90],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[178],\n",
              "          [180],\n",
              "          [180],\n",
              "          ...,\n",
              "          [186],\n",
              "          [186],\n",
              "          [186]],\n",
              "  \n",
              "         [[179],\n",
              "          [184],\n",
              "          [184],\n",
              "          ...,\n",
              "          [188],\n",
              "          [188],\n",
              "          [186]],\n",
              "  \n",
              "         [[180],\n",
              "          [184],\n",
              "          [184],\n",
              "          ...,\n",
              "          [188],\n",
              "          [188],\n",
              "          [187]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 95],\n",
              "          [103],\n",
              "          ...,\n",
              "          [203],\n",
              "          [202],\n",
              "          [199]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [105],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [203],\n",
              "          [203],\n",
              "          [204]],\n",
              "  \n",
              "         [[106],\n",
              "          [100],\n",
              "          [111],\n",
              "          ...,\n",
              "          [202],\n",
              "          [201],\n",
              "          [204]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 54],\n",
              "          [ 80],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [100],\n",
              "          [104],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 56],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 92],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 54],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [100],\n",
              "          [ 92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [138],\n",
              "          [148],\n",
              "          ...,\n",
              "          [146],\n",
              "          [147],\n",
              "          [148]],\n",
              "  \n",
              "         [[131],\n",
              "          [152],\n",
              "          [165],\n",
              "          ...,\n",
              "          [147],\n",
              "          [148],\n",
              "          [146]],\n",
              "  \n",
              "         [[153],\n",
              "          [175],\n",
              "          [178],\n",
              "          ...,\n",
              "          [150],\n",
              "          [150],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 62],\n",
              "          [ 61],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 62],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[124],\n",
              "          [ 75],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 95],\n",
              "          [101]],\n",
              "  \n",
              "         [[123],\n",
              "          [107],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 51],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[193],\n",
              "          [199],\n",
              "          [198],\n",
              "          ...,\n",
              "          [183],\n",
              "          [177],\n",
              "          [184]],\n",
              "  \n",
              "         [[198],\n",
              "          [196],\n",
              "          [197],\n",
              "          ...,\n",
              "          [181],\n",
              "          [178],\n",
              "          [184]],\n",
              "  \n",
              "         [[196],\n",
              "          [193],\n",
              "          [197],\n",
              "          ...,\n",
              "          [186],\n",
              "          [180],\n",
              "          [183]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[185],\n",
              "          [177],\n",
              "          [202],\n",
              "          ...,\n",
              "          [103],\n",
              "          [101],\n",
              "          [101]],\n",
              "  \n",
              "         [[243],\n",
              "          [208],\n",
              "          [248],\n",
              "          ...,\n",
              "          [103],\n",
              "          [100],\n",
              "          [100]],\n",
              "  \n",
              "         [[254],\n",
              "          [242],\n",
              "          [185],\n",
              "          ...,\n",
              "          [105],\n",
              "          [104],\n",
              "          [101]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [149],\n",
              "          [141],\n",
              "          ...,\n",
              "          [111],\n",
              "          [105],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 92],\n",
              "          [120],\n",
              "          ...,\n",
              "          [113],\n",
              "          [ 96],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 81],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [119],\n",
              "          [112],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 23],\n",
              "          [ 20],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [221],\n",
              "          [210],\n",
              "          [183]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 16],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [221],\n",
              "          [220],\n",
              "          [195]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 23],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [222],\n",
              "          [220],\n",
              "          [201]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [141],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [103],\n",
              "          [133],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 90],\n",
              "          [140],\n",
              "          ...,\n",
              "          [129],\n",
              "          [186],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 58],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [113],\n",
              "          [138],\n",
              "          [140]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 32],\n",
              "          [ 46],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 19],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 75],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [204],\n",
              "          [169],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 49],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [183],\n",
              "          [222],\n",
              "          [205]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [157],\n",
              "          [163],\n",
              "          ...,\n",
              "          [145],\n",
              "          [145],\n",
              "          [135]],\n",
              "  \n",
              "         [[151],\n",
              "          [157],\n",
              "          [160],\n",
              "          ...,\n",
              "          [137],\n",
              "          [141],\n",
              "          [138]],\n",
              "  \n",
              "         [[156],\n",
              "          [156],\n",
              "          [157],\n",
              "          ...,\n",
              "          [140],\n",
              "          [143],\n",
              "          [144]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[149],\n",
              "          [132],\n",
              "          [127],\n",
              "          ...,\n",
              "          [160],\n",
              "          [159],\n",
              "          [151]],\n",
              "  \n",
              "         [[143],\n",
              "          [135],\n",
              "          [117],\n",
              "          ...,\n",
              "          [165],\n",
              "          [161],\n",
              "          [160]],\n",
              "  \n",
              "         [[121],\n",
              "          [ 98],\n",
              "          [186],\n",
              "          ...,\n",
              "          [167],\n",
              "          [163],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[235],\n",
              "          [240],\n",
              "          [243],\n",
              "          ...,\n",
              "          [141],\n",
              "          [138],\n",
              "          [140]],\n",
              "  \n",
              "         [[225],\n",
              "          [235],\n",
              "          [240],\n",
              "          ...,\n",
              "          [141],\n",
              "          [137],\n",
              "          [137]],\n",
              "  \n",
              "         [[212],\n",
              "          [222],\n",
              "          [235],\n",
              "          ...,\n",
              "          [137],\n",
              "          [134],\n",
              "          [136]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[51],\n",
              "          [51],\n",
              "          [51],\n",
              "          ...,\n",
              "          [68],\n",
              "          [63],\n",
              "          [67]],\n",
              "  \n",
              "         [[50],\n",
              "          [50],\n",
              "          [53],\n",
              "          ...,\n",
              "          [66],\n",
              "          [67],\n",
              "          [68]],\n",
              "  \n",
              "         [[50],\n",
              "          [50],\n",
              "          [53],\n",
              "          ...,\n",
              "          [70],\n",
              "          [68],\n",
              "          [68]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[52],\n",
              "          [54],\n",
              "          [61],\n",
              "          ...,\n",
              "          [60],\n",
              "          [62],\n",
              "          [65]],\n",
              "  \n",
              "         [[67],\n",
              "          [60],\n",
              "          [60],\n",
              "          ...,\n",
              "          [59],\n",
              "          [65],\n",
              "          [63]],\n",
              "  \n",
              "         [[57],\n",
              "          [57],\n",
              "          [58],\n",
              "          ...,\n",
              "          [56],\n",
              "          [56],\n",
              "          [53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[131],\n",
              "          [132],\n",
              "          [134],\n",
              "          ...,\n",
              "          [124],\n",
              "          [124],\n",
              "          [125]],\n",
              "  \n",
              "         [[148],\n",
              "          [166],\n",
              "          [169],\n",
              "          ...,\n",
              "          [121],\n",
              "          [121],\n",
              "          [120]],\n",
              "  \n",
              "         [[170],\n",
              "          [172],\n",
              "          [172],\n",
              "          ...,\n",
              "          [123],\n",
              "          [123],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[155],\n",
              "          [156],\n",
              "          [183],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 69],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 52],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 73],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 39],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[157],\n",
              "          [158],\n",
              "          [160],\n",
              "          ...,\n",
              "          [161],\n",
              "          [160],\n",
              "          [159]],\n",
              "  \n",
              "         [[159],\n",
              "          [158],\n",
              "          [159],\n",
              "          ...,\n",
              "          [162],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         [[157],\n",
              "          [159],\n",
              "          [161],\n",
              "          ...,\n",
              "          [163],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  1],\n",
              "          [  2],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 87],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  4],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 82],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  8],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 64],\n",
              "          [ 67]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[188],\n",
              "          [191],\n",
              "          [193],\n",
              "          ...,\n",
              "          [126],\n",
              "          [129],\n",
              "          [145]],\n",
              "  \n",
              "         [[188],\n",
              "          [191],\n",
              "          [190],\n",
              "          ...,\n",
              "          [224],\n",
              "          [251],\n",
              "          [253]],\n",
              "  \n",
              "         [[185],\n",
              "          [188],\n",
              "          [191],\n",
              "          ...,\n",
              "          [201],\n",
              "          [193],\n",
              "          [212]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 15],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 90],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 13],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 88],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[  8],\n",
              "          [ 13],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 89],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 34],\n",
              "          [ 36],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [139],\n",
              "          [226],\n",
              "          [243]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 32],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [150],\n",
              "          [239],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [197],\n",
              "          [224],\n",
              "          [ 52]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 29],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 31],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 41],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 51],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 52],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [124],\n",
              "          [118],\n",
              "          [ 80]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[149],\n",
              "          [ 79],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [203],\n",
              "          [203],\n",
              "          [204]],\n",
              "  \n",
              "         [[106],\n",
              "          [101],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [202],\n",
              "          [203],\n",
              "          [202]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 59],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [202],\n",
              "          [201],\n",
              "          [202]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[221],\n",
              "          [224],\n",
              "          [220],\n",
              "          ...,\n",
              "          [224],\n",
              "          [228],\n",
              "          [230]],\n",
              "  \n",
              "         [[219],\n",
              "          [223],\n",
              "          [226],\n",
              "          ...,\n",
              "          [224],\n",
              "          [225],\n",
              "          [227]],\n",
              "  \n",
              "         [[220],\n",
              "          [220],\n",
              "          [221],\n",
              "          ...,\n",
              "          [222],\n",
              "          [227],\n",
              "          [227]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 85],\n",
              "          [ 64],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 75],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 66],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 88],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 67],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 82],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[151],\n",
              "          [ 85],\n",
              "          [138],\n",
              "          ...,\n",
              "          [144],\n",
              "          [209],\n",
              "          [130]],\n",
              "  \n",
              "         [[154],\n",
              "          [124],\n",
              "          [123],\n",
              "          ...,\n",
              "          [118],\n",
              "          [163],\n",
              "          [132]],\n",
              "  \n",
              "         [[124],\n",
              "          [155],\n",
              "          [162],\n",
              "          ...,\n",
              "          [120],\n",
              "          [172],\n",
              "          [133]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 97],\n",
              "          [ 82],\n",
              "          [105],\n",
              "          ...,\n",
              "          [107],\n",
              "          [110],\n",
              "          [110]],\n",
              "  \n",
              "         [[186],\n",
              "          [185],\n",
              "          [179],\n",
              "          ...,\n",
              "          [106],\n",
              "          [114],\n",
              "          [109]],\n",
              "  \n",
              "         [[164],\n",
              "          [179],\n",
              "          [184],\n",
              "          ...,\n",
              "          [107],\n",
              "          [113],\n",
              "          [108]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[157],\n",
              "          [180],\n",
              "          [157],\n",
              "          ...,\n",
              "          [243],\n",
              "          [241],\n",
              "          [234]],\n",
              "  \n",
              "         [[140],\n",
              "          [152],\n",
              "          [158],\n",
              "          ...,\n",
              "          [239],\n",
              "          [241],\n",
              "          [228]],\n",
              "  \n",
              "         [[164],\n",
              "          [170],\n",
              "          [204],\n",
              "          ...,\n",
              "          [232],\n",
              "          [236],\n",
              "          [229]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 21],\n",
              "          [ 20],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 62],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 25],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 67],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 28],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [ 98],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 90],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[101],\n",
              "          [100],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 81],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 97],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 87],\n",
              "          [ 80]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 23],\n",
              "          [ 20],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 99],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [104],\n",
              "          [102],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [102],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 57],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [150],\n",
              "          [153],\n",
              "          [150]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 56],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [156],\n",
              "          [152],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 54],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [159],\n",
              "          [160],\n",
              "          [160]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 41],\n",
              "          [ 47],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 70],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 53],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 60],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 61],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 46],\n",
              "          [ 33]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [125],\n",
              "          [122],\n",
              "          [121]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [105]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 84],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[254],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [118],\n",
              "          [123],\n",
              "          [127]],\n",
              "  \n",
              "         [[254],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 98],\n",
              "          [111]],\n",
              "  \n",
              "         [[254],\n",
              "          [252],\n",
              "          [251],\n",
              "          ...,\n",
              "          [119],\n",
              "          [ 98],\n",
              "          [110]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[251],\n",
              "          [160],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [251],\n",
              "          [252],\n",
              "          [249]],\n",
              "  \n",
              "         [[250],\n",
              "          [165],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [254],\n",
              "          [253],\n",
              "          [240]],\n",
              "  \n",
              "         [[249],\n",
              "          [186],\n",
              "          [129],\n",
              "          ...,\n",
              "          [241],\n",
              "          [239],\n",
              "          [246]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[138],\n",
              "          [144],\n",
              "          [144],\n",
              "          ...,\n",
              "          [186],\n",
              "          [186],\n",
              "          [183]],\n",
              "  \n",
              "         [[139],\n",
              "          [146],\n",
              "          [146],\n",
              "          ...,\n",
              "          [190],\n",
              "          [189],\n",
              "          [186]],\n",
              "  \n",
              "         [[143],\n",
              "          [150],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [192],\n",
              "          [191],\n",
              "          [189]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 38],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 58],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 50],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 24],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 52],\n",
              "          [ 47]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[156],\n",
              "          [155],\n",
              "          [158],\n",
              "          ...,\n",
              "          [194],\n",
              "          [193],\n",
              "          [193]],\n",
              "  \n",
              "         [[154],\n",
              "          [157],\n",
              "          [159],\n",
              "          ...,\n",
              "          [193],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         [[151],\n",
              "          [159],\n",
              "          [160],\n",
              "          ...,\n",
              "          [191],\n",
              "          [190],\n",
              "          [190]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[236],\n",
              "          [237],\n",
              "          [240],\n",
              "          ...,\n",
              "          [250],\n",
              "          [250],\n",
              "          [250]],\n",
              "  \n",
              "         [[236],\n",
              "          [237],\n",
              "          [240],\n",
              "          ...,\n",
              "          [250],\n",
              "          [250],\n",
              "          [250]],\n",
              "  \n",
              "         [[237],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [250],\n",
              "          [250],\n",
              "          [250]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[123],\n",
              "          [109],\n",
              "          [121],\n",
              "          ...,\n",
              "          [137],\n",
              "          [119],\n",
              "          [119]],\n",
              "  \n",
              "         [[112],\n",
              "          [112],\n",
              "          [137],\n",
              "          ...,\n",
              "          [126],\n",
              "          [114],\n",
              "          [113]],\n",
              "  \n",
              "         [[136],\n",
              "          [148],\n",
              "          [153],\n",
              "          ...,\n",
              "          [128],\n",
              "          [118],\n",
              "          [122]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [143],\n",
              "          [145],\n",
              "          ...,\n",
              "          [203],\n",
              "          [199],\n",
              "          [204]],\n",
              "  \n",
              "         [[139],\n",
              "          [141],\n",
              "          [145],\n",
              "          ...,\n",
              "          [202],\n",
              "          [202],\n",
              "          [198]],\n",
              "  \n",
              "         [[134],\n",
              "          [141],\n",
              "          [145],\n",
              "          ...,\n",
              "          [208],\n",
              "          [206],\n",
              "          [202]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[192],\n",
              "          [184],\n",
              "          [181],\n",
              "          ...,\n",
              "          [165],\n",
              "          [175],\n",
              "          [164]],\n",
              "  \n",
              "         [[184],\n",
              "          [191],\n",
              "          [196],\n",
              "          ...,\n",
              "          [168],\n",
              "          [ 98],\n",
              "          [136]],\n",
              "  \n",
              "         [[179],\n",
              "          [192],\n",
              "          [189],\n",
              "          ...,\n",
              "          [110],\n",
              "          [102],\n",
              "          [114]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [178],\n",
              "          [201],\n",
              "          ...,\n",
              "          [214],\n",
              "          [217],\n",
              "          [222]],\n",
              "  \n",
              "         [[185],\n",
              "          [182],\n",
              "          [155],\n",
              "          ...,\n",
              "          [205],\n",
              "          [212],\n",
              "          [214]],\n",
              "  \n",
              "         [[211],\n",
              "          [189],\n",
              "          [219],\n",
              "          ...,\n",
              "          [208],\n",
              "          [220],\n",
              "          [200]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 76],\n",
              "          [ 69],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 59],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 71],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 78],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 69],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 76],\n",
              "          [115]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[170],\n",
              "          [184],\n",
              "          [168],\n",
              "          ...,\n",
              "          [168],\n",
              "          [165],\n",
              "          [162]],\n",
              "  \n",
              "         [[179],\n",
              "          [176],\n",
              "          [169],\n",
              "          ...,\n",
              "          [161],\n",
              "          [161],\n",
              "          [163]],\n",
              "  \n",
              "         [[189],\n",
              "          [184],\n",
              "          [167],\n",
              "          ...,\n",
              "          [172],\n",
              "          [168],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[103],\n",
              "          [111],\n",
              "          [109],\n",
              "          ...,\n",
              "          [191],\n",
              "          [227],\n",
              "          [239]],\n",
              "  \n",
              "         [[117],\n",
              "          [114],\n",
              "          [117],\n",
              "          ...,\n",
              "          [182],\n",
              "          [218],\n",
              "          [199]],\n",
              "  \n",
              "         [[111],\n",
              "          [113],\n",
              "          [117],\n",
              "          ...,\n",
              "          [103],\n",
              "          [160],\n",
              "          [177]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 82],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [121],\n",
              "          [125],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 93],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [116],\n",
              "          [121],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 91],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[212],\n",
              "          [203],\n",
              "          [186],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 71],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[190],\n",
              "          [195],\n",
              "          [205],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 67],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[202],\n",
              "          [191],\n",
              "          [212],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 66],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[204],\n",
              "          [208],\n",
              "          [208],\n",
              "          ...,\n",
              "          [205],\n",
              "          [131],\n",
              "          [191]],\n",
              "  \n",
              "         [[215],\n",
              "          [215],\n",
              "          [213],\n",
              "          ...,\n",
              "          [173],\n",
              "          [181],\n",
              "          [158]],\n",
              "  \n",
              "         [[193],\n",
              "          [193],\n",
              "          [202],\n",
              "          ...,\n",
              "          [170],\n",
              "          [162],\n",
              "          [160]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 12],\n",
              "          [ 40],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [227],\n",
              "          [233],\n",
              "          [226]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  6],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [237],\n",
              "          [233],\n",
              "          [238]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  1],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [239],\n",
              "          [233],\n",
              "          [236]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[227],\n",
              "          [219],\n",
              "          [227],\n",
              "          ...,\n",
              "          [234],\n",
              "          [234],\n",
              "          [237]],\n",
              "  \n",
              "         [[226],\n",
              "          [218],\n",
              "          [232],\n",
              "          ...,\n",
              "          [238],\n",
              "          [234],\n",
              "          [241]],\n",
              "  \n",
              "         [[228],\n",
              "          [230],\n",
              "          [225],\n",
              "          ...,\n",
              "          [227],\n",
              "          [226],\n",
              "          [227]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 86],\n",
              "          [ 89],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [255],\n",
              "          [250],\n",
              "          [231]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [255],\n",
              "          [250],\n",
              "          [231]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 95],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [255],\n",
              "          [250],\n",
              "          [231]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [237],\n",
              "          [239],\n",
              "          [223]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [234],\n",
              "          [239],\n",
              "          [219]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [231],\n",
              "          [236],\n",
              "          [217]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[108],\n",
              "          [ 64],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 27],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 57],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 25],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 26],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 29],\n",
              "          [ 51]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [ 91],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [248],\n",
              "          [250],\n",
              "          [249]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 77],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [246],\n",
              "          [249],\n",
              "          [249]],\n",
              "  \n",
              "         [[122],\n",
              "          [112],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [248],\n",
              "          [249],\n",
              "          [250]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 47],\n",
              "          [ 67],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 57],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 67],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 60],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 57],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 66],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[158],\n",
              "          [156],\n",
              "          [216],\n",
              "          ...,\n",
              "          [172],\n",
              "          [136],\n",
              "          [136]],\n",
              "  \n",
              "         [[134],\n",
              "          [195],\n",
              "          [169],\n",
              "          ...,\n",
              "          [189],\n",
              "          [137],\n",
              "          [145]],\n",
              "  \n",
              "         [[143],\n",
              "          [167],\n",
              "          [143],\n",
              "          ...,\n",
              "          [167],\n",
              "          [174],\n",
              "          [168]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[120],\n",
              "          [118],\n",
              "          [112],\n",
              "          ...,\n",
              "          [172],\n",
              "          [159],\n",
              "          [150]],\n",
              "  \n",
              "         [[114],\n",
              "          [114],\n",
              "          [113],\n",
              "          ...,\n",
              "          [133],\n",
              "          [123],\n",
              "          [124]],\n",
              "  \n",
              "         [[105],\n",
              "          [ 97],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [143],\n",
              "          [143],\n",
              "          [139]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[155],\n",
              "          [182],\n",
              "          [145],\n",
              "          ...,\n",
              "          [166],\n",
              "          [188],\n",
              "          [175]],\n",
              "  \n",
              "         [[138],\n",
              "          [148],\n",
              "          [195],\n",
              "          ...,\n",
              "          [174],\n",
              "          [151],\n",
              "          [131]],\n",
              "  \n",
              "         [[139],\n",
              "          [123],\n",
              "          [158],\n",
              "          ...,\n",
              "          [145],\n",
              "          [120],\n",
              "          [118]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[147],\n",
              "          [144],\n",
              "          [144],\n",
              "          ...,\n",
              "          [111],\n",
              "          [114],\n",
              "          [107]],\n",
              "  \n",
              "         [[149],\n",
              "          [150],\n",
              "          [150],\n",
              "          ...,\n",
              "          [114],\n",
              "          [118],\n",
              "          [104]],\n",
              "  \n",
              "         [[156],\n",
              "          [156],\n",
              "          [153],\n",
              "          ...,\n",
              "          [115],\n",
              "          [118],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 61],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 27],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 11],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [  9],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[230],\n",
              "          [171],\n",
              "          [165],\n",
              "          ...,\n",
              "          [187],\n",
              "          [189],\n",
              "          [186]],\n",
              "  \n",
              "         [[126],\n",
              "          [172],\n",
              "          [172],\n",
              "          ...,\n",
              "          [184],\n",
              "          [184],\n",
              "          [185]],\n",
              "  \n",
              "         [[128],\n",
              "          [169],\n",
              "          [168],\n",
              "          ...,\n",
              "          [168],\n",
              "          [166],\n",
              "          [183]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[244],\n",
              "          [245],\n",
              "          [246],\n",
              "          ...,\n",
              "          [231],\n",
              "          [228],\n",
              "          [241]],\n",
              "  \n",
              "         [[244],\n",
              "          [244],\n",
              "          [244],\n",
              "          ...,\n",
              "          [229],\n",
              "          [235],\n",
              "          [240]],\n",
              "  \n",
              "         [[243],\n",
              "          [242],\n",
              "          [241],\n",
              "          ...,\n",
              "          [228],\n",
              "          [239],\n",
              "          [240]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  0],\n",
              "          [  0],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [244],\n",
              "          [245],\n",
              "          [247]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [130],\n",
              "          [138],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[235],\n",
              "          [212],\n",
              "          [150],\n",
              "          ...,\n",
              "          [251],\n",
              "          [250],\n",
              "          [250]],\n",
              "  \n",
              "         [[177],\n",
              "          [115],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [250],\n",
              "          [213],\n",
              "          [241]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 59],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [196],\n",
              "          [233],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 26],\n",
              "          [ 27],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [173],\n",
              "          [177],\n",
              "          [177]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 25],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [165],\n",
              "          [175],\n",
              "          [164]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 22],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [175],\n",
              "          [178],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[240],\n",
              "          [233],\n",
              "          [240],\n",
              "          ...,\n",
              "          [154],\n",
              "          [ 70],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[234],\n",
              "          [223],\n",
              "          [233],\n",
              "          ...,\n",
              "          [127],\n",
              "          [ 75],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[233],\n",
              "          [238],\n",
              "          [236],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 85],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 79],\n",
              "          [ 76],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 70],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 82],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 70],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 86],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 80],\n",
              "          [ 77]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [125],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [232],\n",
              "          [227],\n",
              "          [210]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 73],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [219],\n",
              "          [221],\n",
              "          [220]],\n",
              "  \n",
              "         [[119],\n",
              "          [ 92],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [231],\n",
              "          [220],\n",
              "          [213]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[125],\n",
              "          [142],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [116],\n",
              "          [229],\n",
              "          [209]],\n",
              "  \n",
              "         [[118],\n",
              "          [109],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [112],\n",
              "          [ 74],\n",
              "          [134]],\n",
              "  \n",
              "         [[117],\n",
              "          [124],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [142],\n",
              "          [ 52]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 79],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [100],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 93],\n",
              "          [115],\n",
              "          ...,\n",
              "          [114],\n",
              "          [125],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 95],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [121],\n",
              "          [114]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[205],\n",
              "          [191],\n",
              "          [171],\n",
              "          ...,\n",
              "          [165],\n",
              "          [178],\n",
              "          [198]],\n",
              "  \n",
              "         [[196],\n",
              "          [188],\n",
              "          [170],\n",
              "          ...,\n",
              "          [178],\n",
              "          [170],\n",
              "          [174]],\n",
              "  \n",
              "         [[197],\n",
              "          [199],\n",
              "          [161],\n",
              "          ...,\n",
              "          [153],\n",
              "          [179],\n",
              "          [186]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[151],\n",
              "          [144],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 56],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[173],\n",
              "          [154],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 57],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[133],\n",
              "          [147],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [101],\n",
              "          [121]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[67],\n",
              "          [74],\n",
              "          [37],\n",
              "          ...,\n",
              "          [20],\n",
              "          [18],\n",
              "          [19]],\n",
              "  \n",
              "         [[68],\n",
              "          [75],\n",
              "          [40],\n",
              "          ...,\n",
              "          [22],\n",
              "          [22],\n",
              "          [15]],\n",
              "  \n",
              "         [[71],\n",
              "          [77],\n",
              "          [47],\n",
              "          ...,\n",
              "          [19],\n",
              "          [20],\n",
              "          [18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[91],\n",
              "          [58],\n",
              "          [62],\n",
              "          ...,\n",
              "          [83],\n",
              "          [58],\n",
              "          [39]],\n",
              "  \n",
              "         [[54],\n",
              "          [58],\n",
              "          [57],\n",
              "          ...,\n",
              "          [80],\n",
              "          [58],\n",
              "          [44]],\n",
              "  \n",
              "         [[54],\n",
              "          [51],\n",
              "          [41],\n",
              "          ...,\n",
              "          [62],\n",
              "          [28],\n",
              "          [40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 18],\n",
              "          [ 23],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [121],\n",
              "          [121],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 28],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [123],\n",
              "          [119],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 20],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [123],\n",
              "          [118],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[185],\n",
              "          [191],\n",
              "          [214],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [ 12],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[193],\n",
              "          [192],\n",
              "          [198],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [ 10],\n",
              "          [  8]],\n",
              "  \n",
              "         [[189],\n",
              "          [196],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [  7],\n",
              "          [  9]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[243],\n",
              "          [242],\n",
              "          [242],\n",
              "          ...,\n",
              "          [205],\n",
              "          [209],\n",
              "          [209]],\n",
              "  \n",
              "         [[229],\n",
              "          [230],\n",
              "          [229],\n",
              "          ...,\n",
              "          [195],\n",
              "          [194],\n",
              "          [199]],\n",
              "  \n",
              "         [[223],\n",
              "          [223],\n",
              "          [222],\n",
              "          ...,\n",
              "          [181],\n",
              "          [182],\n",
              "          [185]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[224],\n",
              "          [226],\n",
              "          [225],\n",
              "          ...,\n",
              "          [133],\n",
              "          [132],\n",
              "          [132]],\n",
              "  \n",
              "         [[224],\n",
              "          [226],\n",
              "          [225],\n",
              "          ...,\n",
              "          [133],\n",
              "          [135],\n",
              "          [134]],\n",
              "  \n",
              "         [[216],\n",
              "          [223],\n",
              "          [224],\n",
              "          ...,\n",
              "          [136],\n",
              "          [135],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 16],\n",
              "          [ 16],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [163],\n",
              "          [163],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 19],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [178],\n",
              "          [178],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 14],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [185],\n",
              "          [183],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[239],\n",
              "          [235],\n",
              "          [232],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 85],\n",
              "          [108]],\n",
              "  \n",
              "         [[229],\n",
              "          [235],\n",
              "          [239],\n",
              "          ...,\n",
              "          [127],\n",
              "          [130],\n",
              "          [115]],\n",
              "  \n",
              "         [[231],\n",
              "          [234],\n",
              "          [238],\n",
              "          ...,\n",
              "          [129],\n",
              "          [128],\n",
              "          [131]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[140],\n",
              "          [137],\n",
              "          [109],\n",
              "          ...,\n",
              "          [200],\n",
              "          [215],\n",
              "          [232]],\n",
              "  \n",
              "         [[144],\n",
              "          [131],\n",
              "          [210],\n",
              "          ...,\n",
              "          [189],\n",
              "          [203],\n",
              "          [237]],\n",
              "  \n",
              "         [[147],\n",
              "          [136],\n",
              "          [170],\n",
              "          ...,\n",
              "          [192],\n",
              "          [207],\n",
              "          [227]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[223],\n",
              "          [178],\n",
              "          [181],\n",
              "          ...,\n",
              "          [205],\n",
              "          [167],\n",
              "          [174]],\n",
              "  \n",
              "         [[213],\n",
              "          [196],\n",
              "          [198],\n",
              "          ...,\n",
              "          [180],\n",
              "          [173],\n",
              "          [186]],\n",
              "  \n",
              "         [[196],\n",
              "          [194],\n",
              "          [216],\n",
              "          ...,\n",
              "          [170],\n",
              "          [181],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 23],\n",
              "          [ 15],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 58],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 14],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 45],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 10],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 78],\n",
              "          [ 78]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[141],\n",
              "          [139],\n",
              "          [143],\n",
              "          ...,\n",
              "          [156],\n",
              "          [167],\n",
              "          [174]],\n",
              "  \n",
              "         [[139],\n",
              "          [142],\n",
              "          [143],\n",
              "          ...,\n",
              "          [162],\n",
              "          [173],\n",
              "          [169]],\n",
              "  \n",
              "         [[140],\n",
              "          [141],\n",
              "          [146],\n",
              "          ...,\n",
              "          [168],\n",
              "          [172],\n",
              "          [165]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[185],\n",
              "          [ 27],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 95],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 10],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 93],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [101],\n",
              "          [ 95]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [213],\n",
              "          [157],\n",
              "          ...,\n",
              "          [142],\n",
              "          [159],\n",
              "          [188]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [227],\n",
              "          [211],\n",
              "          ...,\n",
              "          [144],\n",
              "          [172],\n",
              "          [199]],\n",
              "  \n",
              "         [[137],\n",
              "          [137],\n",
              "          [112],\n",
              "          ...,\n",
              "          [152],\n",
              "          [172],\n",
              "          [204]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[207],\n",
              "          [207],\n",
              "          [209],\n",
              "          ...,\n",
              "          [158],\n",
              "          [186],\n",
              "          [172]],\n",
              "  \n",
              "         [[213],\n",
              "          [212],\n",
              "          [211],\n",
              "          ...,\n",
              "          [187],\n",
              "          [177],\n",
              "          [172]],\n",
              "  \n",
              "         [[220],\n",
              "          [221],\n",
              "          [220],\n",
              "          ...,\n",
              "          [174],\n",
              "          [164],\n",
              "          [172]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[245],\n",
              "          [242],\n",
              "          [244],\n",
              "          ...,\n",
              "          [231],\n",
              "          [228],\n",
              "          [228]],\n",
              "  \n",
              "         [[245],\n",
              "          [249],\n",
              "          [239],\n",
              "          ...,\n",
              "          [242],\n",
              "          [239],\n",
              "          [248]],\n",
              "  \n",
              "         [[248],\n",
              "          [244],\n",
              "          [243],\n",
              "          ...,\n",
              "          [242],\n",
              "          [234],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  2],\n",
              "          [  2],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  7],\n",
              "          [  2]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  2],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [  7],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  2],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [ 22],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 96],\n",
              "          [103],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 73],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [100],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 81],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[107],\n",
              "          [110],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 77],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[100],\n",
              "          [ 90],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [160],\n",
              "          [181],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 90],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [193],\n",
              "          [207],\n",
              "          [207]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 90],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [200],\n",
              "          [208],\n",
              "          [210]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [121],\n",
              "          [123],\n",
              "          ...,\n",
              "          [150],\n",
              "          [150],\n",
              "          [149]],\n",
              "  \n",
              "         [[122],\n",
              "          [123],\n",
              "          [126],\n",
              "          ...,\n",
              "          [149],\n",
              "          [148],\n",
              "          [153]],\n",
              "  \n",
              "         [[115],\n",
              "          [119],\n",
              "          [119],\n",
              "          ...,\n",
              "          [149],\n",
              "          [153],\n",
              "          [149]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[159],\n",
              "          [159],\n",
              "          [159],\n",
              "          ...,\n",
              "          [148],\n",
              "          [148],\n",
              "          [147]],\n",
              "  \n",
              "         [[161],\n",
              "          [161],\n",
              "          [160],\n",
              "          ...,\n",
              "          [145],\n",
              "          [144],\n",
              "          [144]],\n",
              "  \n",
              "         [[160],\n",
              "          [160],\n",
              "          [161],\n",
              "          ...,\n",
              "          [148],\n",
              "          [143],\n",
              "          [140]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[107],\n",
              "          [116],\n",
              "          [120],\n",
              "          ...,\n",
              "          [122],\n",
              "          [117],\n",
              "          [124]],\n",
              "  \n",
              "         [[121],\n",
              "          [113],\n",
              "          [115],\n",
              "          ...,\n",
              "          [123],\n",
              "          [113],\n",
              "          [112]],\n",
              "  \n",
              "         [[114],\n",
              "          [115],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [104],\n",
              "          [101]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[178],\n",
              "          [220],\n",
              "          [254],\n",
              "          ...,\n",
              "          [246],\n",
              "          [215],\n",
              "          [160]],\n",
              "  \n",
              "         [[159],\n",
              "          [177],\n",
              "          [244],\n",
              "          ...,\n",
              "          [248],\n",
              "          [205],\n",
              "          [221]],\n",
              "  \n",
              "         [[143],\n",
              "          [157],\n",
              "          [196],\n",
              "          ...,\n",
              "          [225],\n",
              "          [175],\n",
              "          [138]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[198],\n",
              "          [216],\n",
              "          [197],\n",
              "          ...,\n",
              "          [108],\n",
              "          [110],\n",
              "          [108]],\n",
              "  \n",
              "         [[186],\n",
              "          [186],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [100],\n",
              "          [105],\n",
              "          [100]],\n",
              "  \n",
              "         [[160],\n",
              "          [188],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 98],\n",
              "          [ 98]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 88],\n",
              "          [122],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 83],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[135],\n",
              "          [155],\n",
              "          [175],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 88],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[130],\n",
              "          [ 80],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 91],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 89],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 90],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 80],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 95],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 79],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 90],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[39],\n",
              "          [43],\n",
              "          [45],\n",
              "          ...,\n",
              "          [56],\n",
              "          [56],\n",
              "          [55]],\n",
              "  \n",
              "         [[22],\n",
              "          [14],\n",
              "          [47],\n",
              "          ...,\n",
              "          [58],\n",
              "          [58],\n",
              "          [57]],\n",
              "  \n",
              "         [[20],\n",
              "          [15],\n",
              "          [42],\n",
              "          ...,\n",
              "          [59],\n",
              "          [60],\n",
              "          [58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[35],\n",
              "          [47],\n",
              "          [53],\n",
              "          ...,\n",
              "          [63],\n",
              "          [68],\n",
              "          [55]],\n",
              "  \n",
              "         [[34],\n",
              "          [49],\n",
              "          [53],\n",
              "          ...,\n",
              "          [43],\n",
              "          [55],\n",
              "          [62]],\n",
              "  \n",
              "         [[29],\n",
              "          [36],\n",
              "          [55],\n",
              "          ...,\n",
              "          [56],\n",
              "          [54],\n",
              "          [53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 39],\n",
              "          [ 19],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 71],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 51],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 73],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[119],\n",
              "          [117],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 74],\n",
              "          [ 70]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 61],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 68],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 53],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 64],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 77],\n",
              "          [ 31]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 26],\n",
              "          [ 26],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  0]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 26],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  1],\n",
              "          [  0]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 26],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [  1],\n",
              "          [  0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[197],\n",
              "          [172],\n",
              "          [167],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  5],\n",
              "          [  3]],\n",
              "  \n",
              "         [[175],\n",
              "          [187],\n",
              "          [178],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  5],\n",
              "          [  5]],\n",
              "  \n",
              "         [[183],\n",
              "          [171],\n",
              "          [183],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  4],\n",
              "          [  3]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 38],\n",
              "          [ 19],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [113],\n",
              "          [111],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 24],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [115],\n",
              "          [115],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 25],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [119],\n",
              "          [117],\n",
              "          [114]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 55],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 42],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 57],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 38],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 55],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 37],\n",
              "          [ 26]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[108],\n",
              "          [113],\n",
              "          [116],\n",
              "          ...,\n",
              "          [119],\n",
              "          [124],\n",
              "          [119]],\n",
              "  \n",
              "         [[113],\n",
              "          [113],\n",
              "          [110],\n",
              "          ...,\n",
              "          [138],\n",
              "          [124],\n",
              "          [132]],\n",
              "  \n",
              "         [[114],\n",
              "          [114],\n",
              "          [116],\n",
              "          ...,\n",
              "          [125],\n",
              "          [131],\n",
              "          [130]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[198],\n",
              "          [154],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 78],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [104],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 84],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 80],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 88],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 37],\n",
              "          [104],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [147],\n",
              "          [151],\n",
              "          [160]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 98],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [141],\n",
              "          [148],\n",
              "          [151]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 71],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [145],\n",
              "          [129],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [173],\n",
              "          [176],\n",
              "          ...,\n",
              "          [104],\n",
              "          [ 98],\n",
              "          [103]],\n",
              "  \n",
              "         [[160],\n",
              "          [177],\n",
              "          [185],\n",
              "          ...,\n",
              "          [100],\n",
              "          [100],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[170],\n",
              "          [177],\n",
              "          [177],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[165],\n",
              "          [154],\n",
              "          [170],\n",
              "          ...,\n",
              "          [153],\n",
              "          [132],\n",
              "          [107]],\n",
              "  \n",
              "         [[163],\n",
              "          [166],\n",
              "          [171],\n",
              "          ...,\n",
              "          [104],\n",
              "          [129],\n",
              "          [139]],\n",
              "  \n",
              "         [[129],\n",
              "          [119],\n",
              "          [161],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [107],\n",
              "          [143]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[186],\n",
              "          [182],\n",
              "          [190],\n",
              "          ...,\n",
              "          [111],\n",
              "          [114],\n",
              "          [102]],\n",
              "  \n",
              "         [[183],\n",
              "          [184],\n",
              "          [182],\n",
              "          ...,\n",
              "          [136],\n",
              "          [118],\n",
              "          [100]],\n",
              "  \n",
              "         [[187],\n",
              "          [189],\n",
              "          [185],\n",
              "          ...,\n",
              "          [135],\n",
              "          [120],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[126],\n",
              "          [125],\n",
              "          [123],\n",
              "          ...,\n",
              "          [126],\n",
              "          [127],\n",
              "          [132]],\n",
              "  \n",
              "         [[121],\n",
              "          [122],\n",
              "          [120],\n",
              "          ...,\n",
              "          [126],\n",
              "          [128],\n",
              "          [134]],\n",
              "  \n",
              "         [[117],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [125],\n",
              "          [127],\n",
              "          [131]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[205],\n",
              "          [208],\n",
              "          [201],\n",
              "          ...,\n",
              "          [130],\n",
              "          [160],\n",
              "          [171]],\n",
              "  \n",
              "         [[204],\n",
              "          [204],\n",
              "          [200],\n",
              "          ...,\n",
              "          [162],\n",
              "          [193],\n",
              "          [149]],\n",
              "  \n",
              "         [[206],\n",
              "          [203],\n",
              "          [204],\n",
              "          ...,\n",
              "          [173],\n",
              "          [182],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 3],\n",
              "          [34],\n",
              "          [37],\n",
              "          ...,\n",
              "          [30],\n",
              "          [22],\n",
              "          [21]],\n",
              "  \n",
              "         [[13],\n",
              "          [65],\n",
              "          [50],\n",
              "          ...,\n",
              "          [49],\n",
              "          [16],\n",
              "          [34]],\n",
              "  \n",
              "         [[55],\n",
              "          [61],\n",
              "          [49],\n",
              "          ...,\n",
              "          [47],\n",
              "          [33],\n",
              "          [39]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[26],\n",
              "          [31],\n",
              "          [36],\n",
              "          ...,\n",
              "          [21],\n",
              "          [16],\n",
              "          [17]],\n",
              "  \n",
              "         [[10],\n",
              "          [27],\n",
              "          [76],\n",
              "          ...,\n",
              "          [25],\n",
              "          [25],\n",
              "          [15]],\n",
              "  \n",
              "         [[17],\n",
              "          [17],\n",
              "          [36],\n",
              "          ...,\n",
              "          [19],\n",
              "          [34],\n",
              "          [27]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 27],\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 31],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 23],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 30],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 25],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [139],\n",
              "          [119],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 24],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [137],\n",
              "          [123],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 23],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [133],\n",
              "          [123],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[198],\n",
              "          [168],\n",
              "          [105],\n",
              "          ...,\n",
              "          [161],\n",
              "          [183],\n",
              "          [156]],\n",
              "  \n",
              "         [[139],\n",
              "          [169],\n",
              "          [127],\n",
              "          ...,\n",
              "          [171],\n",
              "          [176],\n",
              "          [168]],\n",
              "  \n",
              "         [[127],\n",
              "          [134],\n",
              "          [138],\n",
              "          ...,\n",
              "          [223],\n",
              "          [210],\n",
              "          [211]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 32],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[148],\n",
              "          [145],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [ 17],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[163],\n",
              "          [ 48],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  4],\n",
              "          [ 55]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[38],\n",
              "          [44],\n",
              "          [46],\n",
              "          ...,\n",
              "          [66],\n",
              "          [58],\n",
              "          [40]],\n",
              "  \n",
              "         [[44],\n",
              "          [44],\n",
              "          [44],\n",
              "          ...,\n",
              "          [65],\n",
              "          [65],\n",
              "          [55]],\n",
              "  \n",
              "         [[38],\n",
              "          [44],\n",
              "          [46],\n",
              "          ...,\n",
              "          [24],\n",
              "          [49],\n",
              "          [56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[82],\n",
              "          [80],\n",
              "          [92],\n",
              "          ...,\n",
              "          [41],\n",
              "          [35],\n",
              "          [32]],\n",
              "  \n",
              "         [[84],\n",
              "          [83],\n",
              "          [89],\n",
              "          ...,\n",
              "          [41],\n",
              "          [29],\n",
              "          [28]],\n",
              "  \n",
              "         [[70],\n",
              "          [88],\n",
              "          [85],\n",
              "          ...,\n",
              "          [30],\n",
              "          [33],\n",
              "          [30]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 15],\n",
              "          [ 19],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 65],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 18],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 65],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 13],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 67],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[183],\n",
              "          [190],\n",
              "          [189],\n",
              "          ...,\n",
              "          [201],\n",
              "          [195],\n",
              "          [192]],\n",
              "  \n",
              "         [[195],\n",
              "          [195],\n",
              "          [182],\n",
              "          ...,\n",
              "          [202],\n",
              "          [198],\n",
              "          [189]],\n",
              "  \n",
              "         [[198],\n",
              "          [195],\n",
              "          [189],\n",
              "          ...,\n",
              "          [202],\n",
              "          [203],\n",
              "          [195]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[244],\n",
              "          [245],\n",
              "          [240],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 99],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[247],\n",
              "          [246],\n",
              "          [247],\n",
              "          ...,\n",
              "          [105],\n",
              "          [101],\n",
              "          [100]],\n",
              "  \n",
              "         [[248],\n",
              "          [247],\n",
              "          [247],\n",
              "          ...,\n",
              "          [103],\n",
              "          [103],\n",
              "          [100]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 33],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [243],\n",
              "          [241],\n",
              "          [241]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 35],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [242],\n",
              "          [240],\n",
              "          [241]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 30],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [243],\n",
              "          [243],\n",
              "          [232]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[157],\n",
              "          [156],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 23],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[157],\n",
              "          [153],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 23],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[157],\n",
              "          [155],\n",
              "          [154],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 23],\n",
              "          [ 28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[186],\n",
              "          [179],\n",
              "          [154],\n",
              "          ...,\n",
              "          [184],\n",
              "          [169],\n",
              "          [189]],\n",
              "  \n",
              "         [[152],\n",
              "          [143],\n",
              "          [141],\n",
              "          ...,\n",
              "          [182],\n",
              "          [181],\n",
              "          [172]],\n",
              "  \n",
              "         [[142],\n",
              "          [133],\n",
              "          [137],\n",
              "          ...,\n",
              "          [125],\n",
              "          [137],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 16],\n",
              "          [ 20],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 19],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 17],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 25],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 27],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[155],\n",
              "          [159],\n",
              "          [157],\n",
              "          ...,\n",
              "          [210],\n",
              "          [224],\n",
              "          [223]],\n",
              "  \n",
              "         [[142],\n",
              "          [155],\n",
              "          [167],\n",
              "          ...,\n",
              "          [208],\n",
              "          [220],\n",
              "          [212]],\n",
              "  \n",
              "         [[137],\n",
              "          [144],\n",
              "          [158],\n",
              "          ...,\n",
              "          [221],\n",
              "          [212],\n",
              "          [210]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[189],\n",
              "          [121],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [137],\n",
              "          [144]],\n",
              "  \n",
              "         [[173],\n",
              "          [172],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 91],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[146],\n",
              "          [ 73],\n",
              "          [163],\n",
              "          ...,\n",
              "          [129],\n",
              "          [176],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 63],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [126],\n",
              "          [ 91],\n",
              "          [191]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 36],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [219],\n",
              "          [196],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [183],\n",
              "          [227],\n",
              "          [144]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [223],\n",
              "          [222],\n",
              "          [221]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [255],\n",
              "          ...,\n",
              "          [221],\n",
              "          [220],\n",
              "          [226]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [255],\n",
              "          ...,\n",
              "          [226],\n",
              "          [227],\n",
              "          [228]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [251],\n",
              "          ...,\n",
              "          [242],\n",
              "          [237],\n",
              "          [241]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [249],\n",
              "          ...,\n",
              "          [244],\n",
              "          [242],\n",
              "          [232]],\n",
              "  \n",
              "         [[251],\n",
              "          [251],\n",
              "          [253],\n",
              "          ...,\n",
              "          [236],\n",
              "          [236],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [138],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 75],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[145],\n",
              "          [151],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[143],\n",
              "          [149],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 76],\n",
              "          [ 76]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 85],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 86],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 91],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 91],\n",
              "          [ 92],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [126],\n",
              "          [ 26],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 94],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 35],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 96],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 27],\n",
              "          [ 30]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 12],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 31],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 14],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 13],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 14],\n",
              "          [ 19]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]],\n",
              "  \n",
              "         [[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]],\n",
              "  \n",
              "         [[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]],\n",
              "  \n",
              "         [[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]],\n",
              "  \n",
              "         [[1],\n",
              "          [1],\n",
              "          [1],\n",
              "          ...,\n",
              "          [1],\n",
              "          [1],\n",
              "          [1]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 19],\n",
              "          [ 14],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [130],\n",
              "          [211],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 24],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [128],\n",
              "          [198],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 33],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [124],\n",
              "          [169],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 10],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [131],\n",
              "          [132],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 10],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [127],\n",
              "          [124],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [  9],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [125],\n",
              "          [121],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 41],\n",
              "          [ 25],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [194],\n",
              "          [194],\n",
              "          [195]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 30],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [193],\n",
              "          [192],\n",
              "          [189]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 40],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [192],\n",
              "          [192],\n",
              "          [189]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[135],\n",
              "          [138],\n",
              "          [128],\n",
              "          ...,\n",
              "          [121],\n",
              "          [117],\n",
              "          [112]],\n",
              "  \n",
              "         [[127],\n",
              "          [121],\n",
              "          [120],\n",
              "          ...,\n",
              "          [116],\n",
              "          [111],\n",
              "          [118]],\n",
              "  \n",
              "         [[113],\n",
              "          [108],\n",
              "          [116],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[174],\n",
              "          [178],\n",
              "          [180],\n",
              "          ...,\n",
              "          [234],\n",
              "          [227],\n",
              "          [224]],\n",
              "  \n",
              "         [[176],\n",
              "          [175],\n",
              "          [177],\n",
              "          ...,\n",
              "          [235],\n",
              "          [233],\n",
              "          [228]],\n",
              "  \n",
              "         [[182],\n",
              "          [183],\n",
              "          [184],\n",
              "          ...,\n",
              "          [235],\n",
              "          [240],\n",
              "          [234]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 91],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [138],\n",
              "          [132],\n",
              "          [147]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 88],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [129],\n",
              "          [132],\n",
              "          [138]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 84],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [143],\n",
              "          [141],\n",
              "          [143]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 81],\n",
              "          [ 27],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [150],\n",
              "          [150],\n",
              "          [147]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 31],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [151],\n",
              "          [151],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 34],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [154],\n",
              "          [152],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 32],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 81],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 33],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [107],\n",
              "          [102],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 31],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  0],\n",
              "          [  0],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[  5],\n",
              "          [  8],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 29],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  9],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 30],\n",
              "          [ 29]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [136],\n",
              "          [153],\n",
              "          ...,\n",
              "          [146],\n",
              "          [139],\n",
              "          [136]],\n",
              "  \n",
              "         [[141],\n",
              "          [131],\n",
              "          [138],\n",
              "          ...,\n",
              "          [138],\n",
              "          [138],\n",
              "          [138]],\n",
              "  \n",
              "         [[140],\n",
              "          [122],\n",
              "          [142],\n",
              "          ...,\n",
              "          [144],\n",
              "          [139],\n",
              "          [128]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 28],\n",
              "          [ 17],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 78],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [100],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 11],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [108],\n",
              "          [ 15]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [125],\n",
              "          [134],\n",
              "          [134]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 86],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [122],\n",
              "          [123],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 58],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [119],\n",
              "          [125],\n",
              "          [128]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[234],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [233],\n",
              "          [232],\n",
              "          [232]],\n",
              "  \n",
              "         [[234],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [233],\n",
              "          [233],\n",
              "          [234]],\n",
              "  \n",
              "         [[235],\n",
              "          [238],\n",
              "          [238],\n",
              "          ...,\n",
              "          [233],\n",
              "          [232],\n",
              "          [231]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [136],\n",
              "          [195],\n",
              "          ...,\n",
              "          [146],\n",
              "          [145],\n",
              "          [140]],\n",
              "  \n",
              "         [[172],\n",
              "          [138],\n",
              "          [161],\n",
              "          ...,\n",
              "          [136],\n",
              "          [136],\n",
              "          [166]],\n",
              "  \n",
              "         [[130],\n",
              "          [135],\n",
              "          [139],\n",
              "          ...,\n",
              "          [109],\n",
              "          [131],\n",
              "          [148]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 90],\n",
              "          [111],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [100],\n",
              "          [121]],\n",
              "  \n",
              "         [[121],\n",
              "          [106],\n",
              "          [146],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 97],\n",
              "          [162]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [105],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [141],\n",
              "          [121],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 77],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [140],\n",
              "          [ 39],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [111],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 72],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 35],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 91],\n",
              "          [113]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[114],\n",
              "          [114],\n",
              "          [113],\n",
              "          ...,\n",
              "          [104],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         [[111],\n",
              "          [109],\n",
              "          [107],\n",
              "          ...,\n",
              "          [109],\n",
              "          [108],\n",
              "          [107]],\n",
              "  \n",
              "         [[106],\n",
              "          [109],\n",
              "          [105],\n",
              "          ...,\n",
              "          [111],\n",
              "          [111],\n",
              "          [111]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [170],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 93],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[168],\n",
              "          [168],\n",
              "          [169],\n",
              "          ...,\n",
              "          [104],\n",
              "          [ 94],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[168],\n",
              "          [169],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [106],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[101],\n",
              "          [ 94],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [128],\n",
              "          [152],\n",
              "          [140]],\n",
              "  \n",
              "         [[106],\n",
              "          [102],\n",
              "          [104],\n",
              "          ...,\n",
              "          [149],\n",
              "          [141],\n",
              "          [138]],\n",
              "  \n",
              "         [[113],\n",
              "          [121],\n",
              "          [117],\n",
              "          ...,\n",
              "          [130],\n",
              "          [131],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[186],\n",
              "          [146],\n",
              "          [183],\n",
              "          ...,\n",
              "          [175],\n",
              "          [188],\n",
              "          [189]],\n",
              "  \n",
              "         [[186],\n",
              "          [161],\n",
              "          [169],\n",
              "          ...,\n",
              "          [182],\n",
              "          [173],\n",
              "          [177]],\n",
              "  \n",
              "         [[177],\n",
              "          [179],\n",
              "          [183],\n",
              "          ...,\n",
              "          [205],\n",
              "          [197],\n",
              "          [170]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[134],\n",
              "          [134],\n",
              "          [134],\n",
              "          ...,\n",
              "          [120],\n",
              "          [120],\n",
              "          [120]],\n",
              "  \n",
              "         [[130],\n",
              "          [130],\n",
              "          [130],\n",
              "          ...,\n",
              "          [115],\n",
              "          [115],\n",
              "          [115]],\n",
              "  \n",
              "         [[127],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [112],\n",
              "          [112],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[173],\n",
              "          [170],\n",
              "          [183],\n",
              "          ...,\n",
              "          [184],\n",
              "          [185],\n",
              "          [182]],\n",
              "  \n",
              "         [[176],\n",
              "          [170],\n",
              "          [172],\n",
              "          ...,\n",
              "          [183],\n",
              "          [183],\n",
              "          [181]],\n",
              "  \n",
              "         [[185],\n",
              "          [176],\n",
              "          [168],\n",
              "          ...,\n",
              "          [183],\n",
              "          [181],\n",
              "          [179]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 46],\n",
              "          [157],\n",
              "          [158],\n",
              "          ...,\n",
              "          [147],\n",
              "          [152],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [153],\n",
              "          [159],\n",
              "          ...,\n",
              "          [147],\n",
              "          [152],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [145],\n",
              "          [159],\n",
              "          ...,\n",
              "          [147],\n",
              "          [152],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 19],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [167],\n",
              "          [164],\n",
              "          [162]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [166],\n",
              "          [167],\n",
              "          [166]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 20],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [169],\n",
              "          [165],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 21],\n",
              "          [ 61],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [244],\n",
              "          [248],\n",
              "          [250]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 36],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [246],\n",
              "          [245],\n",
              "          [251]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 45],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [247],\n",
              "          [241],\n",
              "          [251]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 51],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 94],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 36],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [105],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 37],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 78],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[188],\n",
              "          [197],\n",
              "          [199],\n",
              "          ...,\n",
              "          [136],\n",
              "          [123],\n",
              "          [135]],\n",
              "  \n",
              "         [[168],\n",
              "          [198],\n",
              "          [214],\n",
              "          ...,\n",
              "          [114],\n",
              "          [135],\n",
              "          [149]],\n",
              "  \n",
              "         [[196],\n",
              "          [200],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [152],\n",
              "          [115]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 36],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 79],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 59],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 67],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 50],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 80],\n",
              "          [ 68]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[146],\n",
              "          [150],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [168],\n",
              "          [167]],\n",
              "  \n",
              "         [[151],\n",
              "          [154],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [175],\n",
              "          [171]],\n",
              "  \n",
              "         [[154],\n",
              "          [158],\n",
              "          [162],\n",
              "          ...,\n",
              "          [116],\n",
              "          [174],\n",
              "          [168]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[115],\n",
              "          [119],\n",
              "          [119],\n",
              "          ...,\n",
              "          [152],\n",
              "          [154],\n",
              "          [151]],\n",
              "  \n",
              "         [[112],\n",
              "          [117],\n",
              "          [117],\n",
              "          ...,\n",
              "          [151],\n",
              "          [151],\n",
              "          [151]],\n",
              "  \n",
              "         [[117],\n",
              "          [120],\n",
              "          [120],\n",
              "          ...,\n",
              "          [123],\n",
              "          [121],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 95],\n",
              "          [ 91],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [122],\n",
              "          [120],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 18],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [120],\n",
              "          [121],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 34],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [121],\n",
              "          [118],\n",
              "          [117]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [201],\n",
              "          [203],\n",
              "          ...,\n",
              "          [109],\n",
              "          [108],\n",
              "          [106]],\n",
              "  \n",
              "         [[204],\n",
              "          [203],\n",
              "          [197],\n",
              "          ...,\n",
              "          [108],\n",
              "          [106],\n",
              "          [105]],\n",
              "  \n",
              "         [[198],\n",
              "          [202],\n",
              "          [192],\n",
              "          ...,\n",
              "          [110],\n",
              "          [108],\n",
              "          [105]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 16],\n",
              "          [ 17],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 24],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 21],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 15],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 18],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 16],\n",
              "          [ 14]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[100],\n",
              "          [114],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 47],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[100],\n",
              "          [104],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 52],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 96],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 55],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 93],\n",
              "          [ 38],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [198],\n",
              "          [193],\n",
              "          [190]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 42],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [196],\n",
              "          [175],\n",
              "          [204]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 47],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [139],\n",
              "          [180],\n",
              "          [181]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [141],\n",
              "          [172],\n",
              "          ...,\n",
              "          [104],\n",
              "          [135],\n",
              "          [145]],\n",
              "  \n",
              "         [[183],\n",
              "          [161],\n",
              "          [196],\n",
              "          ...,\n",
              "          [143],\n",
              "          [138],\n",
              "          [136]],\n",
              "  \n",
              "         [[182],\n",
              "          [146],\n",
              "          [131],\n",
              "          ...,\n",
              "          [144],\n",
              "          [201],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[117],\n",
              "          [117],\n",
              "          [139],\n",
              "          ...,\n",
              "          [173],\n",
              "          [155],\n",
              "          [187]],\n",
              "  \n",
              "         [[122],\n",
              "          [121],\n",
              "          [135],\n",
              "          ...,\n",
              "          [177],\n",
              "          [170],\n",
              "          [174]],\n",
              "  \n",
              "         [[126],\n",
              "          [123],\n",
              "          [131],\n",
              "          ...,\n",
              "          [182],\n",
              "          [172],\n",
              "          [184]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 42],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 80],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 33],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 87],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 35],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [173],\n",
              "          [113]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[144],\n",
              "          [133],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 37],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[184],\n",
              "          [132],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 38],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[131],\n",
              "          [170],\n",
              "          [181],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 38],\n",
              "          [ 37]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[164],\n",
              "          [171],\n",
              "          [176],\n",
              "          ...,\n",
              "          [164],\n",
              "          [183],\n",
              "          [204]],\n",
              "  \n",
              "         [[185],\n",
              "          [177],\n",
              "          [187],\n",
              "          ...,\n",
              "          [165],\n",
              "          [202],\n",
              "          [205]],\n",
              "  \n",
              "         [[179],\n",
              "          [191],\n",
              "          [192],\n",
              "          ...,\n",
              "          [167],\n",
              "          [191],\n",
              "          [186]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[132],\n",
              "          [ 59],\n",
              "          [130],\n",
              "          ...,\n",
              "          [210],\n",
              "          [203],\n",
              "          [190]],\n",
              "  \n",
              "         [[138],\n",
              "          [125],\n",
              "          [157],\n",
              "          ...,\n",
              "          [209],\n",
              "          [194],\n",
              "          [216]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [143],\n",
              "          [174],\n",
              "          ...,\n",
              "          [214],\n",
              "          [216],\n",
              "          [205]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[222],\n",
              "          [132],\n",
              "          [164],\n",
              "          ...,\n",
              "          [182],\n",
              "          [175],\n",
              "          [164]],\n",
              "  \n",
              "         [[168],\n",
              "          [158],\n",
              "          [156],\n",
              "          ...,\n",
              "          [172],\n",
              "          [176],\n",
              "          [110]],\n",
              "  \n",
              "         [[171],\n",
              "          [165],\n",
              "          [189],\n",
              "          ...,\n",
              "          [172],\n",
              "          [141],\n",
              "          [153]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[180],\n",
              "          [178],\n",
              "          [178],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [105]],\n",
              "  \n",
              "         [[181],\n",
              "          [179],\n",
              "          [183],\n",
              "          ...,\n",
              "          [115],\n",
              "          [123],\n",
              "          [114]],\n",
              "  \n",
              "         [[181],\n",
              "          [183],\n",
              "          [182],\n",
              "          ...,\n",
              "          [123],\n",
              "          [137],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 79],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [114],\n",
              "          [ 53],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 89],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 30],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 94],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [104],\n",
              "          [114]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[252],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [187],\n",
              "          [183],\n",
              "          [225]],\n",
              "  \n",
              "         [[141],\n",
              "          [253],\n",
              "          [254],\n",
              "          ...,\n",
              "          [144],\n",
              "          [226],\n",
              "          [196]],\n",
              "  \n",
              "         [[113],\n",
              "          [157],\n",
              "          [252],\n",
              "          ...,\n",
              "          [212],\n",
              "          [220],\n",
              "          [200]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[180],\n",
              "          [182],\n",
              "          [182],\n",
              "          ...,\n",
              "          [221],\n",
              "          [221],\n",
              "          [221]],\n",
              "  \n",
              "         [[182],\n",
              "          [184],\n",
              "          [184],\n",
              "          ...,\n",
              "          [221],\n",
              "          [221],\n",
              "          [221]],\n",
              "  \n",
              "         [[180],\n",
              "          [183],\n",
              "          [184],\n",
              "          ...,\n",
              "          [221],\n",
              "          [221],\n",
              "          [221]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 94],\n",
              "          [123],\n",
              "          [105],\n",
              "          ...,\n",
              "          [134],\n",
              "          [126],\n",
              "          [122]],\n",
              "  \n",
              "         [[103],\n",
              "          [101],\n",
              "          [100],\n",
              "          ...,\n",
              "          [130],\n",
              "          [100],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[102],\n",
              "          [101],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 28],\n",
              "          [ 36]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[151],\n",
              "          [131],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [145],\n",
              "          [175],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [131],\n",
              "          [161],\n",
              "          ...,\n",
              "          [169],\n",
              "          [150],\n",
              "          [139]],\n",
              "  \n",
              "         [[112],\n",
              "          [117],\n",
              "          [180],\n",
              "          ...,\n",
              "          [149],\n",
              "          [117],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[206],\n",
              "          [206],\n",
              "          [217],\n",
              "          ...,\n",
              "          [219],\n",
              "          [220],\n",
              "          [224]],\n",
              "  \n",
              "         [[211],\n",
              "          [209],\n",
              "          [214],\n",
              "          ...,\n",
              "          [225],\n",
              "          [217],\n",
              "          [223]],\n",
              "  \n",
              "         [[209],\n",
              "          [202],\n",
              "          [209],\n",
              "          ...,\n",
              "          [218],\n",
              "          [219],\n",
              "          [223]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[33],\n",
              "          [35],\n",
              "          [36],\n",
              "          ...,\n",
              "          [13],\n",
              "          [12],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[35],\n",
              "          [37],\n",
              "          [45],\n",
              "          ...,\n",
              "          [28],\n",
              "          [79],\n",
              "          [22]],\n",
              "  \n",
              "         [[39],\n",
              "          [39],\n",
              "          [42],\n",
              "          ...,\n",
              "          [94],\n",
              "          [46],\n",
              "          [47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[83],\n",
              "          [80],\n",
              "          [78],\n",
              "          ...,\n",
              "          [90],\n",
              "          [89],\n",
              "          [78]],\n",
              "  \n",
              "         [[83],\n",
              "          [72],\n",
              "          [77],\n",
              "          ...,\n",
              "          [82],\n",
              "          [83],\n",
              "          [84]],\n",
              "  \n",
              "         [[74],\n",
              "          [72],\n",
              "          [71],\n",
              "          ...,\n",
              "          [91],\n",
              "          [80],\n",
              "          [83]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[113],\n",
              "          [115],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 60],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[113],\n",
              "          [114],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 57],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [116],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 45],\n",
              "          [ 42]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 51],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 54],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 53],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 50],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 57],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 62],\n",
              "          [ 58]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 62],\n",
              "          [ 58],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 71],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 60],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 70],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 63],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 68],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [144],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 75],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[108],\n",
              "          [146],\n",
              "          [170],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 77],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[114],\n",
              "          [152],\n",
              "          [175],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 79],\n",
              "          [ 79]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[210],\n",
              "          [185],\n",
              "          [194],\n",
              "          ...,\n",
              "          [127],\n",
              "          [128],\n",
              "          [131]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [128],\n",
              "          [129],\n",
              "          [131]],\n",
              "  \n",
              "         [[250],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [128],\n",
              "          [128],\n",
              "          [131]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[141],\n",
              "          [148],\n",
              "          [197],\n",
              "          ...,\n",
              "          [114],\n",
              "          [118],\n",
              "          [117]],\n",
              "  \n",
              "         [[189],\n",
              "          [151],\n",
              "          [192],\n",
              "          ...,\n",
              "          [115],\n",
              "          [119],\n",
              "          [117]],\n",
              "  \n",
              "         [[195],\n",
              "          [171],\n",
              "          [191],\n",
              "          ...,\n",
              "          [113],\n",
              "          [119],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 15],\n",
              "          [ 15],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 28],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 28],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 14],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 27],\n",
              "          [ 23]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 37],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 94],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 53],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 97],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 26],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 99],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 67],\n",
              "          [ 74],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [252],\n",
              "          [255],\n",
              "          [254]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 70],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [248],\n",
              "          [251],\n",
              "          [251]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 43],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [203],\n",
              "          [178],\n",
              "          [210]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 30],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [233],\n",
              "          [239],\n",
              "          [233]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [230],\n",
              "          [227],\n",
              "          [221]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 39],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [226],\n",
              "          [228],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[147],\n",
              "          [146],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 70],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[178],\n",
              "          [178],\n",
              "          [178],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 70],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[189],\n",
              "          [190],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 66],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[161],\n",
              "          [160],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 72],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[153],\n",
              "          [155],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 69],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[139],\n",
              "          [135],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 69],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[184],\n",
              "          [191],\n",
              "          [187],\n",
              "          ...,\n",
              "          [153],\n",
              "          [151],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[191],\n",
              "          [188],\n",
              "          [200],\n",
              "          ...,\n",
              "          [159],\n",
              "          [150],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[192],\n",
              "          [194],\n",
              "          [192],\n",
              "          ...,\n",
              "          [154],\n",
              "          [144],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[252],\n",
              "          [253],\n",
              "          [247],\n",
              "          ...,\n",
              "          [231],\n",
              "          [219],\n",
              "          [226]],\n",
              "  \n",
              "         [[237],\n",
              "          [250],\n",
              "          [241],\n",
              "          ...,\n",
              "          [222],\n",
              "          [225],\n",
              "          [235]],\n",
              "  \n",
              "         [[241],\n",
              "          [244],\n",
              "          [244],\n",
              "          ...,\n",
              "          [223],\n",
              "          [230],\n",
              "          [217]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 45],\n",
              "          [ 39],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 60],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 48],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 58],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 53],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 59],\n",
              "          [ 58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[125],\n",
              "          [127],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 27],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[123],\n",
              "          [122],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 25],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[118],\n",
              "          [140],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 31],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[128],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [134],\n",
              "          [131],\n",
              "          [130]],\n",
              "  \n",
              "         [[143],\n",
              "          [129],\n",
              "          [135],\n",
              "          ...,\n",
              "          [153],\n",
              "          [145],\n",
              "          [151]],\n",
              "  \n",
              "         [[134],\n",
              "          [136],\n",
              "          [155],\n",
              "          ...,\n",
              "          [144],\n",
              "          [131],\n",
              "          [136]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [183],\n",
              "          [188],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 82],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[189],\n",
              "          [193],\n",
              "          [184],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 85],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[171],\n",
              "          [193],\n",
              "          [227],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 89],\n",
              "          [ 77]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[107],\n",
              "          [107],\n",
              "          [108],\n",
              "          ...,\n",
              "          [162],\n",
              "          [166],\n",
              "          [173]],\n",
              "  \n",
              "         [[107],\n",
              "          [107],\n",
              "          [107],\n",
              "          ...,\n",
              "          [171],\n",
              "          [176],\n",
              "          [180]],\n",
              "  \n",
              "         [[107],\n",
              "          [108],\n",
              "          [108],\n",
              "          ...,\n",
              "          [181],\n",
              "          [183],\n",
              "          [182]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[133],\n",
              "          [122],\n",
              "          [128],\n",
              "          ...,\n",
              "          [205],\n",
              "          [208],\n",
              "          [205]],\n",
              "  \n",
              "         [[149],\n",
              "          [153],\n",
              "          [157],\n",
              "          ...,\n",
              "          [203],\n",
              "          [199],\n",
              "          [203]],\n",
              "  \n",
              "         [[160],\n",
              "          [148],\n",
              "          [157],\n",
              "          ...,\n",
              "          [211],\n",
              "          [202],\n",
              "          [201]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[134],\n",
              "          [139],\n",
              "          [144],\n",
              "          ...,\n",
              "          [125],\n",
              "          [131],\n",
              "          [131]],\n",
              "  \n",
              "         [[134],\n",
              "          [137],\n",
              "          [141],\n",
              "          ...,\n",
              "          [124],\n",
              "          [132],\n",
              "          [127]],\n",
              "  \n",
              "         [[135],\n",
              "          [137],\n",
              "          [139],\n",
              "          ...,\n",
              "          [123],\n",
              "          [129],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[246],\n",
              "          [250],\n",
              "          [252],\n",
              "          ...,\n",
              "          [234],\n",
              "          [233],\n",
              "          [232]],\n",
              "  \n",
              "         [[246],\n",
              "          [247],\n",
              "          [248],\n",
              "          ...,\n",
              "          [235],\n",
              "          [231],\n",
              "          [227]],\n",
              "  \n",
              "         [[252],\n",
              "          [248],\n",
              "          [248],\n",
              "          ...,\n",
              "          [229],\n",
              "          [232],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 56],\n",
              "          [ 42],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 76],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 40],\n",
              "          [202],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 79],\n",
              "          [  4]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 27],\n",
              "          [202],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 76],\n",
              "          [  7]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[213],\n",
              "          [209],\n",
              "          [208],\n",
              "          ...,\n",
              "          [221],\n",
              "          [216],\n",
              "          [211]],\n",
              "  \n",
              "         [[210],\n",
              "          [210],\n",
              "          [207],\n",
              "          ...,\n",
              "          [219],\n",
              "          [217],\n",
              "          [216]],\n",
              "  \n",
              "         [[209],\n",
              "          [207],\n",
              "          [210],\n",
              "          ...,\n",
              "          [221],\n",
              "          [219],\n",
              "          [210]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 68],\n",
              "          [ 67],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 71],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 67],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 70],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 68],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 89],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [165],\n",
              "          [149],\n",
              "          ...,\n",
              "          [218],\n",
              "          [214],\n",
              "          [221]],\n",
              "  \n",
              "         [[165],\n",
              "          [157],\n",
              "          [146],\n",
              "          ...,\n",
              "          [223],\n",
              "          [217],\n",
              "          [224]],\n",
              "  \n",
              "         [[158],\n",
              "          [150],\n",
              "          [141],\n",
              "          ...,\n",
              "          [219],\n",
              "          [221],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 83],\n",
              "          [ 87],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 46],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 98],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 49],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[100],\n",
              "          [103],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          [ 53]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [110],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 79],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 91],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 69],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[147],\n",
              "          [158],\n",
              "          [168],\n",
              "          ...,\n",
              "          [181],\n",
              "          [185],\n",
              "          [216]],\n",
              "  \n",
              "         [[157],\n",
              "          [123],\n",
              "          [183],\n",
              "          ...,\n",
              "          [134],\n",
              "          [143],\n",
              "          [184]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [145],\n",
              "          [137],\n",
              "          ...,\n",
              "          [119],\n",
              "          [140],\n",
              "          [188]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[131],\n",
              "          [132],\n",
              "          [135],\n",
              "          ...,\n",
              "          [170],\n",
              "          [169],\n",
              "          [145]],\n",
              "  \n",
              "         [[144],\n",
              "          [145],\n",
              "          [156],\n",
              "          ...,\n",
              "          [164],\n",
              "          [146],\n",
              "          [161]],\n",
              "  \n",
              "         [[144],\n",
              "          [145],\n",
              "          [135],\n",
              "          ...,\n",
              "          [151],\n",
              "          [154],\n",
              "          [167]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  9],\n",
              "          [ 11],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 62],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[  4],\n",
              "          [ 14],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 60],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[  5],\n",
              "          [ 17],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 71],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 76],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [154],\n",
              "          [ 62],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 73],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 74],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 73],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 81],\n",
              "          [ 67]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[123],\n",
              "          [165],\n",
              "          [180],\n",
              "          ...,\n",
              "          [203],\n",
              "          [160],\n",
              "          [181]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 19],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [195],\n",
              "          [178],\n",
              "          [180]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 64],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [173],\n",
              "          [177],\n",
              "          [176]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[162],\n",
              "          [167],\n",
              "          [129],\n",
              "          ...,\n",
              "          [118],\n",
              "          [144],\n",
              "          [198]],\n",
              "  \n",
              "         [[120],\n",
              "          [153],\n",
              "          [158],\n",
              "          ...,\n",
              "          [123],\n",
              "          [156],\n",
              "          [120]],\n",
              "  \n",
              "         [[128],\n",
              "          [129],\n",
              "          [182],\n",
              "          ...,\n",
              "          [135],\n",
              "          [134],\n",
              "          [ 80]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 53],\n",
              "          [ 45],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [136],\n",
              "          [127],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 63],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [134],\n",
              "          [128],\n",
              "          [128]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 50],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [129],\n",
              "          [127],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 24],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [128],\n",
              "          [118],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 22],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [143],\n",
              "          [145],\n",
              "          [143]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 24],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [133],\n",
              "          [143]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 80],\n",
              "          [ 82],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 64],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 64],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 92],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[102],\n",
              "          [102],\n",
              "          [102],\n",
              "          ...,\n",
              "          [108],\n",
              "          [109],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [102],\n",
              "          [105],\n",
              "          ...,\n",
              "          [113],\n",
              "          [117],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [101],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [114],\n",
              "          [117],\n",
              "          [120]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[130],\n",
              "          [128],\n",
              "          [126],\n",
              "          ...,\n",
              "          [141],\n",
              "          [158],\n",
              "          [160]],\n",
              "  \n",
              "         [[178],\n",
              "          [178],\n",
              "          [179],\n",
              "          ...,\n",
              "          [151],\n",
              "          [178],\n",
              "          [157]],\n",
              "  \n",
              "         [[191],\n",
              "          [191],\n",
              "          [191],\n",
              "          ...,\n",
              "          [161],\n",
              "          [169],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 15],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [173],\n",
              "          [217],\n",
              "          [222]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 28],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [177],\n",
              "          [216],\n",
              "          [223]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 58],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [178],\n",
              "          [216],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[198],\n",
              "          [144],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [115],\n",
              "          [121]],\n",
              "  \n",
              "         [[189],\n",
              "          [158],\n",
              "          [102],\n",
              "          ...,\n",
              "          [134],\n",
              "          [124],\n",
              "          [130]],\n",
              "  \n",
              "         [[144],\n",
              "          [161],\n",
              "          [162],\n",
              "          ...,\n",
              "          [245],\n",
              "          [242],\n",
              "          [240]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [102],\n",
              "          [124],\n",
              "          ...,\n",
              "          [135],\n",
              "          [132],\n",
              "          [142]],\n",
              "  \n",
              "         [[150],\n",
              "          [106],\n",
              "          [155],\n",
              "          ...,\n",
              "          [134],\n",
              "          [113],\n",
              "          [135]],\n",
              "  \n",
              "         [[148],\n",
              "          [117],\n",
              "          [109],\n",
              "          ...,\n",
              "          [107],\n",
              "          [157],\n",
              "          [124]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 8],\n",
              "          [10],\n",
              "          [12],\n",
              "          ...,\n",
              "          [20],\n",
              "          [27],\n",
              "          [27]],\n",
              "  \n",
              "         [[13],\n",
              "          [ 7],\n",
              "          [10],\n",
              "          ...,\n",
              "          [20],\n",
              "          [21],\n",
              "          [22]],\n",
              "  \n",
              "         [[27],\n",
              "          [10],\n",
              "          [12],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [11],\n",
              "          [11]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[43],\n",
              "          [44],\n",
              "          [46],\n",
              "          ...,\n",
              "          [44],\n",
              "          [47],\n",
              "          [51]],\n",
              "  \n",
              "         [[44],\n",
              "          [48],\n",
              "          [46],\n",
              "          ...,\n",
              "          [48],\n",
              "          [44],\n",
              "          [44]],\n",
              "  \n",
              "         [[40],\n",
              "          [46],\n",
              "          [45],\n",
              "          ...,\n",
              "          [50],\n",
              "          [46],\n",
              "          [49]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[207],\n",
              "          [208],\n",
              "          [208],\n",
              "          ...,\n",
              "          [109],\n",
              "          [114],\n",
              "          [121]],\n",
              "  \n",
              "         [[210],\n",
              "          [211],\n",
              "          [211],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 49],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[209],\n",
              "          [210],\n",
              "          [210],\n",
              "          ...,\n",
              "          [172],\n",
              "          [167],\n",
              "          [169]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 60],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 19],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 62],\n",
              "          [ 57]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[212],\n",
              "          [140],\n",
              "          [180],\n",
              "          ...,\n",
              "          [115],\n",
              "          [113],\n",
              "          [115]],\n",
              "  \n",
              "         [[182],\n",
              "          [219],\n",
              "          [145],\n",
              "          ...,\n",
              "          [116],\n",
              "          [111],\n",
              "          [121]],\n",
              "  \n",
              "         [[196],\n",
              "          [144],\n",
              "          [200],\n",
              "          ...,\n",
              "          [120],\n",
              "          [116],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 76],\n",
              "          [145],\n",
              "          [134],\n",
              "          ...,\n",
              "          [215],\n",
              "          [133],\n",
              "          [168]],\n",
              "  \n",
              "         [[216],\n",
              "          [148],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [187],\n",
              "          [127]],\n",
              "  \n",
              "         [[138],\n",
              "          [165],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [125],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[154],\n",
              "          [161],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[153],\n",
              "          [163],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[146],\n",
              "          [159],\n",
              "          [160],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[178],\n",
              "          [176],\n",
              "          [180],\n",
              "          ...,\n",
              "          [217],\n",
              "          [217],\n",
              "          [217]],\n",
              "  \n",
              "         [[175],\n",
              "          [181],\n",
              "          [177],\n",
              "          ...,\n",
              "          [218],\n",
              "          [218],\n",
              "          [217]],\n",
              "  \n",
              "         [[174],\n",
              "          [172],\n",
              "          [147],\n",
              "          ...,\n",
              "          [219],\n",
              "          [219],\n",
              "          [217]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[194],\n",
              "          [198],\n",
              "          [206],\n",
              "          ...,\n",
              "          [198],\n",
              "          [203],\n",
              "          [198]],\n",
              "  \n",
              "         [[203],\n",
              "          [206],\n",
              "          [208],\n",
              "          ...,\n",
              "          [200],\n",
              "          [208],\n",
              "          [207]],\n",
              "  \n",
              "         [[211],\n",
              "          [213],\n",
              "          [210],\n",
              "          ...,\n",
              "          [216],\n",
              "          [220],\n",
              "          [221]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[151],\n",
              "          [140],\n",
              "          [149],\n",
              "          ...,\n",
              "          [120],\n",
              "          [107],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[158],\n",
              "          [151],\n",
              "          [152],\n",
              "          ...,\n",
              "          [124],\n",
              "          [ 93],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[156],\n",
              "          [150],\n",
              "          [152],\n",
              "          ...,\n",
              "          [110],\n",
              "          [ 83],\n",
              "          [101]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [117],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 46],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [109],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 41],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[106],\n",
              "          [111],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 80],\n",
              "          [ 61]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 58],\n",
              "          [ 43],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [147],\n",
              "          [107],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 51],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [113],\n",
              "          [124],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 55],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [107],\n",
              "          [103],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 51],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 97],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 60],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 43],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [119],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 78],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 42],\n",
              "          [ 42],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [230],\n",
              "          [228],\n",
              "          [229]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 42],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [229],\n",
              "          [231],\n",
              "          [231]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 40],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [231],\n",
              "          [231],\n",
              "          [230]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [142],\n",
              "          [143],\n",
              "          ...,\n",
              "          [109],\n",
              "          [117],\n",
              "          [117]],\n",
              "  \n",
              "         [[130],\n",
              "          [146],\n",
              "          [146],\n",
              "          ...,\n",
              "          [136],\n",
              "          [139],\n",
              "          [161]],\n",
              "  \n",
              "         [[154],\n",
              "          [146],\n",
              "          [144],\n",
              "          ...,\n",
              "          [156],\n",
              "          [197],\n",
              "          [217]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[113],\n",
              "          [110],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 97],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[153],\n",
              "          [137],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[159],\n",
              "          [156],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 93],\n",
              "          [ 93]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [200],\n",
              "          [141],\n",
              "          ...,\n",
              "          [109],\n",
              "          [107],\n",
              "          [101]],\n",
              "  \n",
              "         [[163],\n",
              "          [199],\n",
              "          [127],\n",
              "          ...,\n",
              "          [135],\n",
              "          [125],\n",
              "          [114]],\n",
              "  \n",
              "         [[171],\n",
              "          [151],\n",
              "          [162],\n",
              "          ...,\n",
              "          [164],\n",
              "          [112],\n",
              "          [102]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [143],\n",
              "          [144],\n",
              "          ...,\n",
              "          [245],\n",
              "          [244],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[148],\n",
              "          [146],\n",
              "          [150],\n",
              "          ...,\n",
              "          [245],\n",
              "          [244],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[149],\n",
              "          [149],\n",
              "          [146],\n",
              "          ...,\n",
              "          [246],\n",
              "          [245],\n",
              "          [ 38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[179],\n",
              "          [172],\n",
              "          [168],\n",
              "          ...,\n",
              "          [179],\n",
              "          [167],\n",
              "          [170]],\n",
              "  \n",
              "         [[188],\n",
              "          [181],\n",
              "          [181],\n",
              "          ...,\n",
              "          [181],\n",
              "          [182],\n",
              "          [108]],\n",
              "  \n",
              "         [[183],\n",
              "          [180],\n",
              "          [181],\n",
              "          ...,\n",
              "          [185],\n",
              "          [160],\n",
              "          [136]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[55],\n",
              "          [53],\n",
              "          [48],\n",
              "          ...,\n",
              "          [45],\n",
              "          [45],\n",
              "          [48]],\n",
              "  \n",
              "         [[53],\n",
              "          [55],\n",
              "          [49],\n",
              "          ...,\n",
              "          [46],\n",
              "          [46],\n",
              "          [49]],\n",
              "  \n",
              "         [[56],\n",
              "          [53],\n",
              "          [52],\n",
              "          ...,\n",
              "          [45],\n",
              "          [47],\n",
              "          [45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[43],\n",
              "          [41],\n",
              "          [45],\n",
              "          ...,\n",
              "          [61],\n",
              "          [62],\n",
              "          [71]],\n",
              "  \n",
              "         [[42],\n",
              "          [41],\n",
              "          [37],\n",
              "          ...,\n",
              "          [80],\n",
              "          [71],\n",
              "          [68]],\n",
              "  \n",
              "         [[43],\n",
              "          [43],\n",
              "          [41],\n",
              "          ...,\n",
              "          [64],\n",
              "          [55],\n",
              "          [53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[206],\n",
              "          [125],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 32],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[111],\n",
              "          [118],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 29],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 44],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 31],\n",
              "          [ 34]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 49],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [100],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 47],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [104],\n",
              "          [104],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 46],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [109],\n",
              "          [104],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[194],\n",
              "          [193],\n",
              "          [189],\n",
              "          ...,\n",
              "          [146],\n",
              "          [147],\n",
              "          [143]],\n",
              "  \n",
              "         [[183],\n",
              "          [187],\n",
              "          [192],\n",
              "          ...,\n",
              "          [145],\n",
              "          [151],\n",
              "          [145]],\n",
              "  \n",
              "         [[193],\n",
              "          [187],\n",
              "          [192],\n",
              "          ...,\n",
              "          [153],\n",
              "          [154],\n",
              "          [139]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [133],\n",
              "          [170],\n",
              "          ...,\n",
              "          [182],\n",
              "          [178],\n",
              "          [165]],\n",
              "  \n",
              "         [[153],\n",
              "          [162],\n",
              "          [152],\n",
              "          ...,\n",
              "          [195],\n",
              "          [170],\n",
              "          [151]],\n",
              "  \n",
              "         [[121],\n",
              "          [116],\n",
              "          [141],\n",
              "          ...,\n",
              "          [175],\n",
              "          [177],\n",
              "          [158]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[108],\n",
              "          [107],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 72],\n",
              "          [110]],\n",
              "  \n",
              "         [[110],\n",
              "          [110],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [127]],\n",
              "  \n",
              "         [[110],\n",
              "          [110],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 12],\n",
              "          [138]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 11],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 19],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [  6]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 26],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 14],\n",
              "          [  3]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 91],\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [133],\n",
              "          [131],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [134],\n",
              "          [132],\n",
              "          [132]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [133],\n",
              "          [131],\n",
              "          [131]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 91],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 89],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [102],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 86],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [100],\n",
              "          [100],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[151],\n",
              "          [188],\n",
              "          [177],\n",
              "          ...,\n",
              "          [185],\n",
              "          [169],\n",
              "          [165]],\n",
              "  \n",
              "         [[162],\n",
              "          [183],\n",
              "          [181],\n",
              "          ...,\n",
              "          [188],\n",
              "          [171],\n",
              "          [177]],\n",
              "  \n",
              "         [[170],\n",
              "          [186],\n",
              "          [178],\n",
              "          ...,\n",
              "          [183],\n",
              "          [163],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [ 63],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [254],\n",
              "          [240],\n",
              "          [190]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 42],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [236]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 38],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [253],\n",
              "          [251],\n",
              "          [253]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 24],\n",
              "          [ 19],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 17],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 49],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [187],\n",
              "          [188],\n",
              "          [190]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 36],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [190],\n",
              "          [161],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 38],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [137],\n",
              "          [139],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 61],\n",
              "          [ 52],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 73],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 44],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 73],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 52],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 73],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[191],\n",
              "          [189],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[180],\n",
              "          [187],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 77],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[192],\n",
              "          [185],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 76],\n",
              "          [ 76]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 79],\n",
              "          [ 84],\n",
              "          [102],\n",
              "          ...,\n",
              "          [120],\n",
              "          [122],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 84],\n",
              "          [102],\n",
              "          ...,\n",
              "          [122],\n",
              "          [124],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 77],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [124],\n",
              "          [132],\n",
              "          [115]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 26],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 74],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 26],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 91],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 18],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 73],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 31],\n",
              "          [ 30],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 79],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 32],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 82],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 35],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [103],\n",
              "          [ 87]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [114],\n",
              "          [118],\n",
              "          ...,\n",
              "          [132],\n",
              "          [127],\n",
              "          [124]],\n",
              "  \n",
              "         [[103],\n",
              "          [111],\n",
              "          [115],\n",
              "          ...,\n",
              "          [131],\n",
              "          [124],\n",
              "          [121]],\n",
              "  \n",
              "         [[101],\n",
              "          [107],\n",
              "          [111],\n",
              "          ...,\n",
              "          [127],\n",
              "          [123],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 44],\n",
              "          [ 54],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 43],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 50],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 47],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 57],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 50],\n",
              "          [ 49]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [202],\n",
              "          [202],\n",
              "          ...,\n",
              "          [158],\n",
              "          [157],\n",
              "          [148]],\n",
              "  \n",
              "         [[204],\n",
              "          [204],\n",
              "          [207],\n",
              "          ...,\n",
              "          [148],\n",
              "          [154],\n",
              "          [155]],\n",
              "  \n",
              "         [[198],\n",
              "          [202],\n",
              "          [207],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 82],\n",
              "          [ 91],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 65],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 94],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 69],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 99],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 67],\n",
              "          [ 64]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 70],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 52],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[188],\n",
              "          [215],\n",
              "          [222],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 51],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[252],\n",
              "          [250],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 72],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 47],\n",
              "          [ 50],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [158],\n",
              "          [155],\n",
              "          [164]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 51],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [160],\n",
              "          [166],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 52],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [162],\n",
              "          [158],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 13],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 88],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 99],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 10],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 87],\n",
              "          [104]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 90],\n",
              "          [ 80],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 44],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 82],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 48],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 83],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 50],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [ 95],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [160],\n",
              "          [ 96],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 57],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 64],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 91],\n",
              "          [ 90]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[107],\n",
              "          [101],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [139],\n",
              "          [134],\n",
              "          [146]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 97],\n",
              "          [101],\n",
              "          ...,\n",
              "          [148],\n",
              "          [160],\n",
              "          [159]],\n",
              "  \n",
              "         [[103],\n",
              "          [112],\n",
              "          [101],\n",
              "          ...,\n",
              "          [152],\n",
              "          [158],\n",
              "          [173]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 40],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 70],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 40],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 79],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 50],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 75],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 23],\n",
              "          [ 19],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [128],\n",
              "          [126],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [128],\n",
              "          [128],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 25],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [131],\n",
              "          [130],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[216],\n",
              "          [195],\n",
              "          [222],\n",
              "          ...,\n",
              "          [139],\n",
              "          [136],\n",
              "          [164]],\n",
              "  \n",
              "         [[214],\n",
              "          [204],\n",
              "          [219],\n",
              "          ...,\n",
              "          [130],\n",
              "          [128],\n",
              "          [141]],\n",
              "  \n",
              "         [[212],\n",
              "          [205],\n",
              "          [216],\n",
              "          ...,\n",
              "          [140],\n",
              "          [ 75],\n",
              "          [ 48]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[121],\n",
              "          [175],\n",
              "          [167],\n",
              "          ...,\n",
              "          [216],\n",
              "          [234],\n",
              "          [238]],\n",
              "  \n",
              "         [[144],\n",
              "          [146],\n",
              "          [137],\n",
              "          ...,\n",
              "          [213],\n",
              "          [225],\n",
              "          [220]],\n",
              "  \n",
              "         [[178],\n",
              "          [185],\n",
              "          [170],\n",
              "          ...,\n",
              "          [222],\n",
              "          [217],\n",
              "          [237]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 98],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [166],\n",
              "          [195],\n",
              "          [223]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 58],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [192],\n",
              "          [171],\n",
              "          [141]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 63],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [144],\n",
              "          [177],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[183],\n",
              "          [131],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [173]],\n",
              "  \n",
              "         [[176],\n",
              "          [128],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [181],\n",
              "          [179],\n",
              "          [175]],\n",
              "  \n",
              "         [[178],\n",
              "          [148],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [182],\n",
              "          [179],\n",
              "          [177]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 56],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [124],\n",
              "          [121],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 43],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [121],\n",
              "          [120],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 53],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [118],\n",
              "          [117],\n",
              "          [114]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 80],\n",
              "          [ 83],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [157],\n",
              "          [155],\n",
              "          [161]],\n",
              "  \n",
              "         [[101],\n",
              "          [100],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [159],\n",
              "          [149],\n",
              "          [157]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 85],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [157],\n",
              "          [158],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [174],\n",
              "          [174],\n",
              "          ...,\n",
              "          [176],\n",
              "          [178],\n",
              "          [174]],\n",
              "  \n",
              "         [[163],\n",
              "          [166],\n",
              "          [165],\n",
              "          ...,\n",
              "          [173],\n",
              "          [168],\n",
              "          [166]],\n",
              "  \n",
              "         [[161],\n",
              "          [165],\n",
              "          [164],\n",
              "          ...,\n",
              "          [165],\n",
              "          [164],\n",
              "          [164]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[132],\n",
              "          [136],\n",
              "          [135],\n",
              "          ...,\n",
              "          [145],\n",
              "          [148],\n",
              "          [145]],\n",
              "  \n",
              "         [[132],\n",
              "          [131],\n",
              "          [132],\n",
              "          ...,\n",
              "          [126],\n",
              "          [124],\n",
              "          [132]],\n",
              "  \n",
              "         [[129],\n",
              "          [130],\n",
              "          [126],\n",
              "          ...,\n",
              "          [146],\n",
              "          [150],\n",
              "          [151]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 53],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 56],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 47],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 61],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 66],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          [ 60]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [ 83],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 94],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 54],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 99],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [105],\n",
              "          [ 84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [191],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 64],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[109],\n",
              "          [139],\n",
              "          [166],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 62],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[159],\n",
              "          [151],\n",
              "          [143],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 66],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[220],\n",
              "          [224],\n",
              "          [231],\n",
              "          ...,\n",
              "          [188],\n",
              "          [185],\n",
              "          [185]],\n",
              "  \n",
              "         [[233],\n",
              "          [240],\n",
              "          [238],\n",
              "          ...,\n",
              "          [190],\n",
              "          [190],\n",
              "          [183]],\n",
              "  \n",
              "         [[241],\n",
              "          [239],\n",
              "          [239],\n",
              "          ...,\n",
              "          [190],\n",
              "          [192],\n",
              "          [187]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[149],\n",
              "          [164],\n",
              "          [146],\n",
              "          ...,\n",
              "          [175],\n",
              "          [178],\n",
              "          [173]],\n",
              "  \n",
              "         [[144],\n",
              "          [146],\n",
              "          [142],\n",
              "          ...,\n",
              "          [173],\n",
              "          [174],\n",
              "          [169]],\n",
              "  \n",
              "         [[139],\n",
              "          [141],\n",
              "          [149],\n",
              "          ...,\n",
              "          [180],\n",
              "          [177],\n",
              "          [172]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 63],\n",
              "          [ 62],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  4],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  3],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 60],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[186],\n",
              "          [192],\n",
              "          [194],\n",
              "          ...,\n",
              "          [223],\n",
              "          [222],\n",
              "          [221]],\n",
              "  \n",
              "         [[203],\n",
              "          [199],\n",
              "          [204],\n",
              "          ...,\n",
              "          [221],\n",
              "          [229],\n",
              "          [224]],\n",
              "  \n",
              "         [[196],\n",
              "          [194],\n",
              "          [193],\n",
              "          ...,\n",
              "          [214],\n",
              "          [219],\n",
              "          [219]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[250],\n",
              "          [250],\n",
              "          [243],\n",
              "          ...,\n",
              "          [149],\n",
              "          [ 74],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[250],\n",
              "          [248],\n",
              "          [243],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 18],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[250],\n",
              "          [248],\n",
              "          [243],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 33],\n",
              "          [ 50]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[113],\n",
              "          [105],\n",
              "          [105],\n",
              "          ...,\n",
              "          [110],\n",
              "          [101],\n",
              "          [122]],\n",
              "  \n",
              "         [[142],\n",
              "          [ 99],\n",
              "          [141],\n",
              "          ...,\n",
              "          [109],\n",
              "          [101],\n",
              "          [113]],\n",
              "  \n",
              "         [[122],\n",
              "          [ 95],\n",
              "          [154],\n",
              "          ...,\n",
              "          [107],\n",
              "          [159],\n",
              "          [133]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[123],\n",
              "          [132],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 69],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[126],\n",
              "          [128],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 89],\n",
              "          [102]],\n",
              "  \n",
              "         [[127],\n",
              "          [134],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 82],\n",
              "          [104]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [106],\n",
              "          [102],\n",
              "          ...,\n",
              "          [116],\n",
              "          [118],\n",
              "          [118]],\n",
              "  \n",
              "         [[101],\n",
              "          [110],\n",
              "          [112],\n",
              "          ...,\n",
              "          [110],\n",
              "          [115],\n",
              "          [117]],\n",
              "  \n",
              "         [[104],\n",
              "          [104],\n",
              "          [113],\n",
              "          ...,\n",
              "          [101],\n",
              "          [105],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[138],\n",
              "          [168],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 49],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 69],\n",
              "          [179],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 32],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[183],\n",
              "          [130],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 62],\n",
              "          [ 74]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 58],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 63],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 53],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 56],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 51],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 57],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[135],\n",
              "          [137],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 48],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[133],\n",
              "          [137],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 64],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[105],\n",
              "          [115],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 58],\n",
              "          [ 27]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [190],\n",
              "          [219],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [124],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [198],\n",
              "          [225],\n",
              "          ...,\n",
              "          [134],\n",
              "          [107],\n",
              "          [106]],\n",
              "  \n",
              "         [[104],\n",
              "          [205],\n",
              "          [217],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 77],\n",
              "          [ 91]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  6],\n",
              "          [  6],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  6],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  6],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[115],\n",
              "          [135],\n",
              "          [140],\n",
              "          ...,\n",
              "          [146],\n",
              "          [146],\n",
              "          [146]],\n",
              "  \n",
              "         [[114],\n",
              "          [138],\n",
              "          [142],\n",
              "          ...,\n",
              "          [149],\n",
              "          [149],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [137],\n",
              "          [138],\n",
              "          ...,\n",
              "          [147],\n",
              "          [147],\n",
              "          [147]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[121],\n",
              "          [110],\n",
              "          [107],\n",
              "          ...,\n",
              "          [175],\n",
              "          [145],\n",
              "          [155]],\n",
              "  \n",
              "         [[137],\n",
              "          [137],\n",
              "          [117],\n",
              "          ...,\n",
              "          [154],\n",
              "          [159],\n",
              "          [126]],\n",
              "  \n",
              "         [[191],\n",
              "          [110],\n",
              "          [148],\n",
              "          ...,\n",
              "          [154],\n",
              "          [176],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[102],\n",
              "          [176],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [114],\n",
              "          [ 98],\n",
              "          [178]],\n",
              "  \n",
              "         [[124],\n",
              "          [128],\n",
              "          [161],\n",
              "          ...,\n",
              "          [142],\n",
              "          [111],\n",
              "          [174]],\n",
              "  \n",
              "         [[147],\n",
              "          [101],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [147],\n",
              "          [125]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[38],\n",
              "          [26],\n",
              "          [19],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[40],\n",
              "          [34],\n",
              "          [14],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[38],\n",
              "          [34],\n",
              "          [11],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 5],\n",
              "          [ 5],\n",
              "          [25],\n",
              "          ...,\n",
              "          [26],\n",
              "          [23],\n",
              "          [25]],\n",
              "  \n",
              "         [[13],\n",
              "          [12],\n",
              "          [27],\n",
              "          ...,\n",
              "          [21],\n",
              "          [23],\n",
              "          [24]],\n",
              "  \n",
              "         [[11],\n",
              "          [ 6],\n",
              "          [13],\n",
              "          ...,\n",
              "          [23],\n",
              "          [23],\n",
              "          [20]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[241],\n",
              "          [240],\n",
              "          [239],\n",
              "          ...,\n",
              "          [241],\n",
              "          [241],\n",
              "          [240]],\n",
              "  \n",
              "         [[240],\n",
              "          [239],\n",
              "          [238],\n",
              "          ...,\n",
              "          [241],\n",
              "          [242],\n",
              "          [241]],\n",
              "  \n",
              "         [[240],\n",
              "          [239],\n",
              "          [238],\n",
              "          ...,\n",
              "          [240],\n",
              "          [239],\n",
              "          [240]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[211],\n",
              "          [175],\n",
              "          [143],\n",
              "          ...,\n",
              "          [152],\n",
              "          [177],\n",
              "          [170]],\n",
              "  \n",
              "         [[200],\n",
              "          [208],\n",
              "          [206],\n",
              "          ...,\n",
              "          [179],\n",
              "          [179],\n",
              "          [130]],\n",
              "  \n",
              "         [[211],\n",
              "          [211],\n",
              "          [210],\n",
              "          ...,\n",
              "          [179],\n",
              "          [175],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[36],\n",
              "          [37],\n",
              "          [37],\n",
              "          ...,\n",
              "          [86],\n",
              "          [85],\n",
              "          [81]],\n",
              "  \n",
              "         [[37],\n",
              "          [38],\n",
              "          [38],\n",
              "          ...,\n",
              "          [87],\n",
              "          [85],\n",
              "          [85]],\n",
              "  \n",
              "         [[39],\n",
              "          [39],\n",
              "          [38],\n",
              "          ...,\n",
              "          [87],\n",
              "          [87],\n",
              "          [85]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[18],\n",
              "          [26],\n",
              "          [17],\n",
              "          ...,\n",
              "          [31],\n",
              "          [41],\n",
              "          [41]],\n",
              "  \n",
              "         [[21],\n",
              "          [28],\n",
              "          [21],\n",
              "          ...,\n",
              "          [38],\n",
              "          [41],\n",
              "          [33]],\n",
              "  \n",
              "         [[21],\n",
              "          [18],\n",
              "          [19],\n",
              "          ...,\n",
              "          [35],\n",
              "          [31],\n",
              "          [34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 77],\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [178],\n",
              "          [178],\n",
              "          [180]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 77],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [178],\n",
              "          [178],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 66],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [178],\n",
              "          [178],\n",
              "          [177]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[112],\n",
              "          [102],\n",
              "          [112],\n",
              "          ...,\n",
              "          [109],\n",
              "          [112],\n",
              "          [113]],\n",
              "  \n",
              "         [[112],\n",
              "          [105],\n",
              "          [103],\n",
              "          ...,\n",
              "          [116],\n",
              "          [120],\n",
              "          [111]],\n",
              "  \n",
              "         [[111],\n",
              "          [109],\n",
              "          [111],\n",
              "          ...,\n",
              "          [108],\n",
              "          [110],\n",
              "          [122]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  0],\n",
              "          [  0],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  2],\n",
              "          [  2]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  0],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  0]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[208],\n",
              "          [200],\n",
              "          [196],\n",
              "          ...,\n",
              "          [180],\n",
              "          [180],\n",
              "          [197]],\n",
              "  \n",
              "         [[212],\n",
              "          [208],\n",
              "          [182],\n",
              "          ...,\n",
              "          [178],\n",
              "          [172],\n",
              "          [166]],\n",
              "  \n",
              "         [[220],\n",
              "          [209],\n",
              "          [178],\n",
              "          ...,\n",
              "          [180],\n",
              "          [171],\n",
              "          [168]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 37],\n",
              "          [ 32],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 56],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 45],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 52],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 38],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 52],\n",
              "          [ 49]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [106],\n",
              "          [109],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  4]],\n",
              "  \n",
              "         [[115],\n",
              "          [109],\n",
              "          [113],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  2],\n",
              "          [  6]],\n",
              "  \n",
              "         [[104],\n",
              "          [102],\n",
              "          [101],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  5]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[119],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [144],\n",
              "          [146],\n",
              "          [147]],\n",
              "  \n",
              "         [[122],\n",
              "          [119],\n",
              "          [117],\n",
              "          ...,\n",
              "          [147],\n",
              "          [148],\n",
              "          [152]],\n",
              "  \n",
              "         [[122],\n",
              "          [120],\n",
              "          [119],\n",
              "          ...,\n",
              "          [151],\n",
              "          [152],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  9],\n",
              "          [  8],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 60],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[  5],\n",
              "          [  4],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [141],\n",
              "          [100],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [114],\n",
              "          [125],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 64],\n",
              "          [ 98],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [126],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [115],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [104],\n",
              "          [182]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 56],\n",
              "          [110],\n",
              "          ...,\n",
              "          [123],\n",
              "          [121],\n",
              "          [153]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [105],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [135],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 96],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [124],\n",
              "          [ 67],\n",
              "          [124]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 93],\n",
              "          [136],\n",
              "          ...,\n",
              "          [107],\n",
              "          [129],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 31],\n",
              "          [ 33],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 88],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 31],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 86],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 32],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 93],\n",
              "          [ 71]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [124],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 45],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [136],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 50],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [106],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 43],\n",
              "          [ 47]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 11],\n",
              "          [ 17],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [196],\n",
              "          [214],\n",
              "          [199]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 15],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [201],\n",
              "          [197],\n",
              "          [196]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 15],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [197],\n",
              "          [206],\n",
              "          [195]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 55],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [103],\n",
              "          [126],\n",
              "          [141]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 70],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [155],\n",
              "          [134],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 80],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [121],\n",
              "          [ 90],\n",
              "          [200]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 68],\n",
              "          [ 93],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [109],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 97],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [106],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 98],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [117],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 88],\n",
              "          [ 84],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [110],\n",
              "          [112],\n",
              "          [156]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 88],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [132],\n",
              "          [133],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 88],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [172],\n",
              "          [179],\n",
              "          [187]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 51],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 43],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 49],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 47],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 51],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 48],\n",
              "          [ 44]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  9],\n",
              "          [  6],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [149],\n",
              "          [153],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [  8],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [103],\n",
              "          [141],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 14],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 77],\n",
              "          [102]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[141],\n",
              "          [139],\n",
              "          [130],\n",
              "          ...,\n",
              "          [206],\n",
              "          [170],\n",
              "          [184]],\n",
              "  \n",
              "         [[119],\n",
              "          [135],\n",
              "          [126],\n",
              "          ...,\n",
              "          [189],\n",
              "          [170],\n",
              "          [178]],\n",
              "  \n",
              "         [[134],\n",
              "          [123],\n",
              "          [107],\n",
              "          ...,\n",
              "          [162],\n",
              "          [175],\n",
              "          [167]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[106],\n",
              "          [ 85],\n",
              "          [115],\n",
              "          ...,\n",
              "          [131],\n",
              "          [138],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [137],\n",
              "          [121],\n",
              "          ...,\n",
              "          [137],\n",
              "          [109],\n",
              "          [147]],\n",
              "  \n",
              "         [[105],\n",
              "          [148],\n",
              "          [137],\n",
              "          ...,\n",
              "          [136],\n",
              "          [128],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[146],\n",
              "          [177],\n",
              "          [163],\n",
              "          ...,\n",
              "          [118],\n",
              "          [158],\n",
              "          [162]],\n",
              "  \n",
              "         [[153],\n",
              "          [156],\n",
              "          [161],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 75],\n",
              "          [104]],\n",
              "  \n",
              "         [[158],\n",
              "          [163],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [105],\n",
              "          [111]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 57],\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  2],\n",
              "          [  3]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 60],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  4],\n",
              "          [  4]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 62],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  4],\n",
              "          [  2]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[192],\n",
              "          [192],\n",
              "          [191],\n",
              "          ...,\n",
              "          [134],\n",
              "          [103],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[194],\n",
              "          [193],\n",
              "          [197],\n",
              "          ...,\n",
              "          [135],\n",
              "          [ 96],\n",
              "          [105]],\n",
              "  \n",
              "         [[193],\n",
              "          [190],\n",
              "          [194],\n",
              "          ...,\n",
              "          [133],\n",
              "          [ 99],\n",
              "          [105]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  4],\n",
              "          [  5],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 12],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  4],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [  9],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  5],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [  9],\n",
              "          [ 14]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[171],\n",
              "          [167],\n",
              "          [187],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 12],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[170],\n",
              "          [180],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          [  9]],\n",
              "  \n",
              "         [[161],\n",
              "          [179],\n",
              "          [177],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [  9],\n",
              "          [  8]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 22],\n",
              "          [ 19],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 14],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 16],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 14],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 31],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[182],\n",
              "          [187],\n",
              "          [183],\n",
              "          ...,\n",
              "          [160],\n",
              "          [147],\n",
              "          [137]],\n",
              "  \n",
              "         [[188],\n",
              "          [198],\n",
              "          [208],\n",
              "          ...,\n",
              "          [164],\n",
              "          [145],\n",
              "          [132]],\n",
              "  \n",
              "         [[196],\n",
              "          [199],\n",
              "          [203],\n",
              "          ...,\n",
              "          [143],\n",
              "          [151],\n",
              "          [153]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[141],\n",
              "          [145],\n",
              "          [138],\n",
              "          ...,\n",
              "          [157],\n",
              "          [156],\n",
              "          [165]],\n",
              "  \n",
              "         [[145],\n",
              "          [135],\n",
              "          [134],\n",
              "          ...,\n",
              "          [156],\n",
              "          [157],\n",
              "          [165]],\n",
              "  \n",
              "         [[146],\n",
              "          [131],\n",
              "          [114],\n",
              "          ...,\n",
              "          [156],\n",
              "          [157],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [135],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 87],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[130],\n",
              "          [131],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 85],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[128],\n",
              "          [135],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 82],\n",
              "          [ 83]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[110],\n",
              "          [115],\n",
              "          [117],\n",
              "          ...,\n",
              "          [123],\n",
              "          [118],\n",
              "          [121]],\n",
              "  \n",
              "         [[123],\n",
              "          [122],\n",
              "          [113],\n",
              "          ...,\n",
              "          [124],\n",
              "          [121],\n",
              "          [121]],\n",
              "  \n",
              "         [[132],\n",
              "          [130],\n",
              "          [129],\n",
              "          ...,\n",
              "          [127],\n",
              "          [120],\n",
              "          [122]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[109],\n",
              "          [114],\n",
              "          [118],\n",
              "          ...,\n",
              "          [113],\n",
              "          [115],\n",
              "          [105]],\n",
              "  \n",
              "         [[113],\n",
              "          [106],\n",
              "          [127],\n",
              "          ...,\n",
              "          [130],\n",
              "          [101],\n",
              "          [120]],\n",
              "  \n",
              "         [[139],\n",
              "          [129],\n",
              "          [116],\n",
              "          ...,\n",
              "          [131],\n",
              "          [132],\n",
              "          [113]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 70],\n",
              "          [ 84],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [156],\n",
              "          [154],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 96],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [156],\n",
              "          [156],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [100],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [157],\n",
              "          [157],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [173],\n",
              "          [176],\n",
              "          [156]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 43],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [162],\n",
              "          [170],\n",
              "          [182]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 41],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [160],\n",
              "          [159],\n",
              "          [159]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[115],\n",
              "          [159],\n",
              "          [255],\n",
              "          ...,\n",
              "          [239],\n",
              "          [197],\n",
              "          [180]],\n",
              "  \n",
              "         [[115],\n",
              "          [247],\n",
              "          [253],\n",
              "          ...,\n",
              "          [176],\n",
              "          [217],\n",
              "          [154]],\n",
              "  \n",
              "         [[178],\n",
              "          [253],\n",
              "          [254],\n",
              "          ...,\n",
              "          [163],\n",
              "          [193],\n",
              "          [175]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [123],\n",
              "          [126],\n",
              "          ...,\n",
              "          [114],\n",
              "          [124],\n",
              "          [135]],\n",
              "  \n",
              "         [[136],\n",
              "          [136],\n",
              "          [133],\n",
              "          ...,\n",
              "          [128],\n",
              "          [131],\n",
              "          [122]],\n",
              "  \n",
              "         [[134],\n",
              "          [139],\n",
              "          [111],\n",
              "          ...,\n",
              "          [129],\n",
              "          [126],\n",
              "          [124]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[120],\n",
              "          [132],\n",
              "          [113],\n",
              "          ...,\n",
              "          [128],\n",
              "          [128],\n",
              "          [140]],\n",
              "  \n",
              "         [[152],\n",
              "          [146],\n",
              "          [108],\n",
              "          ...,\n",
              "          [143],\n",
              "          [126],\n",
              "          [123]],\n",
              "  \n",
              "         [[140],\n",
              "          [121],\n",
              "          [140],\n",
              "          ...,\n",
              "          [126],\n",
              "          [134],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [124],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [137],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[131],\n",
              "          [122],\n",
              "          [158],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 90],\n",
              "          [111]],\n",
              "  \n",
              "         [[132],\n",
              "          [102],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 95],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[242],\n",
              "          [244],\n",
              "          [244],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[244],\n",
              "          [243],\n",
              "          [240],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[244],\n",
              "          [240],\n",
              "          [228],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [ 66],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [213],\n",
              "          [206],\n",
              "          [243]],\n",
              "  \n",
              "         [[151],\n",
              "          [101],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [251],\n",
              "          [210],\n",
              "          [237]],\n",
              "  \n",
              "         [[132],\n",
              "          [177],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [246],\n",
              "          [214],\n",
              "          [214]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 63],\n",
              "          [ 73],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 60],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 73],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 82],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 73],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 58],\n",
              "          [ 86]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [114],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [117],\n",
              "          [109],\n",
              "          [117]],\n",
              "  \n",
              "         [[142],\n",
              "          [114],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [121],\n",
              "          [113],\n",
              "          [122]],\n",
              "  \n",
              "         [[143],\n",
              "          [110],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [124],\n",
              "          [116],\n",
              "          [126]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[164],\n",
              "          [164],\n",
              "          [163],\n",
              "          ...,\n",
              "          [159],\n",
              "          [158],\n",
              "          [160]],\n",
              "  \n",
              "         [[164],\n",
              "          [167],\n",
              "          [165],\n",
              "          ...,\n",
              "          [159],\n",
              "          [159],\n",
              "          [161]],\n",
              "  \n",
              "         [[165],\n",
              "          [166],\n",
              "          [166],\n",
              "          ...,\n",
              "          [159],\n",
              "          [159],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[133],\n",
              "          [135],\n",
              "          [132],\n",
              "          ...,\n",
              "          [144],\n",
              "          [145],\n",
              "          [145]],\n",
              "  \n",
              "         [[134],\n",
              "          [134],\n",
              "          [135],\n",
              "          ...,\n",
              "          [144],\n",
              "          [145],\n",
              "          [145]],\n",
              "  \n",
              "         [[135],\n",
              "          [136],\n",
              "          [136],\n",
              "          ...,\n",
              "          [145],\n",
              "          [145],\n",
              "          [144]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[21],\n",
              "          [23],\n",
              "          [23],\n",
              "          ...,\n",
              "          [60],\n",
              "          [59],\n",
              "          [58]],\n",
              "  \n",
              "         [[24],\n",
              "          [23],\n",
              "          [23],\n",
              "          ...,\n",
              "          [61],\n",
              "          [60],\n",
              "          [62]],\n",
              "  \n",
              "         [[23],\n",
              "          [24],\n",
              "          [24],\n",
              "          ...,\n",
              "          [61],\n",
              "          [61],\n",
              "          [68]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 5],\n",
              "          [ 3]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 1],\n",
              "          [ 2],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 4],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 4],\n",
              "          [ 6]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 75],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[250],\n",
              "          [251],\n",
              "          [250],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 77],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[247],\n",
              "          [248],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 77],\n",
              "          [ 76]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[144],\n",
              "          [146],\n",
              "          [145],\n",
              "          ...,\n",
              "          [184],\n",
              "          [185],\n",
              "          [190]],\n",
              "  \n",
              "         [[143],\n",
              "          [146],\n",
              "          [146],\n",
              "          ...,\n",
              "          [200],\n",
              "          [195],\n",
              "          [203]],\n",
              "  \n",
              "         [[143],\n",
              "          [146],\n",
              "          [146],\n",
              "          ...,\n",
              "          [195],\n",
              "          [199],\n",
              "          [207]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[117],\n",
              "          [123],\n",
              "          [125],\n",
              "          ...,\n",
              "          [126],\n",
              "          [126],\n",
              "          [123]],\n",
              "  \n",
              "         [[120],\n",
              "          [123],\n",
              "          [125],\n",
              "          ...,\n",
              "          [126],\n",
              "          [126],\n",
              "          [124]],\n",
              "  \n",
              "         [[120],\n",
              "          [124],\n",
              "          [126],\n",
              "          ...,\n",
              "          [126],\n",
              "          [126],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[183],\n",
              "          [188],\n",
              "          [198],\n",
              "          ...,\n",
              "          [220],\n",
              "          [221],\n",
              "          [220]],\n",
              "  \n",
              "         [[184],\n",
              "          [191],\n",
              "          [188],\n",
              "          ...,\n",
              "          [222],\n",
              "          [221],\n",
              "          [220]],\n",
              "  \n",
              "         [[187],\n",
              "          [194],\n",
              "          [200],\n",
              "          ...,\n",
              "          [222],\n",
              "          [221],\n",
              "          [219]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[149],\n",
              "          [235],\n",
              "          [147],\n",
              "          ...,\n",
              "          [145],\n",
              "          [135],\n",
              "          [129]],\n",
              "  \n",
              "         [[150],\n",
              "          [234],\n",
              "          [158],\n",
              "          ...,\n",
              "          [139],\n",
              "          [133],\n",
              "          [139]],\n",
              "  \n",
              "         [[145],\n",
              "          [230],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [100],\n",
              "          [ 95]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 92],\n",
              "          [124],\n",
              "          ...,\n",
              "          [162],\n",
              "          [161],\n",
              "          [166]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [116],\n",
              "          [140],\n",
              "          ...,\n",
              "          [168],\n",
              "          [168],\n",
              "          [169]],\n",
              "  \n",
              "         [[110],\n",
              "          [126],\n",
              "          [148],\n",
              "          ...,\n",
              "          [153],\n",
              "          [159],\n",
              "          [161]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[56],\n",
              "          [55],\n",
              "          [61],\n",
              "          ...,\n",
              "          [57],\n",
              "          [51],\n",
              "          [63]],\n",
              "  \n",
              "         [[59],\n",
              "          [58],\n",
              "          [61],\n",
              "          ...,\n",
              "          [59],\n",
              "          [54],\n",
              "          [54]],\n",
              "  \n",
              "         [[61],\n",
              "          [60],\n",
              "          [61],\n",
              "          ...,\n",
              "          [60],\n",
              "          [61],\n",
              "          [54]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[50],\n",
              "          [58],\n",
              "          [60],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 1],\n",
              "          [ 0]],\n",
              "  \n",
              "         [[49],\n",
              "          [54],\n",
              "          [57],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[46],\n",
              "          [49],\n",
              "          [54],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 0],\n",
              "          [ 0]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 55],\n",
              "          [ 55],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 60],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 63],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 62],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 65],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 60],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [140],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 56],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[149],\n",
              "          [151],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 53],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[148],\n",
              "          [148],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 62],\n",
              "          [ 60]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[21],\n",
              "          [21],\n",
              "          [21],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[21],\n",
              "          [21],\n",
              "          [21],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 2],\n",
              "          [ 6]],\n",
              "  \n",
              "         [[21],\n",
              "          [21],\n",
              "          [21],\n",
              "          ...,\n",
              "          [11],\n",
              "          [ 4],\n",
              "          [ 0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[21],\n",
              "          [20],\n",
              "          [20],\n",
              "          ...,\n",
              "          [11],\n",
              "          [13],\n",
              "          [15]],\n",
              "  \n",
              "         [[17],\n",
              "          [22],\n",
              "          [22],\n",
              "          ...,\n",
              "          [15],\n",
              "          [15],\n",
              "          [13]],\n",
              "  \n",
              "         [[17],\n",
              "          [22],\n",
              "          [22],\n",
              "          ...,\n",
              "          [15],\n",
              "          [15],\n",
              "          [13]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [119],\n",
              "          [177],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 97],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[137],\n",
              "          [121],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 93],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[105],\n",
              "          [145],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 90],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [ 78],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [123],\n",
              "          [108]],\n",
              "  \n",
              "         [[117],\n",
              "          [ 94],\n",
              "          [105],\n",
              "          ...,\n",
              "          [116],\n",
              "          [101],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [136],\n",
              "          [110],\n",
              "          ...,\n",
              "          [122],\n",
              "          [ 80],\n",
              "          [118]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[216],\n",
              "          [217],\n",
              "          [214],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 21],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[215],\n",
              "          [221],\n",
              "          [220],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 24],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[219],\n",
              "          [220],\n",
              "          [215],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 23],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[204],\n",
              "          [196],\n",
              "          [206],\n",
              "          ...,\n",
              "          [183],\n",
              "          [184],\n",
              "          [187]],\n",
              "  \n",
              "         [[203],\n",
              "          [198],\n",
              "          [210],\n",
              "          ...,\n",
              "          [194],\n",
              "          [174],\n",
              "          [160]],\n",
              "  \n",
              "         [[193],\n",
              "          [200],\n",
              "          [185],\n",
              "          ...,\n",
              "          [194],\n",
              "          [177],\n",
              "          [193]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[39],\n",
              "          [48],\n",
              "          [52],\n",
              "          ...,\n",
              "          [25],\n",
              "          [21],\n",
              "          [14]],\n",
              "  \n",
              "         [[28],\n",
              "          [46],\n",
              "          [53],\n",
              "          ...,\n",
              "          [10],\n",
              "          [13],\n",
              "          [12]],\n",
              "  \n",
              "         [[30],\n",
              "          [43],\n",
              "          [46],\n",
              "          ...,\n",
              "          [68],\n",
              "          [13],\n",
              "          [11]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[21],\n",
              "          [19],\n",
              "          [45],\n",
              "          ...,\n",
              "          [19],\n",
              "          [20],\n",
              "          [20]],\n",
              "  \n",
              "         [[24],\n",
              "          [19],\n",
              "          [43],\n",
              "          ...,\n",
              "          [19],\n",
              "          [19],\n",
              "          [20]],\n",
              "  \n",
              "         [[18],\n",
              "          [22],\n",
              "          [40],\n",
              "          ...,\n",
              "          [19],\n",
              "          [18],\n",
              "          [23]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 49],\n",
              "          [ 27],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [253],\n",
              "          [250],\n",
              "          [246]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 39],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [249],\n",
              "          [250],\n",
              "          [250]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 40],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [244],\n",
              "          [244],\n",
              "          [241]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[239],\n",
              "          [254],\n",
              "          [253],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 39],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[229],\n",
              "          [253],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 43],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[218],\n",
              "          [250],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[130],\n",
              "          [133],\n",
              "          [117],\n",
              "          ...,\n",
              "          [163],\n",
              "          [166],\n",
              "          [173]],\n",
              "  \n",
              "         [[117],\n",
              "          [141],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [142],\n",
              "          [170]],\n",
              "  \n",
              "         [[118],\n",
              "          [135],\n",
              "          [126],\n",
              "          ...,\n",
              "          [141],\n",
              "          [ 94],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 90],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [102],\n",
              "          [108],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 88],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [109],\n",
              "          [ 99],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[111],\n",
              "          [ 91],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [133],\n",
              "          [114],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[122],\n",
              "          [125],\n",
              "          [128],\n",
              "          ...,\n",
              "          [122],\n",
              "          [120],\n",
              "          [117]],\n",
              "  \n",
              "         [[124],\n",
              "          [127],\n",
              "          [129],\n",
              "          ...,\n",
              "          [124],\n",
              "          [122],\n",
              "          [119]],\n",
              "  \n",
              "         [[125],\n",
              "          [128],\n",
              "          [130],\n",
              "          ...,\n",
              "          [123],\n",
              "          [122],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[162],\n",
              "          [155],\n",
              "          [139],\n",
              "          ...,\n",
              "          [116],\n",
              "          [115],\n",
              "          [112]],\n",
              "  \n",
              "         [[157],\n",
              "          [147],\n",
              "          [132],\n",
              "          ...,\n",
              "          [110],\n",
              "          [111],\n",
              "          [108]],\n",
              "  \n",
              "         [[153],\n",
              "          [144],\n",
              "          [127],\n",
              "          ...,\n",
              "          [105],\n",
              "          [104],\n",
              "          [102]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[115],\n",
              "          [131],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 44],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[122],\n",
              "          [129],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [100],\n",
              "          [103]],\n",
              "  \n",
              "         [[119],\n",
              "          [128],\n",
              "          [114],\n",
              "          ...,\n",
              "          [190],\n",
              "          [117],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[250],\n",
              "          [250],\n",
              "          [250],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 80],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[247],\n",
              "          [250],\n",
              "          [250],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 77],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[248],\n",
              "          [248],\n",
              "          [248],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 66],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 41],\n",
              "          [ 40],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [112],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 53],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [115],\n",
              "          [109],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 47],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [119],\n",
              "          [112],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  2],\n",
              "          [  8],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 60],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  5],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 63],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[  5],\n",
              "          [  5],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 64],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 40],\n",
              "          [ 38],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [211],\n",
              "          [215],\n",
              "          [195]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 37],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [209],\n",
              "          [212],\n",
              "          [169]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 44],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [211],\n",
              "          [213],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 31],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 65],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 34],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 59],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 32],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 46],\n",
              "          [ 64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 38],\n",
              "          [ 42],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 46],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 51],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 46],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 60],\n",
              "          [ 67]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 68],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 61],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 71],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 77],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 62],\n",
              "          [ 55]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 89],\n",
              "          [ 99],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 39],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[103],\n",
              "          [109],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 37],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [101],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 46],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 53],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 71],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 60],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 67],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 62],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 66],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 90],\n",
              "          [ 41],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 67],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 23],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 66],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 13],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [106],\n",
              "          [ 94],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[203],\n",
              "          [177],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 65],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[194],\n",
              "          [169],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 41],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[195],\n",
              "          [191],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 52],\n",
              "          [ 55]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 21],\n",
              "          [ 25],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [125],\n",
              "          [108],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 33],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [123],\n",
              "          [ 96],\n",
              "          [108]],\n",
              "  \n",
              "         [[129],\n",
              "          [ 36],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [101],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[119],\n",
              "          [119],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [169],\n",
              "          [171],\n",
              "          [161]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 84],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [180],\n",
              "          [172],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 75],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [175],\n",
              "          [167],\n",
              "          [151]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[127],\n",
              "          [137],\n",
              "          [181],\n",
              "          ...,\n",
              "          [171],\n",
              "          [ 83],\n",
              "          [210]],\n",
              "  \n",
              "         [[143],\n",
              "          [152],\n",
              "          [129],\n",
              "          ...,\n",
              "          [191],\n",
              "          [201],\n",
              "          [207]],\n",
              "  \n",
              "         [[138],\n",
              "          [120],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [133],\n",
              "          [178],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [124],\n",
              "          [140],\n",
              "          ...,\n",
              "          [163],\n",
              "          [167],\n",
              "          [116]],\n",
              "  \n",
              "         [[145],\n",
              "          [125],\n",
              "          [125],\n",
              "          ...,\n",
              "          [131],\n",
              "          [132],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [119],\n",
              "          [103],\n",
              "          ...,\n",
              "          [117],\n",
              "          [117],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 78],\n",
              "          [ 81],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [114],\n",
              "          [115],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [  9],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [116],\n",
              "          [116],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 97],\n",
              "          [102]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[154],\n",
              "          [151],\n",
              "          [154],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[151],\n",
              "          [149],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 61],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[151],\n",
              "          [150],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 63],\n",
              "          [ 66]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[77],\n",
              "          [80],\n",
              "          [83],\n",
              "          ...,\n",
              "          [87],\n",
              "          [91],\n",
              "          [90]],\n",
              "  \n",
              "         [[81],\n",
              "          [83],\n",
              "          [87],\n",
              "          ...,\n",
              "          [88],\n",
              "          [89],\n",
              "          [91]],\n",
              "  \n",
              "         [[83],\n",
              "          [85],\n",
              "          [90],\n",
              "          ...,\n",
              "          [92],\n",
              "          [94],\n",
              "          [92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[15],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [ 8],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[15],\n",
              "          [18],\n",
              "          [18],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[10],\n",
              "          [ 9],\n",
              "          [ 9],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 6],\n",
              "          [ 6]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[105],\n",
              "          [109],\n",
              "          [104],\n",
              "          ...,\n",
              "          [129],\n",
              "          [116],\n",
              "          [126]],\n",
              "  \n",
              "         [[106],\n",
              "          [133],\n",
              "          [119],\n",
              "          ...,\n",
              "          [100],\n",
              "          [108],\n",
              "          [125]],\n",
              "  \n",
              "         [[124],\n",
              "          [102],\n",
              "          [117],\n",
              "          ...,\n",
              "          [103],\n",
              "          [111],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[151],\n",
              "          [161],\n",
              "          [170],\n",
              "          ...,\n",
              "          [119],\n",
              "          [124],\n",
              "          [119]],\n",
              "  \n",
              "         [[172],\n",
              "          [161],\n",
              "          [182],\n",
              "          ...,\n",
              "          [125],\n",
              "          [121],\n",
              "          [119]],\n",
              "  \n",
              "         [[164],\n",
              "          [202],\n",
              "          [173],\n",
              "          ...,\n",
              "          [123],\n",
              "          [116],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[250],\n",
              "          [242],\n",
              "          [147],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 95],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[192],\n",
              "          [159],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [103],\n",
              "          [106],\n",
              "          [108]],\n",
              "  \n",
              "         [[107],\n",
              "          [117],\n",
              "          [127],\n",
              "          ...,\n",
              "          [106],\n",
              "          [107],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [154],\n",
              "          [166],\n",
              "          ...,\n",
              "          [225],\n",
              "          [200],\n",
              "          [231]],\n",
              "  \n",
              "         [[146],\n",
              "          [150],\n",
              "          [155],\n",
              "          ...,\n",
              "          [176],\n",
              "          [179],\n",
              "          [186]],\n",
              "  \n",
              "         [[144],\n",
              "          [144],\n",
              "          [145],\n",
              "          ...,\n",
              "          [157],\n",
              "          [148],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[169],\n",
              "          [160],\n",
              "          [143],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 94],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[168],\n",
              "          [162],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 94],\n",
              "          [103]],\n",
              "  \n",
              "         [[162],\n",
              "          [154],\n",
              "          [150],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 97],\n",
              "          [ 80]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 23],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [158],\n",
              "          [163],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 23],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [152],\n",
              "          [178],\n",
              "          [150]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 34],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [143],\n",
              "          [172],\n",
              "          [182]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[161],\n",
              "          [160],\n",
              "          [163],\n",
              "          ...,\n",
              "          [169],\n",
              "          [169],\n",
              "          [168]],\n",
              "  \n",
              "         [[162],\n",
              "          [162],\n",
              "          [164],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [169]],\n",
              "  \n",
              "         [[164],\n",
              "          [164],\n",
              "          [166],\n",
              "          ...,\n",
              "          [172],\n",
              "          [171],\n",
              "          [171]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [116],\n",
              "          [113],\n",
              "          ...,\n",
              "          [121],\n",
              "          [110],\n",
              "          [102]],\n",
              "  \n",
              "         [[102],\n",
              "          [118],\n",
              "          [112],\n",
              "          ...,\n",
              "          [116],\n",
              "          [103],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[103],\n",
              "          [115],\n",
              "          [108],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 96],\n",
              "          [ 75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[200],\n",
              "          [178],\n",
              "          [193],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  6]],\n",
              "  \n",
              "         [[214],\n",
              "          [183],\n",
              "          [211],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  6]],\n",
              "  \n",
              "         [[178],\n",
              "          [173],\n",
              "          [172],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [145],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 74],\n",
              "          [113]],\n",
              "  \n",
              "         [[150],\n",
              "          [148],\n",
              "          [163],\n",
              "          ...,\n",
              "          [112],\n",
              "          [ 78],\n",
              "          [101]],\n",
              "  \n",
              "         [[160],\n",
              "          [138],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [106],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[141],\n",
              "          [ 98],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 52],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 33],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 18],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 16],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 20],\n",
              "          [ 67]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  8],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [203],\n",
              "          [198],\n",
              "          [188]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  7],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [182],\n",
              "          [188],\n",
              "          [184]],\n",
              "  \n",
              "         [[  9],\n",
              "          [  7],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [192],\n",
              "          [177],\n",
              "          [187]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[73],\n",
              "          [85],\n",
              "          [76],\n",
              "          ...,\n",
              "          [82],\n",
              "          [82],\n",
              "          [81]],\n",
              "  \n",
              "         [[33],\n",
              "          [33],\n",
              "          [43],\n",
              "          ...,\n",
              "          [83],\n",
              "          [83],\n",
              "          [84]],\n",
              "  \n",
              "         [[25],\n",
              "          [26],\n",
              "          [24],\n",
              "          ...,\n",
              "          [81],\n",
              "          [82],\n",
              "          [84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[77],\n",
              "          [90],\n",
              "          [88],\n",
              "          ...,\n",
              "          [73],\n",
              "          [78],\n",
              "          [77]],\n",
              "  \n",
              "         [[85],\n",
              "          [88],\n",
              "          [74],\n",
              "          ...,\n",
              "          [75],\n",
              "          [75],\n",
              "          [74]],\n",
              "  \n",
              "         [[80],\n",
              "          [84],\n",
              "          [78],\n",
              "          ...,\n",
              "          [74],\n",
              "          [75],\n",
              "          [78]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[161],\n",
              "          [185],\n",
              "          [227],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 51],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[181],\n",
              "          [157],\n",
              "          [176],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 49],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[193],\n",
              "          [148],\n",
              "          [186],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 42],\n",
              "          [ 26]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[233],\n",
              "          [250],\n",
              "          [240],\n",
              "          ...,\n",
              "          [253],\n",
              "          [252],\n",
              "          [253]],\n",
              "  \n",
              "         [[249],\n",
              "          [248],\n",
              "          [236],\n",
              "          ...,\n",
              "          [254],\n",
              "          [251],\n",
              "          [255]],\n",
              "  \n",
              "         [[235],\n",
              "          [251],\n",
              "          [238],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 69],\n",
              "          [ 98],\n",
              "          [150],\n",
              "          ...,\n",
              "          [136],\n",
              "          [139],\n",
              "          [135]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 94],\n",
              "          [149],\n",
              "          ...,\n",
              "          [133],\n",
              "          [135],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 91],\n",
              "          [158],\n",
              "          ...,\n",
              "          [131],\n",
              "          [133],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 10],\n",
              "          [  8],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [199],\n",
              "          [198],\n",
              "          [192]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  9],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [203],\n",
              "          [202],\n",
              "          [192]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  8],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [195],\n",
              "          [196],\n",
              "          [195]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 86],\n",
              "          [ 28],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 14],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 37],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 46],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          [ 13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 45],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 71],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 52],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 74],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 32],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 73],\n",
              "          [ 74]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[155],\n",
              "          [134],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 48],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[152],\n",
              "          [130],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 68],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[142],\n",
              "          [124],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 66],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[245],\n",
              "          [250],\n",
              "          [250],\n",
              "          ...,\n",
              "          [182],\n",
              "          [186],\n",
              "          [188]],\n",
              "  \n",
              "         [[251],\n",
              "          [251],\n",
              "          [247],\n",
              "          ...,\n",
              "          [183],\n",
              "          [187],\n",
              "          [183]],\n",
              "  \n",
              "         [[250],\n",
              "          [251],\n",
              "          [248],\n",
              "          ...,\n",
              "          [182],\n",
              "          [178],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[113],\n",
              "          [161],\n",
              "          [184],\n",
              "          ...,\n",
              "          [242],\n",
              "          [242],\n",
              "          [241]],\n",
              "  \n",
              "         [[121],\n",
              "          [164],\n",
              "          [178],\n",
              "          ...,\n",
              "          [242],\n",
              "          [241],\n",
              "          [241]],\n",
              "  \n",
              "         [[132],\n",
              "          [167],\n",
              "          [171],\n",
              "          ...,\n",
              "          [242],\n",
              "          [241],\n",
              "          [241]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[241],\n",
              "          [240],\n",
              "          [240],\n",
              "          ...,\n",
              "          [241],\n",
              "          [241],\n",
              "          [241]],\n",
              "  \n",
              "         [[242],\n",
              "          [241],\n",
              "          [241],\n",
              "          ...,\n",
              "          [241],\n",
              "          [241],\n",
              "          [241]],\n",
              "  \n",
              "         [[242],\n",
              "          [241],\n",
              "          [241],\n",
              "          ...,\n",
              "          [242],\n",
              "          [241],\n",
              "          [241]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[122],\n",
              "          [172],\n",
              "          [161],\n",
              "          ...,\n",
              "          [110],\n",
              "          [102],\n",
              "          [199]],\n",
              "  \n",
              "         [[150],\n",
              "          [154],\n",
              "          [148],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [152],\n",
              "          [223]],\n",
              "  \n",
              "         [[147],\n",
              "          [132],\n",
              "          [148],\n",
              "          ...,\n",
              "          [105],\n",
              "          [169],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[100],\n",
              "          [ 65],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [132],\n",
              "          [127],\n",
              "          [132]],\n",
              "  \n",
              "         [[103],\n",
              "          [ 56],\n",
              "          [121],\n",
              "          ...,\n",
              "          [130],\n",
              "          [125],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 98],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [132],\n",
              "          [131],\n",
              "          [126]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[166],\n",
              "          [172],\n",
              "          [176],\n",
              "          ...,\n",
              "          [135],\n",
              "          [133],\n",
              "          [123]],\n",
              "  \n",
              "         [[169],\n",
              "          [174],\n",
              "          [179],\n",
              "          ...,\n",
              "          [141],\n",
              "          [132],\n",
              "          [129]],\n",
              "  \n",
              "         [[175],\n",
              "          [176],\n",
              "          [178],\n",
              "          ...,\n",
              "          [142],\n",
              "          [140],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[242],\n",
              "          [241],\n",
              "          [242],\n",
              "          ...,\n",
              "          [117],\n",
              "          [111],\n",
              "          [101]],\n",
              "  \n",
              "         [[240],\n",
              "          [241],\n",
              "          [240],\n",
              "          ...,\n",
              "          [118],\n",
              "          [112],\n",
              "          [102]],\n",
              "  \n",
              "         [[232],\n",
              "          [235],\n",
              "          [241],\n",
              "          ...,\n",
              "          [119],\n",
              "          [111],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  6],\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 12],\n",
              "          [  8]],\n",
              "  \n",
              "         [[  9],\n",
              "          [ 18],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 25],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 21],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  8],\n",
              "          [ 24]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 89],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [129],\n",
              "          [132],\n",
              "          [127]],\n",
              "  \n",
              "         [[111],\n",
              "          [ 98],\n",
              "          [102],\n",
              "          ...,\n",
              "          [122],\n",
              "          [129],\n",
              "          [125]],\n",
              "  \n",
              "         [[119],\n",
              "          [128],\n",
              "          [116],\n",
              "          ...,\n",
              "          [127],\n",
              "          [139],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[12],\n",
              "          [13],\n",
              "          [16],\n",
              "          ...,\n",
              "          [10],\n",
              "          [ 9],\n",
              "          [ 8]],\n",
              "  \n",
              "         [[14],\n",
              "          [15],\n",
              "          [16],\n",
              "          ...,\n",
              "          [12],\n",
              "          [11],\n",
              "          [ 8]],\n",
              "  \n",
              "         [[14],\n",
              "          [17],\n",
              "          [16],\n",
              "          ...,\n",
              "          [11],\n",
              "          [11],\n",
              "          [10]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[35],\n",
              "          [38],\n",
              "          [40],\n",
              "          ...,\n",
              "          [17],\n",
              "          [17],\n",
              "          [16]],\n",
              "  \n",
              "         [[33],\n",
              "          [36],\n",
              "          [38],\n",
              "          ...,\n",
              "          [21],\n",
              "          [15],\n",
              "          [15]],\n",
              "  \n",
              "         [[29],\n",
              "          [34],\n",
              "          [38],\n",
              "          ...,\n",
              "          [26],\n",
              "          [21],\n",
              "          [13]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[126],\n",
              "          [131],\n",
              "          [135],\n",
              "          ...,\n",
              "          [141],\n",
              "          [138],\n",
              "          [134]],\n",
              "  \n",
              "         [[132],\n",
              "          [133],\n",
              "          [138],\n",
              "          ...,\n",
              "          [145],\n",
              "          [141],\n",
              "          [138]],\n",
              "  \n",
              "         [[133],\n",
              "          [138],\n",
              "          [140],\n",
              "          ...,\n",
              "          [146],\n",
              "          [143],\n",
              "          [140]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 46],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[100],\n",
              "          [102],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 42],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 98],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 34],\n",
              "          [ 47]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 35],\n",
              "          [ 54],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 77],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 71],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [121],\n",
              "          [ 76],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 61],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 56],\n",
              "          [ 65]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [141],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [148],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[116],\n",
              "          [108],\n",
              "          [102],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [122],\n",
              "          [144]],\n",
              "  \n",
              "         [[152],\n",
              "          [153],\n",
              "          [102],\n",
              "          ...,\n",
              "          [126],\n",
              "          [ 52],\n",
              "          [105]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[122],\n",
              "          [120],\n",
              "          [117],\n",
              "          ...,\n",
              "          [110],\n",
              "          [119],\n",
              "          [111]],\n",
              "  \n",
              "         [[120],\n",
              "          [122],\n",
              "          [117],\n",
              "          ...,\n",
              "          [112],\n",
              "          [116],\n",
              "          [108]],\n",
              "  \n",
              "         [[120],\n",
              "          [121],\n",
              "          [117],\n",
              "          ...,\n",
              "          [114],\n",
              "          [119],\n",
              "          [111]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[142],\n",
              "          [125],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[148],\n",
              "          [134],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 28],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[141],\n",
              "          [142],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 31],\n",
              "          [ 29]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 12],\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 75],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 39],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 94],\n",
              "          [ 98]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 19],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 26],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 33],\n",
              "          [ 21]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 78],\n",
              "          [ 75],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 75],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 71],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 68],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 68],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [205],\n",
              "          [208],\n",
              "          ...,\n",
              "          [218],\n",
              "          [220],\n",
              "          [222]],\n",
              "  \n",
              "         [[198],\n",
              "          [201],\n",
              "          [199],\n",
              "          ...,\n",
              "          [216],\n",
              "          [215],\n",
              "          [217]],\n",
              "  \n",
              "         [[196],\n",
              "          [196],\n",
              "          [199],\n",
              "          ...,\n",
              "          [214],\n",
              "          [215],\n",
              "          [218]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 54],\n",
              "          [ 67],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 16],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 54],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 10],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 64],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 29],\n",
              "          [ 39]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[176],\n",
              "          [165],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 85],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[179],\n",
              "          [158],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 84],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[170],\n",
              "          [161],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 78],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 79],\n",
              "          [ 88],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [176],\n",
              "          [171],\n",
              "          [175]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 71],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [183],\n",
              "          [176],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 76],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [181],\n",
              "          [154],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[233],\n",
              "          [234],\n",
              "          [239],\n",
              "          ...,\n",
              "          [182],\n",
              "          [139],\n",
              "          [128]],\n",
              "  \n",
              "         [[222],\n",
              "          [235],\n",
              "          [238],\n",
              "          ...,\n",
              "          [198],\n",
              "          [190],\n",
              "          [149]],\n",
              "  \n",
              "         [[234],\n",
              "          [228],\n",
              "          [228],\n",
              "          ...,\n",
              "          [204],\n",
              "          [199],\n",
              "          [195]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[169],\n",
              "          [123],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 25],\n",
              "          [115]],\n",
              "  \n",
              "         [[115],\n",
              "          [136],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          [138]],\n",
              "  \n",
              "         [[127],\n",
              "          [126],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 48],\n",
              "          [132]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 70],\n",
              "          [104],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 64],\n",
              "          [115]],\n",
              "  \n",
              "         [[115],\n",
              "          [ 61],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 70],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[110],\n",
              "          [114],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 61],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[39],\n",
              "          [40],\n",
              "          [43],\n",
              "          ...,\n",
              "          [48],\n",
              "          [46],\n",
              "          [44]],\n",
              "  \n",
              "         [[40],\n",
              "          [36],\n",
              "          [39],\n",
              "          ...,\n",
              "          [48],\n",
              "          [43],\n",
              "          [42]],\n",
              "  \n",
              "         [[42],\n",
              "          [35],\n",
              "          [36],\n",
              "          ...,\n",
              "          [46],\n",
              "          [44],\n",
              "          [43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[79],\n",
              "          [80],\n",
              "          [76],\n",
              "          ...,\n",
              "          [91],\n",
              "          [88],\n",
              "          [74]],\n",
              "  \n",
              "         [[80],\n",
              "          [80],\n",
              "          [75],\n",
              "          ...,\n",
              "          [57],\n",
              "          [54],\n",
              "          [59]],\n",
              "  \n",
              "         [[87],\n",
              "          [80],\n",
              "          [71],\n",
              "          ...,\n",
              "          [71],\n",
              "          [66],\n",
              "          [62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[167],\n",
              "          [167],\n",
              "          [168],\n",
              "          ...,\n",
              "          [148],\n",
              "          [163],\n",
              "          [151]],\n",
              "  \n",
              "         [[167],\n",
              "          [162],\n",
              "          [166],\n",
              "          ...,\n",
              "          [167],\n",
              "          [158],\n",
              "          [157]],\n",
              "  \n",
              "         [[168],\n",
              "          [167],\n",
              "          [154],\n",
              "          ...,\n",
              "          [146],\n",
              "          [149],\n",
              "          [150]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[163],\n",
              "          [166],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[133],\n",
              "          [124],\n",
              "          [132],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 32],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[174],\n",
              "          [171],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 33],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  2],\n",
              "          [  6],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [126],\n",
              "          [122],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [  9],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [126],\n",
              "          [126],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 15],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [127],\n",
              "          [129],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  1],\n",
              "          [  5],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 16],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  5],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 16],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  7],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 16],\n",
              "          [ 15]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 65],\n",
              "          [ 46],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [195],\n",
              "          [183],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 83],\n",
              "          [114],\n",
              "          ...,\n",
              "          [190],\n",
              "          [171],\n",
              "          [170]],\n",
              "  \n",
              "         [[125],\n",
              "          [126],\n",
              "          [120],\n",
              "          ...,\n",
              "          [178],\n",
              "          [174],\n",
              "          [176]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 42],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [204],\n",
              "          [183],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 49],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [159],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 44],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [150],\n",
              "          [ 98],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 35],\n",
              "          [ 36],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 18],\n",
              "          [  9]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 15],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 10],\n",
              "          [  5]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 22],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 31],\n",
              "          [ 10]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[160],\n",
              "          [168],\n",
              "          [176],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 52],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[156],\n",
              "          [164],\n",
              "          [164],\n",
              "          ...,\n",
              "          [140],\n",
              "          [125],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[128],\n",
              "          [155],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [106],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[67],\n",
              "          [67],\n",
              "          [68],\n",
              "          ...,\n",
              "          [71],\n",
              "          [70],\n",
              "          [70]],\n",
              "  \n",
              "         [[69],\n",
              "          [70],\n",
              "          [70],\n",
              "          ...,\n",
              "          [75],\n",
              "          [73],\n",
              "          [72]],\n",
              "  \n",
              "         [[71],\n",
              "          [72],\n",
              "          [72],\n",
              "          ...,\n",
              "          [76],\n",
              "          [75],\n",
              "          [73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[56],\n",
              "          [55],\n",
              "          [51],\n",
              "          ...,\n",
              "          [55],\n",
              "          [53],\n",
              "          [47]],\n",
              "  \n",
              "         [[58],\n",
              "          [55],\n",
              "          [56],\n",
              "          ...,\n",
              "          [49],\n",
              "          [50],\n",
              "          [48]],\n",
              "  \n",
              "         [[46],\n",
              "          [44],\n",
              "          [44],\n",
              "          ...,\n",
              "          [50],\n",
              "          [50],\n",
              "          [44]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [206],\n",
              "          [195],\n",
              "          [135]],\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [206],\n",
              "          [199],\n",
              "          [145]],\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [205],\n",
              "          [200],\n",
              "          [153]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[228],\n",
              "          [247],\n",
              "          [252],\n",
              "          ...,\n",
              "          [239],\n",
              "          [227],\n",
              "          [210]],\n",
              "  \n",
              "         [[244],\n",
              "          [244],\n",
              "          [251],\n",
              "          ...,\n",
              "          [237],\n",
              "          [234],\n",
              "          [231]],\n",
              "  \n",
              "         [[231],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [231],\n",
              "          [235],\n",
              "          [221]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[233],\n",
              "          [237],\n",
              "          [200],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 93],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 89],\n",
              "          [193],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 93],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 87],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 86],\n",
              "          [ 88]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[113],\n",
              "          [112],\n",
              "          [114],\n",
              "          ...,\n",
              "          [112],\n",
              "          [114],\n",
              "          [112]],\n",
              "  \n",
              "         [[117],\n",
              "          [118],\n",
              "          [112],\n",
              "          ...,\n",
              "          [110],\n",
              "          [115],\n",
              "          [118]],\n",
              "  \n",
              "         [[114],\n",
              "          [115],\n",
              "          [110],\n",
              "          ...,\n",
              "          [115],\n",
              "          [116],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [101],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 94],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[106],\n",
              "          [102],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 96],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[107],\n",
              "          [102],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 95],\n",
              "          [ 95]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[141],\n",
              "          [141],\n",
              "          [141],\n",
              "          ...,\n",
              "          [160],\n",
              "          [160],\n",
              "          [160]],\n",
              "  \n",
              "         [[141],\n",
              "          [141],\n",
              "          [141],\n",
              "          ...,\n",
              "          [160],\n",
              "          [160],\n",
              "          [160]],\n",
              "  \n",
              "         [[139],\n",
              "          [139],\n",
              "          [139],\n",
              "          ...,\n",
              "          [160],\n",
              "          [160],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [119],\n",
              "          [126],\n",
              "          ...,\n",
              "          [164],\n",
              "          [164],\n",
              "          [163]],\n",
              "  \n",
              "         [[115],\n",
              "          [121],\n",
              "          [127],\n",
              "          ...,\n",
              "          [164],\n",
              "          [165],\n",
              "          [162]],\n",
              "  \n",
              "         [[117],\n",
              "          [129],\n",
              "          [140],\n",
              "          ...,\n",
              "          [164],\n",
              "          [165],\n",
              "          [164]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 67],\n",
              "          [ 82],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [164],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [108],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [180],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [109],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [160],\n",
              "          [126]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 74],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 63],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 53],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 85],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 83],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 50],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[152],\n",
              "          [142],\n",
              "          [146],\n",
              "          ...,\n",
              "          [178],\n",
              "          [172],\n",
              "          [168]],\n",
              "  \n",
              "         [[152],\n",
              "          [146],\n",
              "          [151],\n",
              "          ...,\n",
              "          [176],\n",
              "          [166],\n",
              "          [171]],\n",
              "  \n",
              "         [[149],\n",
              "          [147],\n",
              "          [148],\n",
              "          ...,\n",
              "          [170],\n",
              "          [167],\n",
              "          [173]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 30],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [135],\n",
              "          [130],\n",
              "          [134]],\n",
              "  \n",
              "         [[103],\n",
              "          [ 33],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [134],\n",
              "          [133],\n",
              "          [114]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 32],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [139],\n",
              "          [135],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[232],\n",
              "          [231],\n",
              "          [233],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [146],\n",
              "          [237]],\n",
              "  \n",
              "         [[212],\n",
              "          [210],\n",
              "          [211],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 93],\n",
              "          [216]],\n",
              "  \n",
              "         [[199],\n",
              "          [199],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [169],\n",
              "          [226]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [110],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [157],\n",
              "          [149],\n",
              "          [152]],\n",
              "  \n",
              "         [[128],\n",
              "          [114],\n",
              "          [132],\n",
              "          ...,\n",
              "          [161],\n",
              "          [160],\n",
              "          [160]],\n",
              "  \n",
              "         [[130],\n",
              "          [125],\n",
              "          [132],\n",
              "          ...,\n",
              "          [163],\n",
              "          [169],\n",
              "          [170]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 27],\n",
              "          [ 61],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 22],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 32],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [111],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 25],\n",
              "          [ 23]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  4],\n",
              "          [  2],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  4],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 11],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  4],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 10],\n",
              "          [ 10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 87],\n",
              "          [ 78],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 59],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 82],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 60],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 86],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 61],\n",
              "          [ 61]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [148],\n",
              "          [147],\n",
              "          ...,\n",
              "          [151],\n",
              "          [158],\n",
              "          [151]],\n",
              "  \n",
              "         [[152],\n",
              "          [150],\n",
              "          [148],\n",
              "          ...,\n",
              "          [157],\n",
              "          [155],\n",
              "          [151]],\n",
              "  \n",
              "         [[148],\n",
              "          [146],\n",
              "          [149],\n",
              "          ...,\n",
              "          [163],\n",
              "          [156],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[194],\n",
              "          [198],\n",
              "          [199],\n",
              "          ...,\n",
              "          [108],\n",
              "          [107],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[229],\n",
              "          [234],\n",
              "          [238],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 63],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[252],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [110],\n",
              "          [130],\n",
              "          [ 39]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[201],\n",
              "          [195],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 57],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[201],\n",
              "          [204],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 65],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[200],\n",
              "          [203],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 68],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[146],\n",
              "          [132],\n",
              "          [137],\n",
              "          ...,\n",
              "          [215],\n",
              "          [212],\n",
              "          [211]],\n",
              "  \n",
              "         [[124],\n",
              "          [145],\n",
              "          [155],\n",
              "          ...,\n",
              "          [216],\n",
              "          [213],\n",
              "          [216]],\n",
              "  \n",
              "         [[143],\n",
              "          [145],\n",
              "          [139],\n",
              "          ...,\n",
              "          [219],\n",
              "          [218],\n",
              "          [219]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[168],\n",
              "          [162],\n",
              "          [196],\n",
              "          ...,\n",
              "          [152],\n",
              "          [149],\n",
              "          [155]],\n",
              "  \n",
              "         [[170],\n",
              "          [159],\n",
              "          [177],\n",
              "          ...,\n",
              "          [120],\n",
              "          [114],\n",
              "          [100]],\n",
              "  \n",
              "         [[167],\n",
              "          [155],\n",
              "          [175],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 34],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 58],\n",
              "          [ 63],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [164],\n",
              "          [160],\n",
              "          [161]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 48],\n",
              "          [102],\n",
              "          ...,\n",
              "          [160],\n",
              "          [162],\n",
              "          [161]],\n",
              "  \n",
              "         [[118],\n",
              "          [109],\n",
              "          [111],\n",
              "          ...,\n",
              "          [161],\n",
              "          [163],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [ 97],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 23],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 98],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 46],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 97],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 51],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[222],\n",
              "          [223],\n",
              "          [227],\n",
              "          ...,\n",
              "          [165],\n",
              "          [164],\n",
              "          [165]],\n",
              "  \n",
              "         [[224],\n",
              "          [229],\n",
              "          [224],\n",
              "          ...,\n",
              "          [166],\n",
              "          [161],\n",
              "          [165]],\n",
              "  \n",
              "         [[227],\n",
              "          [216],\n",
              "          [223],\n",
              "          ...,\n",
              "          [168],\n",
              "          [168],\n",
              "          [186]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [216],\n",
              "          [212],\n",
              "          [206]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 35],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [217],\n",
              "          [213],\n",
              "          [221]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 43],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [221],\n",
              "          [207],\n",
              "          [218]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[247],\n",
              "          [247],\n",
              "          [245],\n",
              "          ...,\n",
              "          [146],\n",
              "          [156],\n",
              "          [253]],\n",
              "  \n",
              "         [[125],\n",
              "          [107],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 96],\n",
              "          [253]],\n",
              "  \n",
              "         [[121],\n",
              "          [101],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 88],\n",
              "          [253]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[156],\n",
              "          [ 97],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [115],\n",
              "          [154],\n",
              "          [252]],\n",
              "  \n",
              "         [[158],\n",
              "          [107],\n",
              "          [100],\n",
              "          ...,\n",
              "          [156],\n",
              "          [158],\n",
              "          [253]],\n",
              "  \n",
              "         [[164],\n",
              "          [125],\n",
              "          [116],\n",
              "          ...,\n",
              "          [248],\n",
              "          [248],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 36],\n",
              "          [ 18],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 17],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [151],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [139],\n",
              "          [136],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [151],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [151],\n",
              "          [ 71],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 24],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [188],\n",
              "          [218]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 18],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [128],\n",
              "          [212]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 30],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 32],\n",
              "          [190]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[118],\n",
              "          [118],\n",
              "          [103],\n",
              "          ...,\n",
              "          [199],\n",
              "          [ 61],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[120],\n",
              "          [115],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [225],\n",
              "          [160],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[116],\n",
              "          [106],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [224],\n",
              "          [210],\n",
              "          [ 65]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [ 89],\n",
              "          [167],\n",
              "          ...,\n",
              "          [142],\n",
              "          [160],\n",
              "          [166]],\n",
              "  \n",
              "         [[137],\n",
              "          [159],\n",
              "          [136],\n",
              "          ...,\n",
              "          [138],\n",
              "          [183],\n",
              "          [186]],\n",
              "  \n",
              "         [[156],\n",
              "          [170],\n",
              "          [149],\n",
              "          ...,\n",
              "          [184],\n",
              "          [184],\n",
              "          [131]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 14],\n",
              "          [ 11],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [102],\n",
              "          [103],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 11],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [106],\n",
              "          [102],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 11],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [102]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [149],\n",
              "          [145],\n",
              "          ...,\n",
              "          [153],\n",
              "          [152],\n",
              "          [163]],\n",
              "  \n",
              "         [[142],\n",
              "          [149],\n",
              "          [148],\n",
              "          ...,\n",
              "          [158],\n",
              "          [154],\n",
              "          [160]],\n",
              "  \n",
              "         [[141],\n",
              "          [149],\n",
              "          [140],\n",
              "          ...,\n",
              "          [159],\n",
              "          [157],\n",
              "          [161]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[215],\n",
              "          [239],\n",
              "          [250],\n",
              "          ...,\n",
              "          [207],\n",
              "          [209],\n",
              "          [212]],\n",
              "  \n",
              "         [[187],\n",
              "          [144],\n",
              "          [152],\n",
              "          ...,\n",
              "          [206],\n",
              "          [211],\n",
              "          [212]],\n",
              "  \n",
              "         [[237],\n",
              "          [154],\n",
              "          [150],\n",
              "          ...,\n",
              "          [221],\n",
              "          [217],\n",
              "          [210]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[185],\n",
              "          [187],\n",
              "          [218],\n",
              "          ...,\n",
              "          [179],\n",
              "          [181],\n",
              "          [181]],\n",
              "  \n",
              "         [[179],\n",
              "          [178],\n",
              "          [218],\n",
              "          ...,\n",
              "          [199],\n",
              "          [193],\n",
              "          [185]],\n",
              "  \n",
              "         [[175],\n",
              "          [175],\n",
              "          [215],\n",
              "          ...,\n",
              "          [240],\n",
              "          [235],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 97],\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 93],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 92],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[153],\n",
              "          [153],\n",
              "          [158],\n",
              "          ...,\n",
              "          [116],\n",
              "          [134],\n",
              "          [126]],\n",
              "  \n",
              "         [[154],\n",
              "          [154],\n",
              "          [152],\n",
              "          ...,\n",
              "          [129],\n",
              "          [130],\n",
              "          [130]],\n",
              "  \n",
              "         [[158],\n",
              "          [155],\n",
              "          [155],\n",
              "          ...,\n",
              "          [134],\n",
              "          [130],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[15],\n",
              "          [20],\n",
              "          [22],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[18],\n",
              "          [20],\n",
              "          [21],\n",
              "          ...,\n",
              "          [ 0],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[12],\n",
              "          [18],\n",
              "          [26],\n",
              "          ...,\n",
              "          [ 0],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 4],\n",
              "          [ 2],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 4],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 3],\n",
              "          [ 2],\n",
              "          [ 5],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 2],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 4],\n",
              "          [ 3]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 85],\n",
              "          [ 65],\n",
              "          [112],\n",
              "          ...,\n",
              "          [170],\n",
              "          [166],\n",
              "          [155]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [110],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [167],\n",
              "          [160],\n",
              "          [166]],\n",
              "  \n",
              "         [[113],\n",
              "          [ 69],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [154],\n",
              "          [160],\n",
              "          [177]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [ 90],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [206],\n",
              "          [229],\n",
              "          [236]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 75],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [228],\n",
              "          [232],\n",
              "          [232]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 74],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [227],\n",
              "          [226],\n",
              "          [221]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[166],\n",
              "          [154],\n",
              "          [160],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 31],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[146],\n",
              "          [143],\n",
              "          [156],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [  6],\n",
              "          [  8]],\n",
              "  \n",
              "         [[193],\n",
              "          [177],\n",
              "          [188],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 10],\n",
              "          [ 12]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [109],\n",
              "          [117],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 51],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[121],\n",
              "          [140],\n",
              "          [108],\n",
              "          ...,\n",
              "          [142],\n",
              "          [141],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[145],\n",
              "          [103],\n",
              "          [131],\n",
              "          ...,\n",
              "          [129],\n",
              "          [195],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[197],\n",
              "          [146],\n",
              "          [152],\n",
              "          ...,\n",
              "          [136],\n",
              "          [130],\n",
              "          [127]],\n",
              "  \n",
              "         [[203],\n",
              "          [140],\n",
              "          [130],\n",
              "          ...,\n",
              "          [136],\n",
              "          [135],\n",
              "          [140]],\n",
              "  \n",
              "         [[152],\n",
              "          [141],\n",
              "          [163],\n",
              "          ...,\n",
              "          [137],\n",
              "          [145],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 98],\n",
              "          [107],\n",
              "          [108],\n",
              "          ...,\n",
              "          [172],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [101],\n",
              "          [126],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [111],\n",
              "          [111],\n",
              "          ...,\n",
              "          [171],\n",
              "          [170],\n",
              "          [169]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[129],\n",
              "          [ 96],\n",
              "          [109],\n",
              "          ...,\n",
              "          [206],\n",
              "          [174],\n",
              "          [137]],\n",
              "  \n",
              "         [[140],\n",
              "          [ 95],\n",
              "          [135],\n",
              "          ...,\n",
              "          [215],\n",
              "          [169],\n",
              "          [146]],\n",
              "  \n",
              "         [[105],\n",
              "          [106],\n",
              "          [145],\n",
              "          ...,\n",
              "          [182],\n",
              "          [171],\n",
              "          [150]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 93],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 40],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 86],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 28],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[127],\n",
              "          [ 81],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 27],\n",
              "          [ 27]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[111],\n",
              "          [ 22],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  4],\n",
              "          [  1]],\n",
              "  \n",
              "         [[109],\n",
              "          [ 22],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  3],\n",
              "          [  3]],\n",
              "  \n",
              "         [[109],\n",
              "          [ 22],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  3],\n",
              "          [  3]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [ 12],\n",
              "          [126],\n",
              "          ...,\n",
              "          [137],\n",
              "          [137],\n",
              "          [137]],\n",
              "  \n",
              "         [[116],\n",
              "          [ 12],\n",
              "          [142],\n",
              "          ...,\n",
              "          [141],\n",
              "          [138],\n",
              "          [140]],\n",
              "  \n",
              "         [[117],\n",
              "          [ 26],\n",
              "          [149],\n",
              "          ...,\n",
              "          [142],\n",
              "          [140],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[51],\n",
              "          [53],\n",
              "          [55],\n",
              "          ...,\n",
              "          [24],\n",
              "          [24],\n",
              "          [23]],\n",
              "  \n",
              "         [[49],\n",
              "          [50],\n",
              "          [54],\n",
              "          ...,\n",
              "          [27],\n",
              "          [27],\n",
              "          [27]],\n",
              "  \n",
              "         [[43],\n",
              "          [44],\n",
              "          [48],\n",
              "          ...,\n",
              "          [27],\n",
              "          [28],\n",
              "          [28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[67],\n",
              "          [69],\n",
              "          [71],\n",
              "          ...,\n",
              "          [45],\n",
              "          [59],\n",
              "          [72]],\n",
              "  \n",
              "         [[69],\n",
              "          [71],\n",
              "          [70],\n",
              "          ...,\n",
              "          [58],\n",
              "          [57],\n",
              "          [66]],\n",
              "  \n",
              "         [[71],\n",
              "          [72],\n",
              "          [71],\n",
              "          ...,\n",
              "          [42],\n",
              "          [48],\n",
              "          [57]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 53],\n",
              "          [ 55],\n",
              "          [116],\n",
              "          ...,\n",
              "          [157],\n",
              "          [141],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 51],\n",
              "          [120],\n",
              "          ...,\n",
              "          [153],\n",
              "          [136],\n",
              "          [147]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 51],\n",
              "          [121],\n",
              "          ...,\n",
              "          [156],\n",
              "          [132],\n",
              "          [154]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  9],\n",
              "          [  4],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [101],\n",
              "          [117],\n",
              "          [151]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 10],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 13],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 56],\n",
              "          [ 55]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[101],\n",
              "          [ 81],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [147],\n",
              "          [146],\n",
              "          [163]],\n",
              "  \n",
              "         [[135],\n",
              "          [132],\n",
              "          [114],\n",
              "          ...,\n",
              "          [211],\n",
              "          [218],\n",
              "          [224]],\n",
              "  \n",
              "         [[130],\n",
              "          [ 94],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [230],\n",
              "          [221],\n",
              "          [221]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 38],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [163],\n",
              "          [133],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 43],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [143],\n",
              "          [142],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 40],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [142],\n",
              "          [128],\n",
              "          [120]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[154],\n",
              "          [112],\n",
              "          [106],\n",
              "          ...,\n",
              "          [126],\n",
              "          [101],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[116],\n",
              "          [113],\n",
              "          [130],\n",
              "          ...,\n",
              "          [113],\n",
              "          [130],\n",
              "          [117]],\n",
              "  \n",
              "         [[150],\n",
              "          [114],\n",
              "          [112],\n",
              "          ...,\n",
              "          [112],\n",
              "          [135],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [ 75],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 62],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 59],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 87],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 51],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 60],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[193],\n",
              "          [197],\n",
              "          [203],\n",
              "          ...,\n",
              "          [152],\n",
              "          [152],\n",
              "          [154]],\n",
              "  \n",
              "         [[195],\n",
              "          [200],\n",
              "          [207],\n",
              "          ...,\n",
              "          [153],\n",
              "          [156],\n",
              "          [157]],\n",
              "  \n",
              "         [[198],\n",
              "          [204],\n",
              "          [208],\n",
              "          ...,\n",
              "          [156],\n",
              "          [158],\n",
              "          [159]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 81],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [172],\n",
              "          [174],\n",
              "          [162]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 82],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [182],\n",
              "          [170],\n",
              "          [165]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 87],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [179],\n",
              "          [174],\n",
              "          [167]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[194],\n",
              "          [205],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 81],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 17],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[  9],\n",
              "          [ 12],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 18],\n",
              "          [ 20]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 69],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [145],\n",
              "          [127],\n",
              "          [138]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 61],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [171],\n",
              "          [141],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 57],\n",
              "          [ 34],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 43],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 28],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 42],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 13],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 44],\n",
              "          [ 41]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[167],\n",
              "          [155],\n",
              "          [162],\n",
              "          ...,\n",
              "          [180],\n",
              "          [146],\n",
              "          [121]],\n",
              "  \n",
              "         [[151],\n",
              "          [164],\n",
              "          [162],\n",
              "          ...,\n",
              "          [119],\n",
              "          [124],\n",
              "          [110]],\n",
              "  \n",
              "         [[183],\n",
              "          [171],\n",
              "          [143],\n",
              "          ...,\n",
              "          [114],\n",
              "          [120],\n",
              "          [109]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 21],\n",
              "          [ 87],\n",
              "          [160],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 39],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 49],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 39],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 50],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 44],\n",
              "          [ 37]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 18],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [226],\n",
              "          [231],\n",
              "          [231]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 17],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [236],\n",
              "          [230],\n",
              "          [231]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 18],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [244],\n",
              "          [236],\n",
              "          [232]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[209],\n",
              "          [209],\n",
              "          [217],\n",
              "          ...,\n",
              "          [127],\n",
              "          [128],\n",
              "          [216]],\n",
              "  \n",
              "         [[211],\n",
              "          [214],\n",
              "          [217],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [129],\n",
              "          [195]],\n",
              "  \n",
              "         [[213],\n",
              "          [214],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 98],\n",
              "          [157]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[234],\n",
              "          [237],\n",
              "          [236],\n",
              "          ...,\n",
              "          [224],\n",
              "          [223],\n",
              "          [210]],\n",
              "  \n",
              "         [[234],\n",
              "          [237],\n",
              "          [233],\n",
              "          ...,\n",
              "          [225],\n",
              "          [229],\n",
              "          [210]],\n",
              "  \n",
              "         [[230],\n",
              "          [236],\n",
              "          [237],\n",
              "          ...,\n",
              "          [225],\n",
              "          [205],\n",
              "          [203]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[136],\n",
              "          [138],\n",
              "          [138],\n",
              "          ...,\n",
              "          [174],\n",
              "          [180],\n",
              "          [180]],\n",
              "  \n",
              "         [[133],\n",
              "          [125],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [179],\n",
              "          [179],\n",
              "          [178]],\n",
              "  \n",
              "         [[141],\n",
              "          [137],\n",
              "          [127],\n",
              "          ...,\n",
              "          [181],\n",
              "          [180],\n",
              "          [180]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[204],\n",
              "          [190],\n",
              "          [191],\n",
              "          ...,\n",
              "          [204],\n",
              "          [209],\n",
              "          [208]],\n",
              "  \n",
              "         [[202],\n",
              "          [197],\n",
              "          [197],\n",
              "          ...,\n",
              "          [200],\n",
              "          [205],\n",
              "          [208]],\n",
              "  \n",
              "         [[201],\n",
              "          [200],\n",
              "          [195],\n",
              "          ...,\n",
              "          [197],\n",
              "          [203],\n",
              "          [210]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[119],\n",
              "          [169],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [126],\n",
              "          [127],\n",
              "          [118]],\n",
              "  \n",
              "         [[137],\n",
              "          [105],\n",
              "          [140],\n",
              "          ...,\n",
              "          [126],\n",
              "          [128],\n",
              "          [115]],\n",
              "  \n",
              "         [[186],\n",
              "          [101],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [115],\n",
              "          [121],\n",
              "          [119]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [106],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 23],\n",
              "          [103]],\n",
              "  \n",
              "         [[100],\n",
              "          [117],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 29],\n",
              "          [122]],\n",
              "  \n",
              "         [[115],\n",
              "          [120],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 61],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [126],\n",
              "          [132],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[127],\n",
              "          [130],\n",
              "          [133],\n",
              "          ...,\n",
              "          [253],\n",
              "          [254],\n",
              "          [255]],\n",
              "  \n",
              "         [[128],\n",
              "          [132],\n",
              "          [134],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [130],\n",
              "          [137],\n",
              "          ...,\n",
              "          [162],\n",
              "          [166],\n",
              "          [159]],\n",
              "  \n",
              "         [[127],\n",
              "          [138],\n",
              "          [144],\n",
              "          ...,\n",
              "          [162],\n",
              "          [157],\n",
              "          [167]],\n",
              "  \n",
              "         [[126],\n",
              "          [133],\n",
              "          [138],\n",
              "          ...,\n",
              "          [162],\n",
              "          [168],\n",
              "          [165]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[238],\n",
              "          [238],\n",
              "          [239],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 57],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[238],\n",
              "          [238],\n",
              "          [239],\n",
              "          ...,\n",
              "          [145],\n",
              "          [ 62],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[226],\n",
              "          [237],\n",
              "          [240],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 54],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[213],\n",
              "          [215],\n",
              "          [187],\n",
              "          ...,\n",
              "          [107],\n",
              "          [105],\n",
              "          [123]],\n",
              "  \n",
              "         [[129],\n",
              "          [135],\n",
              "          [130],\n",
              "          ...,\n",
              "          [102],\n",
              "          [102],\n",
              "          [112]],\n",
              "  \n",
              "         [[108],\n",
              "          [114],\n",
              "          [158],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 90],\n",
              "          [132]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [252],\n",
              "          [253],\n",
              "          ...,\n",
              "          [253],\n",
              "          [252],\n",
              "          [253]],\n",
              "  \n",
              "         [[252],\n",
              "          [236],\n",
              "          [229],\n",
              "          ...,\n",
              "          [225],\n",
              "          [240],\n",
              "          [252]],\n",
              "  \n",
              "         [[253],\n",
              "          [237],\n",
              "          [215],\n",
              "          ...,\n",
              "          [214],\n",
              "          [242],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [251],\n",
              "          [247],\n",
              "          ...,\n",
              "          [246],\n",
              "          [250],\n",
              "          [253]],\n",
              "  \n",
              "         [[254],\n",
              "          [251],\n",
              "          [247],\n",
              "          ...,\n",
              "          [245],\n",
              "          [250],\n",
              "          [254]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[127],\n",
              "          [127],\n",
              "          [101],\n",
              "          ...,\n",
              "          [188],\n",
              "          [180],\n",
              "          [185]],\n",
              "  \n",
              "         [[124],\n",
              "          [129],\n",
              "          [114],\n",
              "          ...,\n",
              "          [197],\n",
              "          [185],\n",
              "          [201]],\n",
              "  \n",
              "         [[125],\n",
              "          [ 62],\n",
              "          [107],\n",
              "          ...,\n",
              "          [204],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [111],\n",
              "          [151],\n",
              "          ...,\n",
              "          [145],\n",
              "          [152],\n",
              "          [150]],\n",
              "  \n",
              "         [[135],\n",
              "          [ 96],\n",
              "          [143],\n",
              "          ...,\n",
              "          [152],\n",
              "          [131],\n",
              "          [143]],\n",
              "  \n",
              "         [[135],\n",
              "          [142],\n",
              "          [139],\n",
              "          ...,\n",
              "          [134],\n",
              "          [126],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[45],\n",
              "          [41],\n",
              "          [27],\n",
              "          ...,\n",
              "          [49],\n",
              "          [49],\n",
              "          [43]],\n",
              "  \n",
              "         [[45],\n",
              "          [45],\n",
              "          [27],\n",
              "          ...,\n",
              "          [49],\n",
              "          [46],\n",
              "          [47]],\n",
              "  \n",
              "         [[46],\n",
              "          [43],\n",
              "          [30],\n",
              "          ...,\n",
              "          [47],\n",
              "          [48],\n",
              "          [47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[15],\n",
              "          [16],\n",
              "          [14],\n",
              "          ...,\n",
              "          [37],\n",
              "          [48],\n",
              "          [55]],\n",
              "  \n",
              "         [[13],\n",
              "          [13],\n",
              "          [16],\n",
              "          ...,\n",
              "          [44],\n",
              "          [54],\n",
              "          [58]],\n",
              "  \n",
              "         [[15],\n",
              "          [12],\n",
              "          [17],\n",
              "          ...,\n",
              "          [51],\n",
              "          [58],\n",
              "          [53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 44],\n",
              "          [ 59],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [108],\n",
              "          [105],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 71],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [108],\n",
              "          [105],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 70],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [108],\n",
              "          [106],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [132],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 39],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[121],\n",
              "          [124],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 41],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[120],\n",
              "          [125],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 39],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[173],\n",
              "          [175],\n",
              "          [177],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 99],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[173],\n",
              "          [174],\n",
              "          [179],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 95],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[176],\n",
              "          [179],\n",
              "          [181],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 89],\n",
              "          [ 90]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [156],\n",
              "          [154],\n",
              "          ...,\n",
              "          [124],\n",
              "          [ 83],\n",
              "          [151]],\n",
              "  \n",
              "         [[166],\n",
              "          [155],\n",
              "          [128],\n",
              "          ...,\n",
              "          [116],\n",
              "          [ 64],\n",
              "          [147]],\n",
              "  \n",
              "         [[158],\n",
              "          [139],\n",
              "          [111],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 78],\n",
              "          [151]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[146],\n",
              "          [155],\n",
              "          [149],\n",
              "          ...,\n",
              "          [122],\n",
              "          [119],\n",
              "          [122]],\n",
              "  \n",
              "         [[155],\n",
              "          [145],\n",
              "          [162],\n",
              "          ...,\n",
              "          [123],\n",
              "          [132],\n",
              "          [122]],\n",
              "  \n",
              "         [[144],\n",
              "          [150],\n",
              "          [170],\n",
              "          ...,\n",
              "          [128],\n",
              "          [127],\n",
              "          [146]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[149],\n",
              "          [149],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 70],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[233],\n",
              "          [206],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 78],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[239],\n",
              "          [235],\n",
              "          [236],\n",
              "          ...,\n",
              "          [111],\n",
              "          [108],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [112],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 36],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[112],\n",
              "          [112],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 83],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[112],\n",
              "          [112],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 91],\n",
              "          [ 83]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [125],\n",
              "          [107],\n",
              "          ...,\n",
              "          [215],\n",
              "          [213],\n",
              "          [210]],\n",
              "  \n",
              "         [[118],\n",
              "          [118],\n",
              "          [114],\n",
              "          ...,\n",
              "          [211],\n",
              "          [209],\n",
              "          [204]],\n",
              "  \n",
              "         [[116],\n",
              "          [109],\n",
              "          [108],\n",
              "          ...,\n",
              "          [204],\n",
              "          [199],\n",
              "          [202]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 60],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[159],\n",
              "          [241],\n",
              "          [183],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 56],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 43],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 52],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [104],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 49],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[134],\n",
              "          [ 44],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 71],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 36],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 56],\n",
              "          [ 54]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[120],\n",
              "          [108],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [128],\n",
              "          [ 82],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 32],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [100],\n",
              "          [127],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 23],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [153],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [187],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [176],\n",
              "          [106],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 43],\n",
              "          [124],\n",
              "          ...,\n",
              "          [138],\n",
              "          [194],\n",
              "          [127]],\n",
              "  \n",
              "         [[163],\n",
              "          [ 91],\n",
              "          [100],\n",
              "          ...,\n",
              "          [120],\n",
              "          [106],\n",
              "          [ 46]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 59],\n",
              "          [ 86],\n",
              "          [139],\n",
              "          ...,\n",
              "          [106],\n",
              "          [ 95],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 65],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [102],\n",
              "          [104],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 74],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [101],\n",
              "          [114],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[145],\n",
              "          [151],\n",
              "          [108],\n",
              "          ...,\n",
              "          [198],\n",
              "          [205],\n",
              "          [231]],\n",
              "  \n",
              "         [[148],\n",
              "          [127],\n",
              "          [104],\n",
              "          ...,\n",
              "          [190],\n",
              "          [195],\n",
              "          [207]],\n",
              "  \n",
              "         [[113],\n",
              "          [123],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [186],\n",
              "          [197],\n",
              "          [195]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[164],\n",
              "          [170],\n",
              "          [168],\n",
              "          ...,\n",
              "          [114],\n",
              "          [155],\n",
              "          [136]],\n",
              "  \n",
              "         [[168],\n",
              "          [167],\n",
              "          [165],\n",
              "          ...,\n",
              "          [154],\n",
              "          [152],\n",
              "          [138]],\n",
              "  \n",
              "         [[160],\n",
              "          [153],\n",
              "          [144],\n",
              "          ...,\n",
              "          [157],\n",
              "          [148],\n",
              "          [157]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 88],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [102],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 83],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [134],\n",
              "          [144],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [102],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [122],\n",
              "          [102],\n",
              "          [102]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[141],\n",
              "          [144],\n",
              "          [116],\n",
              "          ...,\n",
              "          [123],\n",
              "          [149],\n",
              "          [132]],\n",
              "  \n",
              "         [[120],\n",
              "          [143],\n",
              "          [140],\n",
              "          ...,\n",
              "          [149],\n",
              "          [134],\n",
              "          [151]],\n",
              "  \n",
              "         [[153],\n",
              "          [132],\n",
              "          [148],\n",
              "          ...,\n",
              "          [143],\n",
              "          [150],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[190],\n",
              "          [183],\n",
              "          [182],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[183],\n",
              "          [161],\n",
              "          [187],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[190],\n",
              "          [168],\n",
              "          [168],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[225],\n",
              "          [226],\n",
              "          [226],\n",
              "          ...,\n",
              "          [204],\n",
              "          [204],\n",
              "          [202]],\n",
              "  \n",
              "         [[222],\n",
              "          [227],\n",
              "          [226],\n",
              "          ...,\n",
              "          [205],\n",
              "          [203],\n",
              "          [203]],\n",
              "  \n",
              "         [[226],\n",
              "          [226],\n",
              "          [226],\n",
              "          ...,\n",
              "          [207],\n",
              "          [205],\n",
              "          [206]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[229],\n",
              "          [236],\n",
              "          [239],\n",
              "          ...,\n",
              "          [219],\n",
              "          [215],\n",
              "          [210]],\n",
              "  \n",
              "         [[237],\n",
              "          [236],\n",
              "          [238],\n",
              "          ...,\n",
              "          [218],\n",
              "          [220],\n",
              "          [219]],\n",
              "  \n",
              "         [[238],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [218],\n",
              "          [215],\n",
              "          [215]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[146],\n",
              "          [164],\n",
              "          [146],\n",
              "          ...,\n",
              "          [160],\n",
              "          [168],\n",
              "          [165]],\n",
              "  \n",
              "         [[119],\n",
              "          [111],\n",
              "          [156],\n",
              "          ...,\n",
              "          [215],\n",
              "          [111],\n",
              "          [191]],\n",
              "  \n",
              "         [[147],\n",
              "          [ 98],\n",
              "          [134],\n",
              "          ...,\n",
              "          [177],\n",
              "          [169],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[221],\n",
              "          [225],\n",
              "          [223],\n",
              "          ...,\n",
              "          [227],\n",
              "          [195],\n",
              "          [216]],\n",
              "  \n",
              "         [[214],\n",
              "          [218],\n",
              "          [214],\n",
              "          ...,\n",
              "          [209],\n",
              "          [206],\n",
              "          [223]],\n",
              "  \n",
              "         [[214],\n",
              "          [218],\n",
              "          [230],\n",
              "          ...,\n",
              "          [199],\n",
              "          [223],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[139],\n",
              "          [139],\n",
              "          [138],\n",
              "          ...,\n",
              "          [149],\n",
              "          [155],\n",
              "          [151]],\n",
              "  \n",
              "         [[135],\n",
              "          [143],\n",
              "          [134],\n",
              "          ...,\n",
              "          [150],\n",
              "          [153],\n",
              "          [150]],\n",
              "  \n",
              "         [[135],\n",
              "          [137],\n",
              "          [135],\n",
              "          ...,\n",
              "          [150],\n",
              "          [148],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 37],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [149],\n",
              "          [150],\n",
              "          [154]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 45],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [153],\n",
              "          [151],\n",
              "          [151]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 35],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [150],\n",
              "          [153],\n",
              "          [154]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  6],\n",
              "          [  5],\n",
              "          [  5],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  9]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  9]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  9],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[161],\n",
              "          [167],\n",
              "          [169],\n",
              "          ...,\n",
              "          [153],\n",
              "          [175],\n",
              "          [168]],\n",
              "  \n",
              "         [[164],\n",
              "          [158],\n",
              "          [163],\n",
              "          ...,\n",
              "          [164],\n",
              "          [155],\n",
              "          [155]],\n",
              "  \n",
              "         [[150],\n",
              "          [158],\n",
              "          [163],\n",
              "          ...,\n",
              "          [133],\n",
              "          [136],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[14],\n",
              "          [28],\n",
              "          [34],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [16],\n",
              "          [36]],\n",
              "  \n",
              "         [[14],\n",
              "          [23],\n",
              "          [30],\n",
              "          ...,\n",
              "          [ 8],\n",
              "          [18],\n",
              "          [31]],\n",
              "  \n",
              "         [[14],\n",
              "          [24],\n",
              "          [36],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [20],\n",
              "          [33]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[76],\n",
              "          [65],\n",
              "          [71],\n",
              "          ...,\n",
              "          [49],\n",
              "          [44],\n",
              "          [46]],\n",
              "  \n",
              "         [[43],\n",
              "          [39],\n",
              "          [34],\n",
              "          ...,\n",
              "          [44],\n",
              "          [49],\n",
              "          [46]],\n",
              "  \n",
              "         [[53],\n",
              "          [36],\n",
              "          [41],\n",
              "          ...,\n",
              "          [38],\n",
              "          [36],\n",
              "          [34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[125],\n",
              "          [ 72],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 65],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[116],\n",
              "          [ 74],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 71],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[113],\n",
              "          [ 70],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 76],\n",
              "          [ 55]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 33],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [202],\n",
              "          [204],\n",
              "          [194]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 41],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [213],\n",
              "          [205],\n",
              "          [209]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 39],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [218],\n",
              "          [214],\n",
              "          [217]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[158],\n",
              "          [160],\n",
              "          [165],\n",
              "          ...,\n",
              "          [163],\n",
              "          [152],\n",
              "          [153]],\n",
              "  \n",
              "         [[163],\n",
              "          [164],\n",
              "          [167],\n",
              "          ...,\n",
              "          [164],\n",
              "          [167],\n",
              "          [154]],\n",
              "  \n",
              "         [[170],\n",
              "          [169],\n",
              "          [167],\n",
              "          ...,\n",
              "          [167],\n",
              "          [156],\n",
              "          [159]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [121],\n",
              "          [134],\n",
              "          ...,\n",
              "          [136],\n",
              "          [127],\n",
              "          [123]],\n",
              "  \n",
              "         [[125],\n",
              "          [116],\n",
              "          [127],\n",
              "          ...,\n",
              "          [130],\n",
              "          [128],\n",
              "          [123]],\n",
              "  \n",
              "         [[124],\n",
              "          [115],\n",
              "          [127],\n",
              "          ...,\n",
              "          [127],\n",
              "          [124],\n",
              "          [125]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 76],\n",
              "          [ 75],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [181],\n",
              "          [206],\n",
              "          [213]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 79],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [190],\n",
              "          [222],\n",
              "          [226]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 83],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [200],\n",
              "          [220],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [243],\n",
              "          ...,\n",
              "          [229],\n",
              "          [244],\n",
              "          [248]],\n",
              "  \n",
              "         [[253],\n",
              "          [254],\n",
              "          [252],\n",
              "          ...,\n",
              "          [238],\n",
              "          [248],\n",
              "          [247]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [254],\n",
              "          ...,\n",
              "          [239],\n",
              "          [248],\n",
              "          [247]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[204],\n",
              "          [207],\n",
              "          [207],\n",
              "          ...,\n",
              "          [172],\n",
              "          [172],\n",
              "          [170]],\n",
              "  \n",
              "         [[204],\n",
              "          [207],\n",
              "          [207],\n",
              "          ...,\n",
              "          [172],\n",
              "          [170],\n",
              "          [169]],\n",
              "  \n",
              "         [[205],\n",
              "          [207],\n",
              "          [207],\n",
              "          ...,\n",
              "          [204],\n",
              "          [175],\n",
              "          [169]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [109],\n",
              "          [112],\n",
              "          ...,\n",
              "          [141],\n",
              "          [146],\n",
              "          [149]],\n",
              "  \n",
              "         [[109],\n",
              "          [109],\n",
              "          [105],\n",
              "          ...,\n",
              "          [142],\n",
              "          [141],\n",
              "          [142]],\n",
              "  \n",
              "         [[105],\n",
              "          [100],\n",
              "          [101],\n",
              "          ...,\n",
              "          [148],\n",
              "          [141],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[106],\n",
              "          [106],\n",
              "          [113],\n",
              "          ...,\n",
              "          [216],\n",
              "          [213],\n",
              "          [213]],\n",
              "  \n",
              "         [[108],\n",
              "          [110],\n",
              "          [111],\n",
              "          ...,\n",
              "          [217],\n",
              "          [215],\n",
              "          [217]],\n",
              "  \n",
              "         [[116],\n",
              "          [108],\n",
              "          [252],\n",
              "          ...,\n",
              "          [217],\n",
              "          [214],\n",
              "          [217]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 80],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 41],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 74],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 50],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 33],\n",
              "          [ 39]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 34],\n",
              "          [ 33],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 52],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 34],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 64],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 81],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 82],\n",
              "          [ 72]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 91],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [138],\n",
              "          [137],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 91],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [142],\n",
              "          [137],\n",
              "          [135]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 95],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [141],\n",
              "          [144],\n",
              "          [140]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [254],\n",
              "          [229],\n",
              "          [169]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [226],\n",
              "          [169]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [253],\n",
              "          [222],\n",
              "          [173]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 36],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [227],\n",
              "          [230],\n",
              "          [237]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 21],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [226],\n",
              "          [226],\n",
              "          [238]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 28],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [233],\n",
              "          [227],\n",
              "          [240]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 57],\n",
              "          [ 46],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 43],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [228],\n",
              "          [230],\n",
              "          ...,\n",
              "          [229],\n",
              "          [227],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [224],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [229],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 46],\n",
              "          [224],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [219],\n",
              "          [228],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [221],\n",
              "          [227],\n",
              "          ...,\n",
              "          [228],\n",
              "          [217],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 47],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 66],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[233],\n",
              "          [198],\n",
              "          [192],\n",
              "          ...,\n",
              "          [142],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[230],\n",
              "          [169],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 83],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[233],\n",
              "          [170],\n",
              "          [163],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 85],\n",
              "          [ 85]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[217],\n",
              "          [140],\n",
              "          [127],\n",
              "          ...,\n",
              "          [118],\n",
              "          [114],\n",
              "          [112]],\n",
              "  \n",
              "         [[217],\n",
              "          [139],\n",
              "          [126],\n",
              "          ...,\n",
              "          [121],\n",
              "          [115],\n",
              "          [109]],\n",
              "  \n",
              "         [[217],\n",
              "          [139],\n",
              "          [126],\n",
              "          ...,\n",
              "          [122],\n",
              "          [113],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  9],\n",
              "          [  8],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  9],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[  6],\n",
              "          [ 10],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 21],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 53],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 17],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 55],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [118],\n",
              "          [ 15],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [163],\n",
              "          [ 15],\n",
              "          [ 15]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[153],\n",
              "          [157],\n",
              "          [174],\n",
              "          ...,\n",
              "          [146],\n",
              "          [144],\n",
              "          [153]],\n",
              "  \n",
              "         [[178],\n",
              "          [148],\n",
              "          [170],\n",
              "          ...,\n",
              "          [190],\n",
              "          [154],\n",
              "          [150]],\n",
              "  \n",
              "         [[169],\n",
              "          [173],\n",
              "          [165],\n",
              "          ...,\n",
              "          [155],\n",
              "          [158],\n",
              "          [149]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[206],\n",
              "          [207],\n",
              "          [206],\n",
              "          ...,\n",
              "          [196],\n",
              "          [202],\n",
              "          [201]],\n",
              "  \n",
              "         [[196],\n",
              "          [200],\n",
              "          [187],\n",
              "          ...,\n",
              "          [186],\n",
              "          [204],\n",
              "          [201]],\n",
              "  \n",
              "         [[197],\n",
              "          [188],\n",
              "          [196],\n",
              "          ...,\n",
              "          [189],\n",
              "          [208],\n",
              "          [215]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[164],\n",
              "          [164],\n",
              "          [164],\n",
              "          ...,\n",
              "          [163],\n",
              "          [163],\n",
              "          [163]],\n",
              "  \n",
              "         [[162],\n",
              "          [164],\n",
              "          [164],\n",
              "          ...,\n",
              "          [163],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         [[164],\n",
              "          [162],\n",
              "          [164],\n",
              "          ...,\n",
              "          [163],\n",
              "          [163],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [151],\n",
              "          [150],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         [[153],\n",
              "          [152],\n",
              "          [150],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [170]],\n",
              "  \n",
              "         [[155],\n",
              "          [155],\n",
              "          [153],\n",
              "          ...,\n",
              "          [171],\n",
              "          [171],\n",
              "          [174]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[120],\n",
              "          [111],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 98],\n",
              "          [103]],\n",
              "  \n",
              "         [[110],\n",
              "          [ 95],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [101],\n",
              "          [132]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 92],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [101],\n",
              "          [101],\n",
              "          [108]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [154],\n",
              "          [180],\n",
              "          ...,\n",
              "          [240],\n",
              "          [234],\n",
              "          [234]],\n",
              "  \n",
              "         [[230],\n",
              "          [216],\n",
              "          [150],\n",
              "          ...,\n",
              "          [237],\n",
              "          [235],\n",
              "          [234]],\n",
              "  \n",
              "         [[185],\n",
              "          [105],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [220],\n",
              "          [233],\n",
              "          [228]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[102],\n",
              "          [205],\n",
              "          [223],\n",
              "          ...,\n",
              "          [229],\n",
              "          [219],\n",
              "          [224]],\n",
              "  \n",
              "         [[108],\n",
              "          [199],\n",
              "          [220],\n",
              "          ...,\n",
              "          [228],\n",
              "          [225],\n",
              "          [228]],\n",
              "  \n",
              "         [[120],\n",
              "          [171],\n",
              "          [224],\n",
              "          ...,\n",
              "          [226],\n",
              "          [227],\n",
              "          [223]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [ 85],\n",
              "          [114],\n",
              "          ...,\n",
              "          [195],\n",
              "          [210],\n",
              "          [205]],\n",
              "  \n",
              "         [[118],\n",
              "          [130],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [187],\n",
              "          [206],\n",
              "          [212]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 97],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [187],\n",
              "          [222],\n",
              "          [216]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[210],\n",
              "          [177],\n",
              "          [216],\n",
              "          ...,\n",
              "          [116],\n",
              "          [110],\n",
              "          [111]],\n",
              "  \n",
              "         [[203],\n",
              "          [178],\n",
              "          [211],\n",
              "          ...,\n",
              "          [106],\n",
              "          [107],\n",
              "          [105]],\n",
              "  \n",
              "         [[181],\n",
              "          [185],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [101],\n",
              "          [109]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[229],\n",
              "          [229],\n",
              "          [227],\n",
              "          ...,\n",
              "          [231],\n",
              "          [236],\n",
              "          [236]],\n",
              "  \n",
              "         [[228],\n",
              "          [230],\n",
              "          [234],\n",
              "          ...,\n",
              "          [228],\n",
              "          [229],\n",
              "          [231]],\n",
              "  \n",
              "         [[227],\n",
              "          [226],\n",
              "          [229],\n",
              "          ...,\n",
              "          [224],\n",
              "          [223],\n",
              "          [228]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[110],\n",
              "          [108],\n",
              "          [107],\n",
              "          ...,\n",
              "          [118],\n",
              "          [108],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[107],\n",
              "          [108],\n",
              "          [110],\n",
              "          ...,\n",
              "          [117],\n",
              "          [131],\n",
              "          [108]],\n",
              "  \n",
              "         [[110],\n",
              "          [109],\n",
              "          [108],\n",
              "          ...,\n",
              "          [120],\n",
              "          [149],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [191],\n",
              "          [182],\n",
              "          ...,\n",
              "          [171],\n",
              "          [169],\n",
              "          [177]],\n",
              "  \n",
              "         [[198],\n",
              "          [208],\n",
              "          [183],\n",
              "          ...,\n",
              "          [165],\n",
              "          [160],\n",
              "          [178]],\n",
              "  \n",
              "         [[182],\n",
              "          [158],\n",
              "          [166],\n",
              "          ...,\n",
              "          [173],\n",
              "          [166],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[138],\n",
              "          [156],\n",
              "          [129],\n",
              "          ...,\n",
              "          [173],\n",
              "          [214],\n",
              "          [204]],\n",
              "  \n",
              "         [[153],\n",
              "          [159],\n",
              "          [153],\n",
              "          ...,\n",
              "          [157],\n",
              "          [210],\n",
              "          [209]],\n",
              "  \n",
              "         [[161],\n",
              "          [163],\n",
              "          [162],\n",
              "          ...,\n",
              "          [170],\n",
              "          [196],\n",
              "          [213]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 36],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [239],\n",
              "          [238],\n",
              "          [238]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 39],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [237],\n",
              "          [237],\n",
              "          [237]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 38],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [237],\n",
              "          [236],\n",
              "          [232]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[113],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[117],\n",
              "          [100],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 53],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [120],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 56],\n",
              "          [ 51]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 11],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 64],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 60],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 77],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 77],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 85],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[105],\n",
              "          [108],\n",
              "          [112],\n",
              "          ...,\n",
              "          [128],\n",
              "          [128],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [104],\n",
              "          [100],\n",
              "          ...,\n",
              "          [128],\n",
              "          [127],\n",
              "          [129]],\n",
              "  \n",
              "         [[100],\n",
              "          [106],\n",
              "          [106],\n",
              "          ...,\n",
              "          [127],\n",
              "          [129],\n",
              "          [132]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 42],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [152],\n",
              "          [155],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 48],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [151],\n",
              "          [149],\n",
              "          [151]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 53],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [147],\n",
              "          [144],\n",
              "          [139]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[157],\n",
              "          [160],\n",
              "          [163],\n",
              "          ...,\n",
              "          [244],\n",
              "          [232],\n",
              "          [228]],\n",
              "  \n",
              "         [[163],\n",
              "          [164],\n",
              "          [167],\n",
              "          ...,\n",
              "          [242],\n",
              "          [223],\n",
              "          [237]],\n",
              "  \n",
              "         [[165],\n",
              "          [168],\n",
              "          [170],\n",
              "          ...,\n",
              "          [242],\n",
              "          [230],\n",
              "          [229]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [176],\n",
              "          [173],\n",
              "          [155]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [151],\n",
              "          [153],\n",
              "          [146]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [163],\n",
              "          [156],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[175],\n",
              "          [176],\n",
              "          [176],\n",
              "          ...,\n",
              "          [183],\n",
              "          [183],\n",
              "          [183]],\n",
              "  \n",
              "         [[175],\n",
              "          [176],\n",
              "          [176],\n",
              "          ...,\n",
              "          [183],\n",
              "          [183],\n",
              "          [183]],\n",
              "  \n",
              "         [[175],\n",
              "          [175],\n",
              "          [175],\n",
              "          ...,\n",
              "          [182],\n",
              "          [182],\n",
              "          [183]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[137],\n",
              "          [137],\n",
              "          [135],\n",
              "          ...,\n",
              "          [161],\n",
              "          [153],\n",
              "          [125]],\n",
              "  \n",
              "         [[139],\n",
              "          [137],\n",
              "          [135],\n",
              "          ...,\n",
              "          [162],\n",
              "          [155],\n",
              "          [119]],\n",
              "  \n",
              "         [[139],\n",
              "          [137],\n",
              "          [135],\n",
              "          ...,\n",
              "          [155],\n",
              "          [152],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[119],\n",
              "          [122],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 83],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[116],\n",
              "          [117],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 82],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[114],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 81],\n",
              "          [ 79]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 89],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [154],\n",
              "          [157],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 70],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [151],\n",
              "          [161],\n",
              "          [160]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 62],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [142],\n",
              "          [156],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 49],\n",
              "          [ 55],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 72],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 78],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 73],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 67],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 74],\n",
              "          [ 83]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 96],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [164],\n",
              "          [160],\n",
              "          [157]],\n",
              "  \n",
              "         [[127],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [173],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         [[156],\n",
              "          [159],\n",
              "          [149],\n",
              "          ...,\n",
              "          [106],\n",
              "          [102],\n",
              "          [100]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [118],\n",
              "          [125],\n",
              "          ...,\n",
              "          [125],\n",
              "          [130],\n",
              "          [127]],\n",
              "  \n",
              "         [[117],\n",
              "          [114],\n",
              "          [119],\n",
              "          ...,\n",
              "          [126],\n",
              "          [117],\n",
              "          [136]],\n",
              "  \n",
              "         [[111],\n",
              "          [100],\n",
              "          [123],\n",
              "          ...,\n",
              "          [134],\n",
              "          [130],\n",
              "          [136]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[109],\n",
              "          [125],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [102],\n",
              "          [112]],\n",
              "  \n",
              "         [[132],\n",
              "          [130],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 95],\n",
              "          [115]],\n",
              "  \n",
              "         [[139],\n",
              "          [124],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 91],\n",
              "          [100]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 33],\n",
              "          [ 38],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 45],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 60],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [117],\n",
              "          [107],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 66],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [118],\n",
              "          [107],\n",
              "          [ 41]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 65],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [185],\n",
              "          [149],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 64],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [174],\n",
              "          [168],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 44],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 61],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[102],\n",
              "          [103],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 93],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[102],\n",
              "          [103],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 91],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[101],\n",
              "          [108],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 95],\n",
              "          [ 95]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[119],\n",
              "          [116],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 13],\n",
              "          [  6]],\n",
              "  \n",
              "         [[119],\n",
              "          [113],\n",
              "          [119],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 10],\n",
              "          [  7]],\n",
              "  \n",
              "         [[127],\n",
              "          [123],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [  8],\n",
              "          [ 12]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 67],\n",
              "          [ 68],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 84],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 71],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 85],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 71],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 84],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [111],\n",
              "          [115],\n",
              "          ...,\n",
              "          [155],\n",
              "          [155],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [106],\n",
              "          [112],\n",
              "          ...,\n",
              "          [153],\n",
              "          [152],\n",
              "          [146]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [107],\n",
              "          [114],\n",
              "          ...,\n",
              "          [153],\n",
              "          [148],\n",
              "          [147]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 24],\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 32],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 26],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 31],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 29],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 26],\n",
              "          [ 26]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[153],\n",
              "          [154],\n",
              "          [161],\n",
              "          ...,\n",
              "          [150],\n",
              "          [160],\n",
              "          [159]],\n",
              "  \n",
              "         [[156],\n",
              "          [154],\n",
              "          [164],\n",
              "          ...,\n",
              "          [160],\n",
              "          [157],\n",
              "          [155]],\n",
              "  \n",
              "         [[156],\n",
              "          [156],\n",
              "          [158],\n",
              "          ...,\n",
              "          [153],\n",
              "          [156],\n",
              "          [159]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 30],\n",
              "          [ 31],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 17],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 42],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 21],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 30],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 22],\n",
              "          [ 27]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 72],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [107],\n",
              "          [135],\n",
              "          [134]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 73],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [128],\n",
              "          [125],\n",
              "          [133]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 68],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [117],\n",
              "          [119],\n",
              "          [130]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[171],\n",
              "          [172],\n",
              "          [168],\n",
              "          ...,\n",
              "          [175],\n",
              "          [178],\n",
              "          [175]],\n",
              "  \n",
              "         [[175],\n",
              "          [170],\n",
              "          [168],\n",
              "          ...,\n",
              "          [173],\n",
              "          [174],\n",
              "          [174]],\n",
              "  \n",
              "         [[175],\n",
              "          [175],\n",
              "          [165],\n",
              "          ...,\n",
              "          [177],\n",
              "          [174],\n",
              "          [172]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [128],\n",
              "          [130],\n",
              "          ...,\n",
              "          [124],\n",
              "          [121],\n",
              "          [123]],\n",
              "  \n",
              "         [[135],\n",
              "          [127],\n",
              "          [129],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [128]],\n",
              "  \n",
              "         [[145],\n",
              "          [137],\n",
              "          [131],\n",
              "          ...,\n",
              "          [151],\n",
              "          [143],\n",
              "          [132]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 22],\n",
              "          [ 18],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 17],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [115],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [105],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [134],\n",
              "          [130],\n",
              "          ...,\n",
              "          [121],\n",
              "          [134],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 21],\n",
              "          [186],\n",
              "          [189],\n",
              "          ...,\n",
              "          [148],\n",
              "          [155],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [161],\n",
              "          [161],\n",
              "          ...,\n",
              "          [166],\n",
              "          [178],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 25],\n",
              "          [ 25]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 3],\n",
              "          [ 4],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [62],\n",
              "          [35],\n",
              "          [45]],\n",
              "  \n",
              "         [[ 3],\n",
              "          [ 4],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [49],\n",
              "          [25],\n",
              "          [33]],\n",
              "  \n",
              "         [[ 4],\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          ...,\n",
              "          [50],\n",
              "          [27],\n",
              "          [19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[90],\n",
              "          [76],\n",
              "          [75],\n",
              "          ...,\n",
              "          [11],\n",
              "          [12],\n",
              "          [14]],\n",
              "  \n",
              "         [[73],\n",
              "          [71],\n",
              "          [80],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 9],\n",
              "          [13]],\n",
              "  \n",
              "         [[63],\n",
              "          [71],\n",
              "          [89],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 8],\n",
              "          [16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 31],\n",
              "          [ 29],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 55],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 21],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 62],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 27],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 58],\n",
              "          [ 61]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 66],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 99],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 45],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 57],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [109],\n",
              "          [109],\n",
              "          [ 81]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [253],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [106],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [110],\n",
              "          [107]],\n",
              "  \n",
              "         [[125],\n",
              "          [106],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 94],\n",
              "          [106]],\n",
              "  \n",
              "         [[108],\n",
              "          [166],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 87],\n",
              "          [ 95]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[128],\n",
              "          [148],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 52],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[141],\n",
              "          [155],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 56],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[143],\n",
              "          [159],\n",
              "          [161],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 58],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [168],\n",
              "          [198],\n",
              "          ...,\n",
              "          [125],\n",
              "          [172],\n",
              "          [134]],\n",
              "  \n",
              "         [[154],\n",
              "          [129],\n",
              "          [155],\n",
              "          ...,\n",
              "          [132],\n",
              "          [192],\n",
              "          [163]],\n",
              "  \n",
              "         [[141],\n",
              "          [155],\n",
              "          [132],\n",
              "          ...,\n",
              "          [190],\n",
              "          [198],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 22],\n",
              "          [ 24],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 40],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 20],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 45],\n",
              "          [ 47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 68],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 96],\n",
              "          [ 94]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 68],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 89],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 65],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [100],\n",
              "          [102],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 57],\n",
              "          [174],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 58],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [222],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 79],\n",
              "          [118]],\n",
              "  \n",
              "         [[136],\n",
              "          [165],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 89],\n",
              "          [ 85]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [177],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 44],\n",
              "          [161]],\n",
              "  \n",
              "         [[122],\n",
              "          [122],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 23],\n",
              "          [199]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [130],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 39],\n",
              "          [ 21]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[100],\n",
              "          [ 99],\n",
              "          [100],\n",
              "          ...,\n",
              "          [117],\n",
              "          [110],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 88],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [106],\n",
              "          [108],\n",
              "          [110]],\n",
              "  \n",
              "         [[160],\n",
              "          [186],\n",
              "          [102],\n",
              "          ...,\n",
              "          [118],\n",
              "          [111],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [184],\n",
              "          [179],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 80],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[167],\n",
              "          [128],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 81],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[168],\n",
              "          [181],\n",
              "          [176],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 73],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[228],\n",
              "          [236],\n",
              "          [219],\n",
              "          ...,\n",
              "          [134],\n",
              "          [134],\n",
              "          [136]],\n",
              "  \n",
              "         [[230],\n",
              "          [249],\n",
              "          [244],\n",
              "          ...,\n",
              "          [139],\n",
              "          [138],\n",
              "          [137]],\n",
              "  \n",
              "         [[223],\n",
              "          [252],\n",
              "          [245],\n",
              "          ...,\n",
              "          [141],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 24],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 28],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 40],\n",
              "          [ 22]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 66],\n",
              "          [ 68],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [187],\n",
              "          [186],\n",
              "          [186]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 64],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [188],\n",
              "          [186],\n",
              "          [188]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 61],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [189],\n",
              "          [188],\n",
              "          [188]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 53],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [189],\n",
              "          [199],\n",
              "          [211]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 47],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [195],\n",
              "          [206],\n",
              "          [224]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 47],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [199],\n",
              "          [213],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 50],\n",
              "          [ 51],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 48],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 60],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 55],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 64],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 61],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [130],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 51],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[117],\n",
              "          [140],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 41],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[129],\n",
              "          [156],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 47],\n",
              "          [ 45]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 71],\n",
              "          [ 51],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [128],\n",
              "          [126],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 58],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [137],\n",
              "          [133],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 72],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [144],\n",
              "          [141],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 63],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 58],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 59],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 52],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 66],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 55],\n",
              "          [ 49]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 15],\n",
              "          [ 15],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 15],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 17],\n",
              "          [ 18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 80],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [124],\n",
              "          [125],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 85],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [123],\n",
              "          [118],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 82],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [117],\n",
              "          [111],\n",
              "          [ 88]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[34],\n",
              "          [34],\n",
              "          [33],\n",
              "          ...,\n",
              "          [28],\n",
              "          [28],\n",
              "          [28]],\n",
              "  \n",
              "         [[35],\n",
              "          [35],\n",
              "          [34],\n",
              "          ...,\n",
              "          [29],\n",
              "          [29],\n",
              "          [28]],\n",
              "  \n",
              "         [[37],\n",
              "          [36],\n",
              "          [35],\n",
              "          ...,\n",
              "          [30],\n",
              "          [31],\n",
              "          [28]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 2],\n",
              "          [ 1],\n",
              "          ...,\n",
              "          [17],\n",
              "          [22],\n",
              "          [29]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 2],\n",
              "          [ 1],\n",
              "          ...,\n",
              "          [14],\n",
              "          [11],\n",
              "          [20]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          ...,\n",
              "          [13],\n",
              "          [ 8],\n",
              "          [14]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[240],\n",
              "          [244],\n",
              "          [239],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [ 12],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[240],\n",
              "          [246],\n",
              "          [243],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 19],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[240],\n",
              "          [249],\n",
              "          [241],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  4],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 49],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [147],\n",
              "          [108],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [130],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [131],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [  4],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [140],\n",
              "          [ 29],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[102],\n",
              "          [100],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 30],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [101],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 46],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[106],\n",
              "          [100],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 59],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 82],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [169],\n",
              "          [165],\n",
              "          [160]],\n",
              "  \n",
              "         [[106],\n",
              "          [ 97],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [174],\n",
              "          [158],\n",
              "          [167]],\n",
              "  \n",
              "         [[137],\n",
              "          [142],\n",
              "          [131],\n",
              "          ...,\n",
              "          [175],\n",
              "          [152],\n",
              "          [161]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[61],\n",
              "          [59],\n",
              "          [65],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[55],\n",
              "          [60],\n",
              "          [62],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         [[58],\n",
              "          [55],\n",
              "          [62],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          [ 1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[58],\n",
              "          [61],\n",
              "          [60],\n",
              "          ...,\n",
              "          [67],\n",
              "          [63],\n",
              "          [61]],\n",
              "  \n",
              "         [[58],\n",
              "          [61],\n",
              "          [60],\n",
              "          ...,\n",
              "          [67],\n",
              "          [65],\n",
              "          [62]],\n",
              "  \n",
              "         [[56],\n",
              "          [61],\n",
              "          [63],\n",
              "          ...,\n",
              "          [70],\n",
              "          [66],\n",
              "          [64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[238],\n",
              "          [237],\n",
              "          [245],\n",
              "          ...,\n",
              "          [248],\n",
              "          [241],\n",
              "          [239]],\n",
              "  \n",
              "         [[247],\n",
              "          [228],\n",
              "          [235],\n",
              "          ...,\n",
              "          [240],\n",
              "          [234],\n",
              "          [239]],\n",
              "  \n",
              "         [[242],\n",
              "          [ 90],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 88],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[244],\n",
              "          [ 90],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 91],\n",
              "          [239]],\n",
              "  \n",
              "         [[247],\n",
              "          [234],\n",
              "          [244],\n",
              "          ...,\n",
              "          [250],\n",
              "          [241],\n",
              "          [239]],\n",
              "  \n",
              "         [[239],\n",
              "          [239],\n",
              "          [239],\n",
              "          ...,\n",
              "          [239],\n",
              "          [239],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[249],\n",
              "          [243],\n",
              "          [234],\n",
              "          ...,\n",
              "          [232],\n",
              "          [231],\n",
              "          [237]],\n",
              "  \n",
              "         [[243],\n",
              "          [240],\n",
              "          [232],\n",
              "          ...,\n",
              "          [230],\n",
              "          [229],\n",
              "          [228]],\n",
              "  \n",
              "         [[243],\n",
              "          [243],\n",
              "          [234],\n",
              "          ...,\n",
              "          [230],\n",
              "          [230],\n",
              "          [228]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 93],\n",
              "          [ 88],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [115],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 92],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [118],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 92],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [120],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[188],\n",
              "          [188],\n",
              "          [188],\n",
              "          ...,\n",
              "          [187],\n",
              "          [185],\n",
              "          [172]],\n",
              "  \n",
              "         [[185],\n",
              "          [189],\n",
              "          [191],\n",
              "          ...,\n",
              "          [187],\n",
              "          [185],\n",
              "          [162]],\n",
              "  \n",
              "         [[184],\n",
              "          [186],\n",
              "          [187],\n",
              "          ...,\n",
              "          [186],\n",
              "          [180],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [136],\n",
              "          [133],\n",
              "          ...,\n",
              "          [144],\n",
              "          [143],\n",
              "          [141]],\n",
              "  \n",
              "         [[143],\n",
              "          [133],\n",
              "          [135],\n",
              "          ...,\n",
              "          [144],\n",
              "          [140],\n",
              "          [143]],\n",
              "  \n",
              "         [[147],\n",
              "          [136],\n",
              "          [146],\n",
              "          ...,\n",
              "          [142],\n",
              "          [142],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [120],\n",
              "          [126],\n",
              "          ...,\n",
              "          [121],\n",
              "          [118],\n",
              "          [111]],\n",
              "  \n",
              "         [[122],\n",
              "          [124],\n",
              "          [123],\n",
              "          ...,\n",
              "          [112],\n",
              "          [105],\n",
              "          [107]],\n",
              "  \n",
              "         [[120],\n",
              "          [119],\n",
              "          [120],\n",
              "          ...,\n",
              "          [113],\n",
              "          [106],\n",
              "          [108]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[219],\n",
              "          [231],\n",
              "          [230],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 66],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[227],\n",
              "          [236],\n",
              "          [238],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[231],\n",
              "          [238],\n",
              "          [242],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 54],\n",
              "          [ 72]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 38],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [194],\n",
              "          [190],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 39],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [192],\n",
              "          [163],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 30],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [168],\n",
              "          [ 92],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[144],\n",
              "          [116],\n",
              "          [113],\n",
              "          ...,\n",
              "          [101],\n",
              "          [103],\n",
              "          [102]],\n",
              "  \n",
              "         [[129],\n",
              "          [116],\n",
              "          [109],\n",
              "          ...,\n",
              "          [106],\n",
              "          [111],\n",
              "          [110]],\n",
              "  \n",
              "         [[142],\n",
              "          [123],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 97],\n",
              "          [ 92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 30],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 37],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 41],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 34],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 37],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 37],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[129],\n",
              "          [113],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [217],\n",
              "          [217],\n",
              "          [220]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 65],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [219],\n",
              "          [219],\n",
              "          [218]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [219],\n",
              "          [214],\n",
              "          [216]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[196],\n",
              "          [196],\n",
              "          [200],\n",
              "          ...,\n",
              "          [200],\n",
              "          [197],\n",
              "          [194]],\n",
              "  \n",
              "         [[199],\n",
              "          [196],\n",
              "          [201],\n",
              "          ...,\n",
              "          [201],\n",
              "          [197],\n",
              "          [193]],\n",
              "  \n",
              "         [[204],\n",
              "          [201],\n",
              "          [198],\n",
              "          ...,\n",
              "          [194],\n",
              "          [196],\n",
              "          [194]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 69],\n",
              "          [ 54],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [207],\n",
              "          [182],\n",
              "          [181]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 58],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [180],\n",
              "          [190],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 54],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [195],\n",
              "          [178],\n",
              "          [200]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[146],\n",
              "          [140],\n",
              "          [160],\n",
              "          ...,\n",
              "          [178],\n",
              "          [117],\n",
              "          [204]],\n",
              "  \n",
              "         [[150],\n",
              "          [146],\n",
              "          [191],\n",
              "          ...,\n",
              "          [174],\n",
              "          [194],\n",
              "          [196]],\n",
              "  \n",
              "         [[166],\n",
              "          [133],\n",
              "          [120],\n",
              "          ...,\n",
              "          [156],\n",
              "          [179],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 43],\n",
              "          [ 31],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [134],\n",
              "          [158],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 29],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [203],\n",
              "          [205],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 29],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [187],\n",
              "          [180],\n",
              "          [115]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[248],\n",
              "          [239],\n",
              "          [244],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  2],\n",
              "          [  1]],\n",
              "  \n",
              "         [[246],\n",
              "          [243],\n",
              "          [241],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  2],\n",
              "          [  1]],\n",
              "  \n",
              "         [[250],\n",
              "          [247],\n",
              "          [154],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  2],\n",
              "          [  2]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[57],\n",
              "          [63],\n",
              "          [57],\n",
              "          ...,\n",
              "          [90],\n",
              "          [94],\n",
              "          [93]],\n",
              "  \n",
              "         [[52],\n",
              "          [66],\n",
              "          [58],\n",
              "          ...,\n",
              "          [89],\n",
              "          [85],\n",
              "          [81]],\n",
              "  \n",
              "         [[63],\n",
              "          [60],\n",
              "          [58],\n",
              "          ...,\n",
              "          [84],\n",
              "          [84],\n",
              "          [78]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[46],\n",
              "          [47],\n",
              "          [47],\n",
              "          ...,\n",
              "          [90],\n",
              "          [79],\n",
              "          [97]],\n",
              "  \n",
              "         [[57],\n",
              "          [61],\n",
              "          [56],\n",
              "          ...,\n",
              "          [89],\n",
              "          [61],\n",
              "          [69]],\n",
              "  \n",
              "         [[47],\n",
              "          [58],\n",
              "          [59],\n",
              "          ...,\n",
              "          [70],\n",
              "          [99],\n",
              "          [62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[11],\n",
              "          [11],\n",
              "          [12],\n",
              "          ...,\n",
              "          [35],\n",
              "          [31],\n",
              "          [36]],\n",
              "  \n",
              "         [[16],\n",
              "          [23],\n",
              "          [16],\n",
              "          ...,\n",
              "          [40],\n",
              "          [41],\n",
              "          [48]],\n",
              "  \n",
              "         [[13],\n",
              "          [17],\n",
              "          [21],\n",
              "          ...,\n",
              "          [46],\n",
              "          [46],\n",
              "          [45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[52],\n",
              "          [53],\n",
              "          [54],\n",
              "          ...,\n",
              "          [70],\n",
              "          [68],\n",
              "          [67]],\n",
              "  \n",
              "         [[51],\n",
              "          [54],\n",
              "          [58],\n",
              "          ...,\n",
              "          [70],\n",
              "          [67],\n",
              "          [67]],\n",
              "  \n",
              "         [[54],\n",
              "          [60],\n",
              "          [61],\n",
              "          ...,\n",
              "          [68],\n",
              "          [64],\n",
              "          [67]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[144],\n",
              "          [148],\n",
              "          [162],\n",
              "          ...,\n",
              "          [178],\n",
              "          [172],\n",
              "          [164]],\n",
              "  \n",
              "         [[160],\n",
              "          [165],\n",
              "          [172],\n",
              "          ...,\n",
              "          [121],\n",
              "          [154],\n",
              "          [171]],\n",
              "  \n",
              "         [[166],\n",
              "          [167],\n",
              "          [170],\n",
              "          ...,\n",
              "          [116],\n",
              "          [169],\n",
              "          [176]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[135],\n",
              "          [152],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 70],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[137],\n",
              "          [149],\n",
              "          [143],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 65],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[121],\n",
              "          [131],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 65],\n",
              "          [ 68]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [252],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [253],\n",
              "          ...,\n",
              "          [252],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [222],\n",
              "          ...,\n",
              "          [216],\n",
              "          [251],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [249],\n",
              "          [201],\n",
              "          ...,\n",
              "          [194],\n",
              "          [246],\n",
              "          [254]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [252],\n",
              "          ...,\n",
              "          [243],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [253],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[172],\n",
              "          [178],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 34],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[166],\n",
              "          [168],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 24],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[142],\n",
              "          [133],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 23],\n",
              "          [ 42]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 37],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 10],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 36],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 43],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 32],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [ 24],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 13],\n",
              "          [ 11],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [146],\n",
              "          [136],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [  6],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [150],\n",
              "          [124],\n",
              "          [139]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [  8],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [146],\n",
              "          [115],\n",
              "          [139]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [119],\n",
              "          [ 98],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [132],\n",
              "          [123],\n",
              "          [116]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [115],\n",
              "          [104],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 90],\n",
              "          [ 92],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  5],\n",
              "          [  6]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  7],\n",
              "          [  6]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 95],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  4]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  3],\n",
              "          [  3],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [154],\n",
              "          [149],\n",
              "          [155]],\n",
              "  \n",
              "         [[  3],\n",
              "          [  2],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [150],\n",
              "          [148],\n",
              "          [143]],\n",
              "  \n",
              "         [[  3],\n",
              "          [  3],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [137],\n",
              "          [134],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 47],\n",
              "          [ 19],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 35],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 28],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 22],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 34],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 44],\n",
              "          [ 95]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[128],\n",
              "          [156],\n",
              "          [176],\n",
              "          ...,\n",
              "          [151],\n",
              "          [108],\n",
              "          [101]],\n",
              "  \n",
              "         [[131],\n",
              "          [167],\n",
              "          [169],\n",
              "          ...,\n",
              "          [132],\n",
              "          [ 95],\n",
              "          [105]],\n",
              "  \n",
              "         [[201],\n",
              "          [195],\n",
              "          [195],\n",
              "          ...,\n",
              "          [246],\n",
              "          [247],\n",
              "          [249]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[126],\n",
              "          [128],\n",
              "          [126],\n",
              "          ...,\n",
              "          [103],\n",
              "          [102],\n",
              "          [102]],\n",
              "  \n",
              "         [[130],\n",
              "          [131],\n",
              "          [129],\n",
              "          ...,\n",
              "          [105],\n",
              "          [103],\n",
              "          [105]],\n",
              "  \n",
              "         [[133],\n",
              "          [133],\n",
              "          [131],\n",
              "          ...,\n",
              "          [105],\n",
              "          [105],\n",
              "          [104]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [126],\n",
              "          [129],\n",
              "          ...,\n",
              "          [126],\n",
              "          [127],\n",
              "          [129]],\n",
              "  \n",
              "         [[107],\n",
              "          [125],\n",
              "          [129],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [126]],\n",
              "  \n",
              "         [[117],\n",
              "          [126],\n",
              "          [131],\n",
              "          ...,\n",
              "          [131],\n",
              "          [129],\n",
              "          [130]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 46],\n",
              "          [ 38],\n",
              "          [102],\n",
              "          ...,\n",
              "          [179],\n",
              "          [179],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 37],\n",
              "          [101],\n",
              "          ...,\n",
              "          [181],\n",
              "          [181],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 41],\n",
              "          [104],\n",
              "          ...,\n",
              "          [181],\n",
              "          [182],\n",
              "          [ 37]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[164],\n",
              "          [160],\n",
              "          [156],\n",
              "          ...,\n",
              "          [167],\n",
              "          [160],\n",
              "          [146]],\n",
              "  \n",
              "         [[167],\n",
              "          [165],\n",
              "          [161],\n",
              "          ...,\n",
              "          [170],\n",
              "          [165],\n",
              "          [154]],\n",
              "  \n",
              "         [[166],\n",
              "          [162],\n",
              "          [164],\n",
              "          ...,\n",
              "          [173],\n",
              "          [167],\n",
              "          [157]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 61],\n",
              "          [ 67],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [147],\n",
              "          [142],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 67],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [157],\n",
              "          [162],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 75],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [173],\n",
              "          [170],\n",
              "          [168]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [171],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 74],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[167],\n",
              "          [174],\n",
              "          [193],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 61],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[135],\n",
              "          [148],\n",
              "          [174],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 82],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[158],\n",
              "          [162],\n",
              "          [162],\n",
              "          ...,\n",
              "          [142],\n",
              "          [132],\n",
              "          [140]],\n",
              "  \n",
              "         [[158],\n",
              "          [154],\n",
              "          [150],\n",
              "          ...,\n",
              "          [136],\n",
              "          [131],\n",
              "          [141]],\n",
              "  \n",
              "         [[133],\n",
              "          [151],\n",
              "          [152],\n",
              "          ...,\n",
              "          [140],\n",
              "          [136],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 30],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [103],\n",
              "          [104],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 31],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [106],\n",
              "          [100],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 30],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 92],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 89],\n",
              "          [110],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 29],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [110],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 22],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [108],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 16],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 82],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 12],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 89],\n",
              "          [110],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [  8],\n",
              "          [  8]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [155],\n",
              "          [132],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  7]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 36],\n",
              "          [ 62],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 56],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 51],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 55],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 45],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 55],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 47],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 80],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 56],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 96],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 56],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 97],\n",
              "          [ 95]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[31],\n",
              "          [35],\n",
              "          [37],\n",
              "          ...,\n",
              "          [35],\n",
              "          [34],\n",
              "          [31]],\n",
              "  \n",
              "         [[34],\n",
              "          [36],\n",
              "          [38],\n",
              "          ...,\n",
              "          [37],\n",
              "          [36],\n",
              "          [33]],\n",
              "  \n",
              "         [[36],\n",
              "          [37],\n",
              "          [39],\n",
              "          ...,\n",
              "          [38],\n",
              "          [37],\n",
              "          [34]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[20],\n",
              "          [21],\n",
              "          [23],\n",
              "          ...,\n",
              "          [23],\n",
              "          [23],\n",
              "          [22]],\n",
              "  \n",
              "         [[18],\n",
              "          [21],\n",
              "          [22],\n",
              "          ...,\n",
              "          [22],\n",
              "          [23],\n",
              "          [22]],\n",
              "  \n",
              "         [[17],\n",
              "          [19],\n",
              "          [19],\n",
              "          ...,\n",
              "          [17],\n",
              "          [18],\n",
              "          [16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 55],\n",
              "          [ 54],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [185],\n",
              "          [200],\n",
              "          [188]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 55],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [191],\n",
              "          [193],\n",
              "          [193]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 56],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [194],\n",
              "          [196],\n",
              "          [195]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 52],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [186],\n",
              "          [188],\n",
              "          [191]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 71],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [173],\n",
              "          [182],\n",
              "          [194]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 53],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [160],\n",
              "          [172],\n",
              "          [176]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[250],\n",
              "          [244],\n",
              "          [246],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [248]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[231],\n",
              "          [224],\n",
              "          [226],\n",
              "          ...,\n",
              "          [250],\n",
              "          [247],\n",
              "          [243]],\n",
              "  \n",
              "         [[231],\n",
              "          [223],\n",
              "          [227],\n",
              "          ...,\n",
              "          [239],\n",
              "          [237],\n",
              "          [187]],\n",
              "  \n",
              "         [[224],\n",
              "          [233],\n",
              "          [229],\n",
              "          ...,\n",
              "          [243],\n",
              "          [247],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 69],\n",
              "          [ 54],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [109],\n",
              "          [117],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 65],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [124],\n",
              "          [129],\n",
              "          [128]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 69],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [129],\n",
              "          [136],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[109],\n",
              "          [109],\n",
              "          [118],\n",
              "          ...,\n",
              "          [103],\n",
              "          [119],\n",
              "          [107]],\n",
              "  \n",
              "         [[116],\n",
              "          [120],\n",
              "          [109],\n",
              "          ...,\n",
              "          [130],\n",
              "          [126],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [107],\n",
              "          [123],\n",
              "          ...,\n",
              "          [144],\n",
              "          [122],\n",
              "          [148]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[117],\n",
              "          [118],\n",
              "          [118],\n",
              "          ...,\n",
              "          [168],\n",
              "          [167],\n",
              "          [166]],\n",
              "  \n",
              "         [[118],\n",
              "          [118],\n",
              "          [118],\n",
              "          ...,\n",
              "          [169],\n",
              "          [167],\n",
              "          [168]],\n",
              "  \n",
              "         [[117],\n",
              "          [119],\n",
              "          [119],\n",
              "          ...,\n",
              "          [167],\n",
              "          [168],\n",
              "          [168]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[104],\n",
              "          [110],\n",
              "          [115],\n",
              "          ...,\n",
              "          [204],\n",
              "          [197],\n",
              "          [196]],\n",
              "  \n",
              "         [[107],\n",
              "          [112],\n",
              "          [115],\n",
              "          ...,\n",
              "          [199],\n",
              "          [200],\n",
              "          [189]],\n",
              "  \n",
              "         [[111],\n",
              "          [115],\n",
              "          [123],\n",
              "          ...,\n",
              "          [200],\n",
              "          [195],\n",
              "          [200]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 38],\n",
              "          [ 63],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 19],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 44],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 30],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 73],\n",
              "          [236],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 31],\n",
              "          [ 29]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 11],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 31],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [ 10],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[130],\n",
              "          [ 78],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 10],\n",
              "          [ 10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[178],\n",
              "          [182],\n",
              "          [192],\n",
              "          ...,\n",
              "          [127],\n",
              "          [ 87],\n",
              "          [124]],\n",
              "  \n",
              "         [[168],\n",
              "          [187],\n",
              "          [176],\n",
              "          ...,\n",
              "          [181],\n",
              "          [175],\n",
              "          [242]],\n",
              "  \n",
              "         [[132],\n",
              "          [131],\n",
              "          [124],\n",
              "          ...,\n",
              "          [234],\n",
              "          [192],\n",
              "          [247]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[202],\n",
              "          [204],\n",
              "          [205],\n",
              "          ...,\n",
              "          [199],\n",
              "          [201],\n",
              "          [200]],\n",
              "  \n",
              "         [[202],\n",
              "          [200],\n",
              "          [205],\n",
              "          ...,\n",
              "          [202],\n",
              "          [202],\n",
              "          [203]],\n",
              "  \n",
              "         [[203],\n",
              "          [201],\n",
              "          [197],\n",
              "          ...,\n",
              "          [203],\n",
              "          [203],\n",
              "          [203]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[189],\n",
              "          [188],\n",
              "          [189],\n",
              "          ...,\n",
              "          [173],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         [[187],\n",
              "          [188],\n",
              "          [187],\n",
              "          ...,\n",
              "          [168],\n",
              "          [172],\n",
              "          [171]],\n",
              "  \n",
              "         [[187],\n",
              "          [188],\n",
              "          [186],\n",
              "          ...,\n",
              "          [175],\n",
              "          [173],\n",
              "          [173]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[209],\n",
              "          [207],\n",
              "          [210],\n",
              "          ...,\n",
              "          [196],\n",
              "          [194],\n",
              "          [193]],\n",
              "  \n",
              "         [[210],\n",
              "          [208],\n",
              "          [209],\n",
              "          ...,\n",
              "          [194],\n",
              "          [194],\n",
              "          [193]],\n",
              "  \n",
              "         [[205],\n",
              "          [211],\n",
              "          [209],\n",
              "          ...,\n",
              "          [190],\n",
              "          [189],\n",
              "          [192]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  9],\n",
              "          [  8],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 95],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  8],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 99],\n",
              "          [100]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[144],\n",
              "          [110],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 39],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[109],\n",
              "          [116],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 36],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[119],\n",
              "          [135],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 38],\n",
              "          [ 37]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[125],\n",
              "          [123],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 74],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[123],\n",
              "          [120],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 66],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[127],\n",
              "          [133],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          [ 75]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 81],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 90],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 76],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 73],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 87],\n",
              "          [ 81]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[133],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [109],\n",
              "          [101],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[132],\n",
              "          [117],\n",
              "          [124],\n",
              "          ...,\n",
              "          [163],\n",
              "          [156],\n",
              "          [142]],\n",
              "  \n",
              "         [[110],\n",
              "          [105],\n",
              "          [108],\n",
              "          ...,\n",
              "          [250],\n",
              "          [246],\n",
              "          [238]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [136],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 63],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[127],\n",
              "          [115],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 71],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[109],\n",
              "          [116],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 46],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[145],\n",
              "          [ 22],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 78],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[133],\n",
              "          [151],\n",
              "          [185],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 50],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [121],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 55],\n",
              "          [ 51]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 81],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [120],\n",
              "          [133],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 70],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [141],\n",
              "          [120],\n",
              "          [129]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 74],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [108],\n",
              "          [116],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[134],\n",
              "          [129],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 83],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 17],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 83],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 12],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[171],\n",
              "          [181],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 94],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[179],\n",
              "          [181],\n",
              "          [173],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 97],\n",
              "          [112]],\n",
              "  \n",
              "         [[179],\n",
              "          [178],\n",
              "          [179],\n",
              "          ...,\n",
              "          [107],\n",
              "          [104],\n",
              "          [ 99]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[29],\n",
              "          [65],\n",
              "          [28],\n",
              "          ...,\n",
              "          [31],\n",
              "          [18],\n",
              "          [30]],\n",
              "  \n",
              "         [[11],\n",
              "          [59],\n",
              "          [15],\n",
              "          ...,\n",
              "          [46],\n",
              "          [26],\n",
              "          [39]],\n",
              "  \n",
              "         [[10],\n",
              "          [61],\n",
              "          [49],\n",
              "          ...,\n",
              "          [10],\n",
              "          [30],\n",
              "          [35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[48],\n",
              "          [74],\n",
              "          [50],\n",
              "          ...,\n",
              "          [68],\n",
              "          [55],\n",
              "          [ 9]],\n",
              "  \n",
              "         [[53],\n",
              "          [53],\n",
              "          [50],\n",
              "          ...,\n",
              "          [29],\n",
              "          [33],\n",
              "          [19]],\n",
              "  \n",
              "         [[49],\n",
              "          [50],\n",
              "          [49],\n",
              "          ...,\n",
              "          [37],\n",
              "          [17],\n",
              "          [20]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[253],\n",
              "          [248],\n",
              "          [251],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [253]],\n",
              "  \n",
              "         [[253],\n",
              "          [249],\n",
              "          [250],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [254]],\n",
              "  \n",
              "         [[248],\n",
              "          [246],\n",
              "          [251],\n",
              "          ...,\n",
              "          [252],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[243],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [135],\n",
              "          [120],\n",
              "          [121]],\n",
              "  \n",
              "         [[237],\n",
              "          [226],\n",
              "          [230],\n",
              "          ...,\n",
              "          [168],\n",
              "          [ 97],\n",
              "          [137]],\n",
              "  \n",
              "         [[245],\n",
              "          [246],\n",
              "          [227],\n",
              "          ...,\n",
              "          [151],\n",
              "          [134],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[71],\n",
              "          [72],\n",
              "          [72],\n",
              "          ...,\n",
              "          [52],\n",
              "          [30],\n",
              "          [27]],\n",
              "  \n",
              "         [[70],\n",
              "          [72],\n",
              "          [72],\n",
              "          ...,\n",
              "          [70],\n",
              "          [32],\n",
              "          [25]],\n",
              "  \n",
              "         [[73],\n",
              "          [72],\n",
              "          [73],\n",
              "          ...,\n",
              "          [69],\n",
              "          [40],\n",
              "          [26]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[29],\n",
              "          [29],\n",
              "          [29],\n",
              "          ...,\n",
              "          [46],\n",
              "          [47],\n",
              "          [48]],\n",
              "  \n",
              "         [[29],\n",
              "          [29],\n",
              "          [29],\n",
              "          ...,\n",
              "          [44],\n",
              "          [47],\n",
              "          [49]],\n",
              "  \n",
              "         [[29],\n",
              "          [31],\n",
              "          [30],\n",
              "          ...,\n",
              "          [45],\n",
              "          [48],\n",
              "          [52]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 33],\n",
              "          [132],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [186],\n",
              "          [198]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [121],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [200],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [100],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [192],\n",
              "          [202]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[181],\n",
              "          [162],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 27],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[145],\n",
              "          [180],\n",
              "          [175],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 52],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [126],\n",
              "          [180],\n",
              "          ...,\n",
              "          [102],\n",
              "          [ 52],\n",
              "          [ 53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[177],\n",
              "          [173],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 92],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[177],\n",
              "          [177],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 91],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[178],\n",
              "          [176],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 83],\n",
              "          [ 90]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[156],\n",
              "          [147],\n",
              "          [147],\n",
              "          ...,\n",
              "          [200],\n",
              "          [199],\n",
              "          [203]],\n",
              "  \n",
              "         [[145],\n",
              "          [148],\n",
              "          [143],\n",
              "          ...,\n",
              "          [210],\n",
              "          [209],\n",
              "          [212]],\n",
              "  \n",
              "         [[173],\n",
              "          [149],\n",
              "          [140],\n",
              "          ...,\n",
              "          [181],\n",
              "          [185],\n",
              "          [190]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 81],\n",
              "          [ 92],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 84],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 92],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [117],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 96],\n",
              "          [ 93]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [182],\n",
              "          [190],\n",
              "          ...,\n",
              "          [232],\n",
              "          [229],\n",
              "          [250]],\n",
              "  \n",
              "         [[177],\n",
              "          [183],\n",
              "          [206],\n",
              "          ...,\n",
              "          [210],\n",
              "          [228],\n",
              "          [227]],\n",
              "  \n",
              "         [[181],\n",
              "          [184],\n",
              "          [187],\n",
              "          ...,\n",
              "          [207],\n",
              "          [225],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[142],\n",
              "          [147],\n",
              "          [150],\n",
              "          ...,\n",
              "          [206],\n",
              "          [201],\n",
              "          [200]],\n",
              "  \n",
              "         [[145],\n",
              "          [150],\n",
              "          [152],\n",
              "          ...,\n",
              "          [201],\n",
              "          [203],\n",
              "          [202]],\n",
              "  \n",
              "         [[146],\n",
              "          [151],\n",
              "          [152],\n",
              "          ...,\n",
              "          [201],\n",
              "          [200],\n",
              "          [203]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 16],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [160],\n",
              "          [161],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 48],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [223],\n",
              "          [220],\n",
              "          [221]],\n",
              "  \n",
              "         [[125],\n",
              "          [117],\n",
              "          [110],\n",
              "          ...,\n",
              "          [154],\n",
              "          [154],\n",
              "          [151]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 14],\n",
              "          [ 16],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [210],\n",
              "          [189],\n",
              "          [157]],\n",
              "  \n",
              "         [[  7],\n",
              "          [ 36],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 66],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[  8],\n",
              "          [ 50],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 81],\n",
              "          [ 88]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[219],\n",
              "          [216],\n",
              "          [192],\n",
              "          ...,\n",
              "          [146],\n",
              "          [128],\n",
              "          [161]],\n",
              "  \n",
              "         [[212],\n",
              "          [217],\n",
              "          [179],\n",
              "          ...,\n",
              "          [144],\n",
              "          [129],\n",
              "          [142]],\n",
              "  \n",
              "         [[189],\n",
              "          [192],\n",
              "          [203],\n",
              "          ...,\n",
              "          [171],\n",
              "          [145],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[136],\n",
              "          [139],\n",
              "          [140],\n",
              "          ...,\n",
              "          [132],\n",
              "          [128],\n",
              "          [119]],\n",
              "  \n",
              "         [[139],\n",
              "          [139],\n",
              "          [135],\n",
              "          ...,\n",
              "          [129],\n",
              "          [166],\n",
              "          [151]],\n",
              "  \n",
              "         [[133],\n",
              "          [134],\n",
              "          [144],\n",
              "          ...,\n",
              "          [173],\n",
              "          [178],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[117],\n",
              "          [115],\n",
              "          [132],\n",
              "          ...,\n",
              "          [181],\n",
              "          [177],\n",
              "          [123]],\n",
              "  \n",
              "         [[134],\n",
              "          [125],\n",
              "          [130],\n",
              "          ...,\n",
              "          [171],\n",
              "          [186],\n",
              "          [124]],\n",
              "  \n",
              "         [[124],\n",
              "          [125],\n",
              "          [132],\n",
              "          ...,\n",
              "          [168],\n",
              "          [177],\n",
              "          [210]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[159],\n",
              "          [164],\n",
              "          [165],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 45],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[163],\n",
              "          [162],\n",
              "          [160],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 48],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[160],\n",
              "          [160],\n",
              "          [167],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 57],\n",
              "          [ 92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 54],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [173],\n",
              "          [110],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 53],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [178],\n",
              "          [106],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 45],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [181],\n",
              "          [111],\n",
              "          [139]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[147],\n",
              "          [149],\n",
              "          [154],\n",
              "          ...,\n",
              "          [233],\n",
              "          [252],\n",
              "          [248]],\n",
              "  \n",
              "         [[147],\n",
              "          [151],\n",
              "          [155],\n",
              "          ...,\n",
              "          [212],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[150],\n",
              "          [145],\n",
              "          [142],\n",
              "          ...,\n",
              "          [209],\n",
              "          [254],\n",
              "          [251]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [181],\n",
              "          [141],\n",
              "          ...,\n",
              "          [137],\n",
              "          [162],\n",
              "          [151]],\n",
              "  \n",
              "         [[127],\n",
              "          [160],\n",
              "          [168],\n",
              "          ...,\n",
              "          [151],\n",
              "          [140],\n",
              "          [116]],\n",
              "  \n",
              "         [[136],\n",
              "          [183],\n",
              "          [134],\n",
              "          ...,\n",
              "          [137],\n",
              "          [160],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[247],\n",
              "          [246],\n",
              "          [249],\n",
              "          ...,\n",
              "          [196],\n",
              "          [196],\n",
              "          [194]],\n",
              "  \n",
              "         [[248],\n",
              "          [246],\n",
              "          [249],\n",
              "          ...,\n",
              "          [198],\n",
              "          [198],\n",
              "          [198]],\n",
              "  \n",
              "         [[249],\n",
              "          [250],\n",
              "          [250],\n",
              "          ...,\n",
              "          [199],\n",
              "          [198],\n",
              "          [198]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 29],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 63],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 37],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 47],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 19],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 59],\n",
              "          [ 61]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[215],\n",
              "          [207],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[219],\n",
              "          [208],\n",
              "          [194],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 61],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[223],\n",
              "          [213],\n",
              "          [202],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 59],\n",
              "          [ 58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [146],\n",
              "          [117],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [115]],\n",
              "  \n",
              "         [[153],\n",
              "          [152],\n",
              "          [116],\n",
              "          ...,\n",
              "          [112],\n",
              "          [110],\n",
              "          [108]],\n",
              "  \n",
              "         [[154],\n",
              "          [172],\n",
              "          [117],\n",
              "          ...,\n",
              "          [113],\n",
              "          [110],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[119],\n",
              "          [ 99],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[119],\n",
              "          [101],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 11],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[115],\n",
              "          [ 92],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 12],\n",
              "          [ 12]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  9],\n",
              "          [  9],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  4],\n",
              "          [  4]],\n",
              "  \n",
              "         [[  9],\n",
              "          [  9],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  4],\n",
              "          [  4]],\n",
              "  \n",
              "         [[  9],\n",
              "          [ 10],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  4],\n",
              "          [  4]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 42],\n",
              "          [ 41],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [215],\n",
              "          [104],\n",
              "          [177]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  7],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [219],\n",
              "          [216],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 38],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [118],\n",
              "          [206],\n",
              "          [223]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[149],\n",
              "          [147],\n",
              "          [158],\n",
              "          ...,\n",
              "          [215],\n",
              "          [159],\n",
              "          [227]],\n",
              "  \n",
              "         [[146],\n",
              "          [149],\n",
              "          [160],\n",
              "          ...,\n",
              "          [206],\n",
              "          [218],\n",
              "          [189]],\n",
              "  \n",
              "         [[153],\n",
              "          [148],\n",
              "          [156],\n",
              "          ...,\n",
              "          [185],\n",
              "          [221],\n",
              "          [219]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[168],\n",
              "          [169],\n",
              "          [167],\n",
              "          ...,\n",
              "          [156],\n",
              "          [173],\n",
              "          [158]],\n",
              "  \n",
              "         [[169],\n",
              "          [169],\n",
              "          [167],\n",
              "          ...,\n",
              "          [160],\n",
              "          [174],\n",
              "          [158]],\n",
              "  \n",
              "         [[168],\n",
              "          [170],\n",
              "          [168],\n",
              "          ...,\n",
              "          [163],\n",
              "          [171],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[203],\n",
              "          [205],\n",
              "          [207],\n",
              "          ...,\n",
              "          [149],\n",
              "          [154],\n",
              "          [158]],\n",
              "  \n",
              "         [[203],\n",
              "          [206],\n",
              "          [207],\n",
              "          ...,\n",
              "          [146],\n",
              "          [150],\n",
              "          [158]],\n",
              "  \n",
              "         [[204],\n",
              "          [207],\n",
              "          [207],\n",
              "          ...,\n",
              "          [140],\n",
              "          [145],\n",
              "          [158]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 59],\n",
              "          [ 47],\n",
              "          [111],\n",
              "          ...,\n",
              "          [253],\n",
              "          [252],\n",
              "          [241]],\n",
              "  \n",
              "         [[190],\n",
              "          [ 46],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [253],\n",
              "          [251],\n",
              "          [244]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 57],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [253],\n",
              "          [216],\n",
              "          [247]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 51],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [142],\n",
              "          [157],\n",
              "          [161]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 29],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [112],\n",
              "          [193],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 54],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [189],\n",
              "          [156],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 96],\n",
              "          [ 51],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 19],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 78],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 63],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 57],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 93],\n",
              "          [ 16]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[120],\n",
              "          [119],\n",
              "          [103],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  0],\n",
              "          [  0]],\n",
              "  \n",
              "         [[130],\n",
              "          [112],\n",
              "          [127],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  2],\n",
              "          [  2]],\n",
              "  \n",
              "         [[111],\n",
              "          [133],\n",
              "          [123],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  2],\n",
              "          [  2]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 54],\n",
              "          [ 47],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [116],\n",
              "          [107],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 30],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [115],\n",
              "          [111],\n",
              "          [113]],\n",
              "  \n",
              "         [[129],\n",
              "          [126],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [116],\n",
              "          [113],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 28],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 60],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 32],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 62],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 23],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 69],\n",
              "          [ 66]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 80],\n",
              "          [102],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 41],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 84],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 37],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[119],\n",
              "          [ 72],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 61],\n",
              "          [ 54]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 17],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [123],\n",
              "          [ 49],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 55],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [137],\n",
              "          [ 89],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 83],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [124],\n",
              "          [110],\n",
              "          [ 84]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 96],\n",
              "          [102],\n",
              "          [128],\n",
              "          ...,\n",
              "          [188],\n",
              "          [177],\n",
              "          [176]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 94],\n",
              "          [113],\n",
              "          ...,\n",
              "          [187],\n",
              "          [180],\n",
              "          [168]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 93],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [172],\n",
              "          [147],\n",
              "          [153]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [172],\n",
              "          [173],\n",
              "          ...,\n",
              "          [102],\n",
              "          [108],\n",
              "          [142]],\n",
              "  \n",
              "         [[171],\n",
              "          [169],\n",
              "          [168],\n",
              "          ...,\n",
              "          [120],\n",
              "          [122],\n",
              "          [118]],\n",
              "  \n",
              "         [[169],\n",
              "          [167],\n",
              "          [167],\n",
              "          ...,\n",
              "          [117],\n",
              "          [120],\n",
              "          [119]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 47],\n",
              "          [ 51],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 28],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 52],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 28],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 55],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 27],\n",
              "          [ 24]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [128],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 21],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[113],\n",
              "          [122],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 20],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[109],\n",
              "          [118],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 21],\n",
              "          [ 18]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[245],\n",
              "          [245],\n",
              "          [247],\n",
              "          ...,\n",
              "          [217],\n",
              "          [209],\n",
              "          [209]],\n",
              "  \n",
              "         [[246],\n",
              "          [244],\n",
              "          [246],\n",
              "          ...,\n",
              "          [214],\n",
              "          [211],\n",
              "          [209]],\n",
              "  \n",
              "         [[245],\n",
              "          [243],\n",
              "          [246],\n",
              "          ...,\n",
              "          [206],\n",
              "          [214],\n",
              "          [209]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [253],\n",
              "          [251],\n",
              "          [249]],\n",
              "  \n",
              "         [[254],\n",
              "          [254],\n",
              "          [253],\n",
              "          ...,\n",
              "          [252],\n",
              "          [251],\n",
              "          [248]],\n",
              "  \n",
              "         [[254],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [251],\n",
              "          [253],\n",
              "          [251]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 48],\n",
              "          [ 43],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 96],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 41],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 99],\n",
              "          [134]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 46],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 97],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 62],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 58],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 63],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 65],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 62],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 62],\n",
              "          [ 58]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[126],\n",
              "          [ 97],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [237],\n",
              "          [237]],\n",
              "  \n",
              "         [[124],\n",
              "          [101],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [240],\n",
              "          [238]],\n",
              "  \n",
              "         [[122],\n",
              "          [106],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [238],\n",
              "          [239]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 37],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 15],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 40],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [  7],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 38],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 15],\n",
              "          [ 15]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[153],\n",
              "          [155],\n",
              "          [158],\n",
              "          ...,\n",
              "          [127],\n",
              "          [126],\n",
              "          [124]],\n",
              "  \n",
              "         [[156],\n",
              "          [157],\n",
              "          [160],\n",
              "          ...,\n",
              "          [128],\n",
              "          [127],\n",
              "          [124]],\n",
              "  \n",
              "         [[157],\n",
              "          [160],\n",
              "          [161],\n",
              "          ...,\n",
              "          [128],\n",
              "          [126],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [102],\n",
              "          [100],\n",
              "          ...,\n",
              "          [132],\n",
              "          [121],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [100],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [134],\n",
              "          [123],\n",
              "          [112]],\n",
              "  \n",
              "         [[109],\n",
              "          [ 97],\n",
              "          [102],\n",
              "          ...,\n",
              "          [136],\n",
              "          [125],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[16],\n",
              "          [23],\n",
              "          [83],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 1],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[20],\n",
              "          [24],\n",
              "          [43],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [10],\n",
              "          [14]],\n",
              "  \n",
              "         [[24],\n",
              "          [26],\n",
              "          [38],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [ 2],\n",
              "          [ 2]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[25],\n",
              "          [26],\n",
              "          [25],\n",
              "          ...,\n",
              "          [ 1],\n",
              "          [ 2],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[26],\n",
              "          [26],\n",
              "          [25],\n",
              "          ...,\n",
              "          [13],\n",
              "          [14],\n",
              "          [13]],\n",
              "  \n",
              "         [[31],\n",
              "          [31],\n",
              "          [26],\n",
              "          ...,\n",
              "          [15],\n",
              "          [14],\n",
              "          [16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[117],\n",
              "          [107],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 83],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[128],\n",
              "          [116],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 80],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[145],\n",
              "          [125],\n",
              "          [132],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [ 12],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 90],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 49],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 82],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 50],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 87],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 49],\n",
              "          [ 50]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 23],\n",
              "          [ 24],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [177]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 24],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [180],\n",
              "          [178],\n",
              "          [176]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 25],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [177],\n",
              "          [175],\n",
              "          [173]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[166],\n",
              "          [164],\n",
              "          [164],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 29],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[167],\n",
              "          [167],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 24],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[167],\n",
              "          [168],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 25],\n",
              "          [ 34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 22],\n",
              "          [ 20],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [166],\n",
              "          [152],\n",
              "          [151]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  0],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [160],\n",
              "          [165],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [  2],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [168],\n",
              "          [165],\n",
              "          [163]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 38],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 72],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 36],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 68],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 34],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 75],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[192],\n",
              "          [198],\n",
              "          [195],\n",
              "          ...,\n",
              "          [133],\n",
              "          [136],\n",
              "          [130]],\n",
              "  \n",
              "         [[191],\n",
              "          [189],\n",
              "          [204],\n",
              "          ...,\n",
              "          [134],\n",
              "          [133],\n",
              "          [133]],\n",
              "  \n",
              "         [[192],\n",
              "          [199],\n",
              "          [198],\n",
              "          ...,\n",
              "          [137],\n",
              "          [133],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 98],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 63],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [101],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 61],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [101],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 62],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 13],\n",
              "          [ 18],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 36],\n",
              "          [  3]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 17],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 32],\n",
              "          [  1]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 18],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 39],\n",
              "          [  0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [119],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 55],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[159],\n",
              "          [ 52],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 18],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[140],\n",
              "          [ 72],\n",
              "          [144],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 10],\n",
              "          [ 48]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 96],\n",
              "          [ 80],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [139],\n",
              "          [ 61],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 92],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [138],\n",
              "          [ 45],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 99],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [121],\n",
              "          [ 40],\n",
              "          [ 45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[135],\n",
              "          [166],\n",
              "          [191],\n",
              "          ...,\n",
              "          [237],\n",
              "          [242],\n",
              "          [243]],\n",
              "  \n",
              "         [[142],\n",
              "          [178],\n",
              "          [189],\n",
              "          ...,\n",
              "          [242],\n",
              "          [242],\n",
              "          [242]],\n",
              "  \n",
              "         [[145],\n",
              "          [177],\n",
              "          [188],\n",
              "          ...,\n",
              "          [242],\n",
              "          [239],\n",
              "          [241]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 22],\n",
              "          [ 25],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 25],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 81],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 23],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 83],\n",
              "          [ 70]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 29],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [155],\n",
              "          [156],\n",
              "          [147]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 18],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [163],\n",
              "          [137],\n",
              "          [146]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 20],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [149]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[104],\n",
              "          [102],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [133],\n",
              "          [135],\n",
              "          [135]],\n",
              "  \n",
              "         [[116],\n",
              "          [100],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [152],\n",
              "          [152],\n",
              "          [151]],\n",
              "  \n",
              "         [[127],\n",
              "          [101],\n",
              "          [111],\n",
              "          ...,\n",
              "          [157],\n",
              "          [157],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 91],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [110],\n",
              "          [109],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 89],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [112],\n",
              "          [112],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 83],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [111],\n",
              "          [112],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[52],\n",
              "          [54],\n",
              "          [48],\n",
              "          ...,\n",
              "          [13],\n",
              "          [12],\n",
              "          [12]],\n",
              "  \n",
              "         [[53],\n",
              "          [54],\n",
              "          [50],\n",
              "          ...,\n",
              "          [20],\n",
              "          [11],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[54],\n",
              "          [54],\n",
              "          [23],\n",
              "          ...,\n",
              "          [19],\n",
              "          [16],\n",
              "          [ 3]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 8],\n",
              "          [ 4],\n",
              "          [ 8],\n",
              "          ...,\n",
              "          [23],\n",
              "          [17],\n",
              "          [12]],\n",
              "  \n",
              "         [[ 0],\n",
              "          [15],\n",
              "          [ 5],\n",
              "          ...,\n",
              "          [25],\n",
              "          [19],\n",
              "          [14]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 4],\n",
              "          [ 6],\n",
              "          ...,\n",
              "          [18],\n",
              "          [21],\n",
              "          [15]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 4],\n",
              "          [ 4],\n",
              "          [22],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 4],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[20],\n",
              "          [16],\n",
              "          [34],\n",
              "          ...,\n",
              "          [ 5],\n",
              "          [ 6],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[37],\n",
              "          [33],\n",
              "          [12],\n",
              "          ...,\n",
              "          [12],\n",
              "          [ 5],\n",
              "          [ 6]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[30],\n",
              "          [29],\n",
              "          [30],\n",
              "          ...,\n",
              "          [13],\n",
              "          [ 4],\n",
              "          [10]],\n",
              "  \n",
              "         [[23],\n",
              "          [31],\n",
              "          [36],\n",
              "          ...,\n",
              "          [11],\n",
              "          [ 4],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[20],\n",
              "          [35],\n",
              "          [30],\n",
              "          ...,\n",
              "          [14],\n",
              "          [ 3],\n",
              "          [11]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  8],\n",
              "          [  9],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [126],\n",
              "          [121],\n",
              "          [122]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  9],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [129],\n",
              "          [127],\n",
              "          [125]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  9],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [128],\n",
              "          [125],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 77],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [133],\n",
              "          [146],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 41],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [177],\n",
              "          [186],\n",
              "          [186]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 73],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [187],\n",
              "          [196],\n",
              "          [203]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[149],\n",
              "          [147],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 43],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[149],\n",
              "          [154],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 44],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[150],\n",
              "          [153],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 53],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[165],\n",
              "          [166],\n",
              "          [169],\n",
              "          ...,\n",
              "          [171],\n",
              "          [167],\n",
              "          [166]],\n",
              "  \n",
              "         [[170],\n",
              "          [170],\n",
              "          [171],\n",
              "          ...,\n",
              "          [176],\n",
              "          [174],\n",
              "          [170]],\n",
              "  \n",
              "         [[179],\n",
              "          [177],\n",
              "          [180],\n",
              "          ...,\n",
              "          [177],\n",
              "          [178],\n",
              "          [177]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[224],\n",
              "          [216],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [150],\n",
              "          [153]],\n",
              "  \n",
              "         [[222],\n",
              "          [229],\n",
              "          [212],\n",
              "          ...,\n",
              "          [133],\n",
              "          [146],\n",
              "          [139]],\n",
              "  \n",
              "         [[227],\n",
              "          [221],\n",
              "          [217],\n",
              "          ...,\n",
              "          [115],\n",
              "          [129],\n",
              "          [143]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [134],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 44],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[127],\n",
              "          [131],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 44],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[126],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 38],\n",
              "          [ 35]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 49],\n",
              "          [ 48],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 49],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 50],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 49],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 48],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 55],\n",
              "          [ 50]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[126],\n",
              "          [136],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 91],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[129],\n",
              "          [123],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [101],\n",
              "          [104]],\n",
              "  \n",
              "         [[135],\n",
              "          [128],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 80],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[133],\n",
              "          [145],\n",
              "          [151],\n",
              "          ...,\n",
              "          [174],\n",
              "          [176],\n",
              "          [175]],\n",
              "  \n",
              "         [[197],\n",
              "          [211],\n",
              "          [211],\n",
              "          ...,\n",
              "          [178],\n",
              "          [177],\n",
              "          [178]],\n",
              "  \n",
              "         [[176],\n",
              "          [179],\n",
              "          [175],\n",
              "          ...,\n",
              "          [176],\n",
              "          [178],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[162],\n",
              "          [166],\n",
              "          [154],\n",
              "          ...,\n",
              "          [141],\n",
              "          [144],\n",
              "          [164]],\n",
              "  \n",
              "         [[165],\n",
              "          [168],\n",
              "          [148],\n",
              "          ...,\n",
              "          [153],\n",
              "          [155],\n",
              "          [149]],\n",
              "  \n",
              "         [[146],\n",
              "          [106],\n",
              "          [201],\n",
              "          ...,\n",
              "          [151],\n",
              "          [150],\n",
              "          [190]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 42],\n",
              "          [ 43],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 46],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 41],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 43],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 41],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 43],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[139],\n",
              "          [135],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 68],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 68],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 70],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 62],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 69],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[137],\n",
              "          [150],\n",
              "          [144],\n",
              "          ...,\n",
              "          [165],\n",
              "          [162],\n",
              "          [160]],\n",
              "  \n",
              "         [[138],\n",
              "          [138],\n",
              "          [137],\n",
              "          ...,\n",
              "          [167],\n",
              "          [162],\n",
              "          [156]],\n",
              "  \n",
              "         [[142],\n",
              "          [142],\n",
              "          [132],\n",
              "          ...,\n",
              "          [170],\n",
              "          [172],\n",
              "          [175]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [ 98],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 88],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 86],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[112],\n",
              "          [108],\n",
              "          [113],\n",
              "          ...,\n",
              "          [158],\n",
              "          [158],\n",
              "          [158]],\n",
              "  \n",
              "         [[111],\n",
              "          [112],\n",
              "          [111],\n",
              "          ...,\n",
              "          [162],\n",
              "          [159],\n",
              "          [159]],\n",
              "  \n",
              "         [[114],\n",
              "          [113],\n",
              "          [112],\n",
              "          ...,\n",
              "          [162],\n",
              "          [161],\n",
              "          [161]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[176],\n",
              "          [166],\n",
              "          [161],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [100]],\n",
              "  \n",
              "         [[177],\n",
              "          [171],\n",
              "          [171],\n",
              "          ...,\n",
              "          [112],\n",
              "          [107],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[178],\n",
              "          [171],\n",
              "          [173],\n",
              "          ...,\n",
              "          [111],\n",
              "          [105],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[103],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [115],\n",
              "          [112],\n",
              "          [111]],\n",
              "  \n",
              "         [[107],\n",
              "          [111],\n",
              "          [113],\n",
              "          ...,\n",
              "          [118],\n",
              "          [115],\n",
              "          [113]],\n",
              "  \n",
              "         [[113],\n",
              "          [118],\n",
              "          [118],\n",
              "          ...,\n",
              "          [119],\n",
              "          [118],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 84],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 57],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 79],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 54],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 79],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 51],\n",
              "          [ 48]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 61],\n",
              "          [ 62],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 82],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 65],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 75],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 61],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 82],\n",
              "          [ 86]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[131],\n",
              "          [126],\n",
              "          [124],\n",
              "          ...,\n",
              "          [159],\n",
              "          [154],\n",
              "          [151]],\n",
              "  \n",
              "         [[130],\n",
              "          [126],\n",
              "          [138],\n",
              "          ...,\n",
              "          [150],\n",
              "          [166],\n",
              "          [168]],\n",
              "  \n",
              "         [[137],\n",
              "          [148],\n",
              "          [146],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 54],\n",
              "          [ 64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 52],\n",
              "          [ 40],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [195],\n",
              "          [168],\n",
              "          [183]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 52],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [202],\n",
              "          [185],\n",
              "          [196]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 55],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [189],\n",
              "          [191],\n",
              "          [194]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 57],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 28],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 63],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 29],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 61],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 30],\n",
              "          [ 33]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [152],\n",
              "          [162],\n",
              "          ...,\n",
              "          [136],\n",
              "          [177],\n",
              "          [143]],\n",
              "  \n",
              "         [[145],\n",
              "          [160],\n",
              "          [122],\n",
              "          ...,\n",
              "          [135],\n",
              "          [139],\n",
              "          [113]],\n",
              "  \n",
              "         [[158],\n",
              "          [192],\n",
              "          [177],\n",
              "          ...,\n",
              "          [158],\n",
              "          [145],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[131],\n",
              "          [144],\n",
              "          [131],\n",
              "          ...,\n",
              "          [145],\n",
              "          [152],\n",
              "          [121]],\n",
              "  \n",
              "         [[172],\n",
              "          [167],\n",
              "          [108],\n",
              "          ...,\n",
              "          [165],\n",
              "          [148],\n",
              "          [152]],\n",
              "  \n",
              "         [[198],\n",
              "          [181],\n",
              "          [116],\n",
              "          ...,\n",
              "          [102],\n",
              "          [132],\n",
              "          [109]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[127],\n",
              "          [129],\n",
              "          [131],\n",
              "          ...,\n",
              "          [119],\n",
              "          [115],\n",
              "          [115]],\n",
              "  \n",
              "         [[128],\n",
              "          [129],\n",
              "          [131],\n",
              "          ...,\n",
              "          [119],\n",
              "          [116],\n",
              "          [116]],\n",
              "  \n",
              "         [[129],\n",
              "          [130],\n",
              "          [132],\n",
              "          ...,\n",
              "          [121],\n",
              "          [118],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [107],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [230],\n",
              "          [227],\n",
              "          [225]],\n",
              "  \n",
              "         [[125],\n",
              "          [117],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [228],\n",
              "          [225],\n",
              "          [223]],\n",
              "  \n",
              "         [[125],\n",
              "          [117],\n",
              "          [105],\n",
              "          ...,\n",
              "          [224],\n",
              "          [223],\n",
              "          [222]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [105],\n",
              "          [107],\n",
              "          ...,\n",
              "          [164],\n",
              "          [166],\n",
              "          [161]],\n",
              "  \n",
              "         [[104],\n",
              "          [106],\n",
              "          [105],\n",
              "          ...,\n",
              "          [162],\n",
              "          [174],\n",
              "          [173]],\n",
              "  \n",
              "         [[104],\n",
              "          [107],\n",
              "          [106],\n",
              "          ...,\n",
              "          [173],\n",
              "          [175],\n",
              "          [176]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 59],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [172],\n",
              "          [169],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 59],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [169],\n",
              "          [164],\n",
              "          [158]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 57],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [167],\n",
              "          [160],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[125],\n",
              "          [224],\n",
              "          [185],\n",
              "          ...,\n",
              "          [148],\n",
              "          [146],\n",
              "          [144]],\n",
              "  \n",
              "         [[104],\n",
              "          [196],\n",
              "          [184],\n",
              "          ...,\n",
              "          [150],\n",
              "          [148],\n",
              "          [146]],\n",
              "  \n",
              "         [[134],\n",
              "          [172],\n",
              "          [181],\n",
              "          ...,\n",
              "          [152],\n",
              "          [149],\n",
              "          [148]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [114],\n",
              "          [130],\n",
              "          ...,\n",
              "          [164],\n",
              "          [153],\n",
              "          [141]],\n",
              "  \n",
              "         [[110],\n",
              "          [114],\n",
              "          [122],\n",
              "          ...,\n",
              "          [160],\n",
              "          [146],\n",
              "          [131]],\n",
              "  \n",
              "         [[128],\n",
              "          [101],\n",
              "          [125],\n",
              "          ...,\n",
              "          [152],\n",
              "          [139],\n",
              "          [125]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]],\n",
              "  \n",
              "         [[0],\n",
              "          [0],\n",
              "          [0],\n",
              "          ...,\n",
              "          [0],\n",
              "          [0],\n",
              "          [0]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[198],\n",
              "          [198],\n",
              "          [198],\n",
              "          ...,\n",
              "          [177],\n",
              "          [192],\n",
              "          [182]],\n",
              "  \n",
              "         [[198],\n",
              "          [196],\n",
              "          [196],\n",
              "          ...,\n",
              "          [177],\n",
              "          [187],\n",
              "          [178]],\n",
              "  \n",
              "         [[198],\n",
              "          [196],\n",
              "          [195],\n",
              "          ...,\n",
              "          [178],\n",
              "          [195],\n",
              "          [177]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[160],\n",
              "          [158],\n",
              "          [155],\n",
              "          ...,\n",
              "          [151],\n",
              "          [154],\n",
              "          [152]],\n",
              "  \n",
              "         [[164],\n",
              "          [159],\n",
              "          [161],\n",
              "          ...,\n",
              "          [156],\n",
              "          [158],\n",
              "          [157]],\n",
              "  \n",
              "         [[167],\n",
              "          [161],\n",
              "          [162],\n",
              "          ...,\n",
              "          [155],\n",
              "          [153],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 39],\n",
              "          [ 37],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 18],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 38],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 22],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 40],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 24],\n",
              "          [ 27]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [100],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [117],\n",
              "          [114],\n",
              "          [115]],\n",
              "  \n",
              "         [[109],\n",
              "          [107],\n",
              "          [104],\n",
              "          ...,\n",
              "          [119],\n",
              "          [118],\n",
              "          [109]],\n",
              "  \n",
              "         [[108],\n",
              "          [105],\n",
              "          [114],\n",
              "          ...,\n",
              "          [122],\n",
              "          [106],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[159],\n",
              "          [159],\n",
              "          [166],\n",
              "          ...,\n",
              "          [233],\n",
              "          [124],\n",
              "          [233]],\n",
              "  \n",
              "         [[163],\n",
              "          [157],\n",
              "          [156],\n",
              "          ...,\n",
              "          [234],\n",
              "          [154],\n",
              "          [234]],\n",
              "  \n",
              "         [[185],\n",
              "          [168],\n",
              "          [160],\n",
              "          ...,\n",
              "          [233],\n",
              "          [221],\n",
              "          [231]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[167],\n",
              "          [107],\n",
              "          [155],\n",
              "          ...,\n",
              "          [170],\n",
              "          [130],\n",
              "          [100]],\n",
              "  \n",
              "         [[120],\n",
              "          [129],\n",
              "          [145],\n",
              "          ...,\n",
              "          [129],\n",
              "          [ 92],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[135],\n",
              "          [193],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 88],\n",
              "          [120]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 72],\n",
              "          [ 70],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 59],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 54],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 66],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 44],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 39],\n",
              "          [ 47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[108],\n",
              "          [113],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [123],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[113],\n",
              "          [149],\n",
              "          [120],\n",
              "          ...,\n",
              "          [108],\n",
              "          [129],\n",
              "          [127]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [153],\n",
              "          [114],\n",
              "          ...,\n",
              "          [107],\n",
              "          [102],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[23],\n",
              "          [11],\n",
              "          [11],\n",
              "          ...,\n",
              "          [74],\n",
              "          [15],\n",
              "          [24]],\n",
              "  \n",
              "         [[56],\n",
              "          [12],\n",
              "          [12],\n",
              "          ...,\n",
              "          [85],\n",
              "          [49],\n",
              "          [68]],\n",
              "  \n",
              "         [[22],\n",
              "          [15],\n",
              "          [13],\n",
              "          ...,\n",
              "          [44],\n",
              "          [22],\n",
              "          [20]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[16],\n",
              "          [14],\n",
              "          [13],\n",
              "          ...,\n",
              "          [88],\n",
              "          [62],\n",
              "          [77]],\n",
              "  \n",
              "         [[15],\n",
              "          [13],\n",
              "          [13],\n",
              "          ...,\n",
              "          [64],\n",
              "          [77],\n",
              "          [51]],\n",
              "  \n",
              "         [[15],\n",
              "          [15],\n",
              "          [15],\n",
              "          ...,\n",
              "          [63],\n",
              "          [96],\n",
              "          [75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 76],\n",
              "          [ 74],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [141],\n",
              "          [144],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 79],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [143],\n",
              "          [145],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 81],\n",
              "          [ 84],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [144],\n",
              "          [145],\n",
              "          [111]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 73],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 67],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 70],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 71],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 82],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 66],\n",
              "          [ 59]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 60],\n",
              "          [ 51],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 43],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 61],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 46],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 47],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 50],\n",
              "          [ 47]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 29],\n",
              "          [223],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 30],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 48],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [ 17],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 26],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          [ 18]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[14],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [21],\n",
              "          [19],\n",
              "          [17]],\n",
              "  \n",
              "         [[15],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [19],\n",
              "          [19],\n",
              "          [17]],\n",
              "  \n",
              "         [[10],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [19],\n",
              "          [18],\n",
              "          [18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[17],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [22],\n",
              "          [22],\n",
              "          [21]],\n",
              "  \n",
              "         [[16],\n",
              "          [15],\n",
              "          [17],\n",
              "          ...,\n",
              "          [24],\n",
              "          [21],\n",
              "          [22]],\n",
              "  \n",
              "         [[15],\n",
              "          [17],\n",
              "          [17],\n",
              "          ...,\n",
              "          [23],\n",
              "          [20],\n",
              "          [21]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[118],\n",
              "          [118],\n",
              "          [120],\n",
              "          ...,\n",
              "          [253],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[115],\n",
              "          [115],\n",
              "          [117],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         [[114],\n",
              "          [113],\n",
              "          [116],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [254]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[165],\n",
              "          [188],\n",
              "          [150],\n",
              "          ...,\n",
              "          [107],\n",
              "          [118],\n",
              "          [129]],\n",
              "  \n",
              "         [[201],\n",
              "          [172],\n",
              "          [156],\n",
              "          ...,\n",
              "          [124],\n",
              "          [122],\n",
              "          [150]],\n",
              "  \n",
              "         [[145],\n",
              "          [147],\n",
              "          [158],\n",
              "          ...,\n",
              "          [127],\n",
              "          [145],\n",
              "          [149]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[152],\n",
              "          [151],\n",
              "          [151],\n",
              "          ...,\n",
              "          [118],\n",
              "          [118],\n",
              "          [115]],\n",
              "  \n",
              "         [[152],\n",
              "          [150],\n",
              "          [151],\n",
              "          ...,\n",
              "          [121],\n",
              "          [119],\n",
              "          [115]],\n",
              "  \n",
              "         [[148],\n",
              "          [152],\n",
              "          [152],\n",
              "          ...,\n",
              "          [121],\n",
              "          [120],\n",
              "          [114]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 34],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [186],\n",
              "          [180],\n",
              "          [181]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [185],\n",
              "          [179],\n",
              "          [174]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 31],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [183],\n",
              "          [175],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[118],\n",
              "          [132],\n",
              "          [120],\n",
              "          ...,\n",
              "          [214],\n",
              "          [213],\n",
              "          [212]],\n",
              "  \n",
              "         [[136],\n",
              "          [140],\n",
              "          [143],\n",
              "          ...,\n",
              "          [215],\n",
              "          [213],\n",
              "          [215]],\n",
              "  \n",
              "         [[134],\n",
              "          [143],\n",
              "          [145],\n",
              "          ...,\n",
              "          [217],\n",
              "          [217],\n",
              "          [216]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[128],\n",
              "          [132],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 68],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[127],\n",
              "          [139],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [117],\n",
              "          [ 97],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[132],\n",
              "          [129],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [113],\n",
              "          [103],\n",
              "          [ 25]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 59],\n",
              "          [ 58],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 57],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 59],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 57],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 57],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[220],\n",
              "          [218],\n",
              "          [220],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 51],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[217],\n",
              "          [221],\n",
              "          [219],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[217],\n",
              "          [207],\n",
              "          [208],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 57],\n",
              "          [ 56]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[193],\n",
              "          [184],\n",
              "          [181],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         [[183],\n",
              "          [185],\n",
              "          [170],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         [[143],\n",
              "          [149],\n",
              "          [120],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[190],\n",
              "          [191],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 93],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[189],\n",
              "          [188],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 92],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[195],\n",
              "          [178],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 89],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[140],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [167],\n",
              "          [167],\n",
              "          [167]],\n",
              "  \n",
              "         [[140],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [166],\n",
              "          [167],\n",
              "          [167]],\n",
              "  \n",
              "         [[141],\n",
              "          [141],\n",
              "          [141],\n",
              "          ...,\n",
              "          [166],\n",
              "          [167],\n",
              "          [164]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [172],\n",
              "          [177],\n",
              "          ...,\n",
              "          [176],\n",
              "          [175],\n",
              "          [174]],\n",
              "  \n",
              "         [[171],\n",
              "          [174],\n",
              "          [175],\n",
              "          ...,\n",
              "          [176],\n",
              "          [175],\n",
              "          [172]],\n",
              "  \n",
              "         [[170],\n",
              "          [170],\n",
              "          [177],\n",
              "          ...,\n",
              "          [175],\n",
              "          [174],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[102],\n",
              "          [ 43],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  2]],\n",
              "  \n",
              "         [[145],\n",
              "          [100],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  9],\n",
              "          [  7]],\n",
              "  \n",
              "         [[118],\n",
              "          [129],\n",
              "          [158],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  5],\n",
              "          [  3]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [130],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [112],\n",
              "          [ 87],\n",
              "          [116]],\n",
              "  \n",
              "         [[127],\n",
              "          [103],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [137],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [147],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [109],\n",
              "          [ 99]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 83],\n",
              "          [ 96],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [205],\n",
              "          [206],\n",
              "          [206]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 50],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [205],\n",
              "          [203],\n",
              "          [204]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 51],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [203],\n",
              "          [203],\n",
              "          [204]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 90],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [127],\n",
              "          [119],\n",
              "          [125]],\n",
              "  \n",
              "         [[114],\n",
              "          [120],\n",
              "          [137],\n",
              "          ...,\n",
              "          [120],\n",
              "          [118],\n",
              "          [116]],\n",
              "  \n",
              "         [[109],\n",
              "          [112],\n",
              "          [113],\n",
              "          ...,\n",
              "          [117],\n",
              "          [117],\n",
              "          [117]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 95],\n",
              "          [ 94],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [129],\n",
              "          [126],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 74],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [135],\n",
              "          [131],\n",
              "          [125]],\n",
              "  \n",
              "         [[183],\n",
              "          [189],\n",
              "          [188],\n",
              "          ...,\n",
              "          [133],\n",
              "          [129],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 69],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 94],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 69],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 82],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 68],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 89],\n",
              "          [156],\n",
              "          [170],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 82],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [139],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 82],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [175],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 82],\n",
              "          [ 78]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[248],\n",
              "          [239],\n",
              "          [216],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[236],\n",
              "          [241],\n",
              "          [186],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]],\n",
              "  \n",
              "         [[245],\n",
              "          [214],\n",
              "          [174],\n",
              "          ...,\n",
              "          [254],\n",
              "          [255],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 57],\n",
              "          [ 48],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 98],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 52],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [124],\n",
              "          [ 59],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 66],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [154],\n",
              "          [ 79],\n",
              "          [ 88]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [129],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 85],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[124],\n",
              "          [145],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 73],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[100],\n",
              "          [143],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 62],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [134],\n",
              "          [218],\n",
              "          [245]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [231],\n",
              "          [188],\n",
              "          [237]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [170],\n",
              "          [215],\n",
              "          [213]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 23],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 16],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 37],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [  8],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 35],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 11],\n",
              "          [ 14]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 94],\n",
              "          [ 78],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 68],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 79],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 66],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 76],\n",
              "          [172],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 70],\n",
              "          [ 79]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 61],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 64],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 57],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 71],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 53],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 74],\n",
              "          [ 83]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 62],\n",
              "          [ 62],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 71],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 62],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 80],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 66],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 72],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  1],\n",
              "          [  0],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 21],\n",
              "          [ 48],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  0],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 28],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[  3],\n",
              "          [  0],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 38],\n",
              "          [ 22]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[120],\n",
              "          [118],\n",
              "          [117],\n",
              "          ...,\n",
              "          [184],\n",
              "          [185],\n",
              "          [185]],\n",
              "  \n",
              "         [[119],\n",
              "          [122],\n",
              "          [118],\n",
              "          ...,\n",
              "          [183],\n",
              "          [185],\n",
              "          [185]],\n",
              "  \n",
              "         [[123],\n",
              "          [119],\n",
              "          [123],\n",
              "          ...,\n",
              "          [184],\n",
              "          [184],\n",
              "          [184]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[140],\n",
              "          [172],\n",
              "          [206],\n",
              "          ...,\n",
              "          [163],\n",
              "          [165],\n",
              "          [163]],\n",
              "  \n",
              "         [[153],\n",
              "          [144],\n",
              "          [221],\n",
              "          ...,\n",
              "          [167],\n",
              "          [163],\n",
              "          [168]],\n",
              "  \n",
              "         [[142],\n",
              "          [141],\n",
              "          [164],\n",
              "          ...,\n",
              "          [167],\n",
              "          [166],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 27],\n",
              "          [ 30],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 29],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 27],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 32],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 23],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          [ 31]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 79],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [107],\n",
              "          [105],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 76],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [105],\n",
              "          [103],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [104],\n",
              "          [101],\n",
              "          [ 93]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 93],\n",
              "          [ 92],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [100],\n",
              "          [101],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 91],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [106],\n",
              "          [103],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 95],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [101],\n",
              "          [105],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 45],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [171],\n",
              "          [170],\n",
              "          [165]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 49],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [148],\n",
              "          [153],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 53],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [146],\n",
              "          [153]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[28],\n",
              "          [62],\n",
              "          [16],\n",
              "          ...,\n",
              "          [91],\n",
              "          [91],\n",
              "          [92]],\n",
              "  \n",
              "         [[61],\n",
              "          [85],\n",
              "          [58],\n",
              "          ...,\n",
              "          [97],\n",
              "          [95],\n",
              "          [94]],\n",
              "  \n",
              "         [[80],\n",
              "          [82],\n",
              "          [87],\n",
              "          ...,\n",
              "          [98],\n",
              "          [94],\n",
              "          [96]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[56],\n",
              "          [53],\n",
              "          [59],\n",
              "          ...,\n",
              "          [78],\n",
              "          [82],\n",
              "          [82]],\n",
              "  \n",
              "         [[55],\n",
              "          [57],\n",
              "          [59],\n",
              "          ...,\n",
              "          [80],\n",
              "          [72],\n",
              "          [82]],\n",
              "  \n",
              "         [[52],\n",
              "          [52],\n",
              "          [60],\n",
              "          ...,\n",
              "          [70],\n",
              "          [74],\n",
              "          [76]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 83],\n",
              "          [ 79],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [136],\n",
              "          [134],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 87],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [128],\n",
              "          [131],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 79],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 85],\n",
              "          [ 83]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 62],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 76],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 55],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 66],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 31],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 54],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 45],\n",
              "          [ 44],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 59],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 44],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 63],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 39],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 63],\n",
              "          [ 97]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 14],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 12],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 34],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [  9],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [111],\n",
              "          [ 34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 57],\n",
              "          [ 62],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 76],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 55],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 70],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 53],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 70],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 66],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [107],\n",
              "          [106],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [114],\n",
              "          [129],\n",
              "          ...,\n",
              "          [109],\n",
              "          [103],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 83],\n",
              "          [129],\n",
              "          ...,\n",
              "          [110],\n",
              "          [114],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[246],\n",
              "          [242],\n",
              "          [110],\n",
              "          ...,\n",
              "          [144],\n",
              "          [143],\n",
              "          [135]],\n",
              "  \n",
              "         [[234],\n",
              "          [235],\n",
              "          [121],\n",
              "          ...,\n",
              "          [144],\n",
              "          [142],\n",
              "          [137]],\n",
              "  \n",
              "         [[190],\n",
              "          [209],\n",
              "          [133],\n",
              "          ...,\n",
              "          [144],\n",
              "          [139],\n",
              "          [136]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 49],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 74],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 61],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 82],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 60],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 72],\n",
              "          [ 75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 30],\n",
              "          [ 45],\n",
              "          [207],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [109],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 39],\n",
              "          [174],\n",
              "          ...,\n",
              "          [101],\n",
              "          [116],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 35],\n",
              "          [162],\n",
              "          ...,\n",
              "          [107],\n",
              "          [121],\n",
              "          [125]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 30],\n",
              "          [103],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 98],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [152],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 98],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 69],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 95],\n",
              "          [ 91]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 86],\n",
              "          [ 62],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 89],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[100],\n",
              "          [ 79],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 79],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 80],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 96],\n",
              "          [ 96]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 39],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [142],\n",
              "          [ 39],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 48],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 60],\n",
              "          [ 88]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 34],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [103],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  2],\n",
              "          [ 21],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [123],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[  1],\n",
              "          [ 18],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 73],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[  1],\n",
              "          [ 20],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 39],\n",
              "          [ 10]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 68],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [199],\n",
              "          [212],\n",
              "          [215]],\n",
              "  \n",
              "         [[137],\n",
              "          [112],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [155],\n",
              "          [151],\n",
              "          [151]],\n",
              "  \n",
              "         [[113],\n",
              "          [125],\n",
              "          [129],\n",
              "          ...,\n",
              "          [191],\n",
              "          [188],\n",
              "          [186]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 53],\n",
              "          [ 45],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 98],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 46],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [100],\n",
              "          [101],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 48],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [102],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[201],\n",
              "          [205],\n",
              "          [205],\n",
              "          ...,\n",
              "          [238],\n",
              "          [239],\n",
              "          [239]],\n",
              "  \n",
              "         [[199],\n",
              "          [203],\n",
              "          [205],\n",
              "          ...,\n",
              "          [238],\n",
              "          [238],\n",
              "          [238]],\n",
              "  \n",
              "         [[201],\n",
              "          [203],\n",
              "          [205],\n",
              "          ...,\n",
              "          [238],\n",
              "          [238],\n",
              "          [238]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[115],\n",
              "          [116],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 22],\n",
              "          [ 22]],\n",
              "  \n",
              "         [[113],\n",
              "          [115],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 16],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[114],\n",
              "          [116],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 23],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [ 98],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 89],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 92],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 94],\n",
              "          [119]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 91],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 67],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[165],\n",
              "          [165],\n",
              "          [163],\n",
              "          ...,\n",
              "          [144],\n",
              "          [143],\n",
              "          [142]],\n",
              "  \n",
              "         [[165],\n",
              "          [165],\n",
              "          [163],\n",
              "          ...,\n",
              "          [144],\n",
              "          [144],\n",
              "          [141]],\n",
              "  \n",
              "         [[165],\n",
              "          [165],\n",
              "          [164],\n",
              "          ...,\n",
              "          [145],\n",
              "          [146],\n",
              "          [143]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [138],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 71],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[138],\n",
              "          [138],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 80],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[138],\n",
              "          [137],\n",
              "          [137],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 73],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[222],\n",
              "          [206],\n",
              "          [220],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 81],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[244],\n",
              "          [229],\n",
              "          [160],\n",
              "          ...,\n",
              "          [107],\n",
              "          [125],\n",
              "          [143]],\n",
              "  \n",
              "         [[181],\n",
              "          [205],\n",
              "          [141],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [104],\n",
              "          [123]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[202],\n",
              "          [ 69],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [148],\n",
              "          [151],\n",
              "          [161]],\n",
              "  \n",
              "         [[185],\n",
              "          [ 60],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [122],\n",
              "          [137],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 58],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [107],\n",
              "          [140],\n",
              "          [147]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 28],\n",
              "          [ 27],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 64],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 31],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 62],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 29],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 59],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 19],\n",
              "          [  8],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [138],\n",
              "          [137],\n",
              "          [132]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 16],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [143],\n",
              "          [154],\n",
              "          [142]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 15],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [135],\n",
              "          [131],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 44],\n",
              "          [ 54],\n",
              "          [143],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 76],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 60],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 72],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[104],\n",
              "          [ 55],\n",
              "          [130],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 63],\n",
              "          [ 61]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [177],\n",
              "          [177],\n",
              "          ...,\n",
              "          [140],\n",
              "          [133],\n",
              "          [187]],\n",
              "  \n",
              "         [[177],\n",
              "          [168],\n",
              "          [171],\n",
              "          ...,\n",
              "          [187],\n",
              "          [182],\n",
              "          [179]],\n",
              "  \n",
              "         [[176],\n",
              "          [171],\n",
              "          [178],\n",
              "          ...,\n",
              "          [188],\n",
              "          [181],\n",
              "          [182]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[117],\n",
              "          [117],\n",
              "          [118],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 14],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[117],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 12],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[117],\n",
              "          [118],\n",
              "          [118],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 13],\n",
              "          [ 13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [124],\n",
              "          [147],\n",
              "          ...,\n",
              "          [162],\n",
              "          [161],\n",
              "          [163]],\n",
              "  \n",
              "         [[114],\n",
              "          [117],\n",
              "          [100],\n",
              "          ...,\n",
              "          [166],\n",
              "          [164],\n",
              "          [168]],\n",
              "  \n",
              "         [[125],\n",
              "          [140],\n",
              "          [148],\n",
              "          ...,\n",
              "          [169],\n",
              "          [154],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 28],\n",
              "          [ 47],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 37],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 51],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 65],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 62],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 62],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[220],\n",
              "          [211],\n",
              "          [222],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 22],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[198],\n",
              "          [206],\n",
              "          [217],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [104],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[199],\n",
              "          [218],\n",
              "          [190],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [101],\n",
              "          [179]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 28],\n",
              "          [ 30],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 60],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 28],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 66],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 63],\n",
              "          [ 48]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [108],\n",
              "          [107],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          ...,\n",
              "          [110],\n",
              "          [103],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [103],\n",
              "          [102],\n",
              "          [ 96]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 60],\n",
              "          [107],\n",
              "          [146],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 34],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 86],\n",
              "          [214],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 36],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [100],\n",
              "          [196],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 35],\n",
              "          [ 33]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[117],\n",
              "          [124],\n",
              "          [125],\n",
              "          ...,\n",
              "          [106],\n",
              "          [152],\n",
              "          [180]],\n",
              "  \n",
              "         [[118],\n",
              "          [124],\n",
              "          [128],\n",
              "          ...,\n",
              "          [172],\n",
              "          [193],\n",
              "          [175]],\n",
              "  \n",
              "         [[124],\n",
              "          [126],\n",
              "          [127],\n",
              "          ...,\n",
              "          [168],\n",
              "          [182],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[  2],\n",
              "          [  4],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  4],\n",
              "          [  2]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [231],\n",
              "          [220],\n",
              "          ...,\n",
              "          [221],\n",
              "          [220],\n",
              "          [  7]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [220],\n",
              "          [193],\n",
              "          ...,\n",
              "          [213],\n",
              "          [221],\n",
              "          [  1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 38],\n",
              "          [220],\n",
              "          [183],\n",
              "          ...,\n",
              "          [212],\n",
              "          [222],\n",
              "          [  0]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [221],\n",
              "          [221],\n",
              "          ...,\n",
              "          [212],\n",
              "          [222],\n",
              "          [  0]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  9],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  7],\n",
              "          [  3]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[23],\n",
              "          [62],\n",
              "          [66],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [20],\n",
              "          [33]],\n",
              "  \n",
              "         [[28],\n",
              "          [74],\n",
              "          [70],\n",
              "          ...,\n",
              "          [ 8],\n",
              "          [ 7],\n",
              "          [ 5]],\n",
              "  \n",
              "         [[35],\n",
              "          [85],\n",
              "          [81],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [ 6],\n",
              "          [ 7]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[16],\n",
              "          [25],\n",
              "          [17],\n",
              "          ...,\n",
              "          [ 9],\n",
              "          [36],\n",
              "          [22]],\n",
              "  \n",
              "         [[16],\n",
              "          [15],\n",
              "          [17],\n",
              "          ...,\n",
              "          [12],\n",
              "          [ 8],\n",
              "          [11]],\n",
              "  \n",
              "         [[17],\n",
              "          [11],\n",
              "          [23],\n",
              "          ...,\n",
              "          [10],\n",
              "          [10],\n",
              "          [ 6]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 45],\n",
              "          [ 46],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [107]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 44],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [110],\n",
              "          [111],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 45],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [114],\n",
              "          [103],\n",
              "          [109]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 13],\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 80],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [  9],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [103],\n",
              "          [102],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [115],\n",
              "          [142],\n",
              "          [ 86]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[134],\n",
              "          [133],\n",
              "          [133],\n",
              "          ...,\n",
              "          [166],\n",
              "          [169],\n",
              "          [178]],\n",
              "  \n",
              "         [[136],\n",
              "          [131],\n",
              "          [127],\n",
              "          ...,\n",
              "          [151],\n",
              "          [153],\n",
              "          [164]],\n",
              "  \n",
              "         [[125],\n",
              "          [122],\n",
              "          [117],\n",
              "          ...,\n",
              "          [140],\n",
              "          [142],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 90],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 82],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 97],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 81],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [114],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 85],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[252],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[252],\n",
              "          [247],\n",
              "          [240],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[253],\n",
              "          [247],\n",
              "          [235],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[250],\n",
              "          [237],\n",
              "          [225],\n",
              "          ...,\n",
              "          [227],\n",
              "          [239],\n",
              "          [249]],\n",
              "  \n",
              "         [[252],\n",
              "          [237],\n",
              "          [228],\n",
              "          ...,\n",
              "          [231],\n",
              "          [239],\n",
              "          [248]],\n",
              "  \n",
              "         [[249],\n",
              "          [245],\n",
              "          [245],\n",
              "          ...,\n",
              "          [246],\n",
              "          [246],\n",
              "          [252]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 73],\n",
              "          [ 75],\n",
              "          [141],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 89],\n",
              "          [108],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [253]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 76],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [244],\n",
              "          [241],\n",
              "          [235]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 23],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [156],\n",
              "          [167],\n",
              "          [134]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 24],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [118],\n",
              "          [134],\n",
              "          [144]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 21],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [162],\n",
              "          [145],\n",
              "          [124]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 40],\n",
              "          [ 22],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 76],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 28],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 75],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 30],\n",
              "          [ 12],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 71],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [116],\n",
              "          [120],\n",
              "          ...,\n",
              "          [127],\n",
              "          [124],\n",
              "          [126]],\n",
              "  \n",
              "         [[117],\n",
              "          [119],\n",
              "          [126],\n",
              "          ...,\n",
              "          [126],\n",
              "          [123],\n",
              "          [123]],\n",
              "  \n",
              "         [[120],\n",
              "          [120],\n",
              "          [124],\n",
              "          ...,\n",
              "          [126],\n",
              "          [124],\n",
              "          [121]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[198],\n",
              "          [175],\n",
              "          [195],\n",
              "          ...,\n",
              "          [134],\n",
              "          [136],\n",
              "          [140]],\n",
              "  \n",
              "         [[243],\n",
              "          [240],\n",
              "          [255],\n",
              "          ...,\n",
              "          [136],\n",
              "          [133],\n",
              "          [137]],\n",
              "  \n",
              "         [[244],\n",
              "          [240],\n",
              "          [250],\n",
              "          ...,\n",
              "          [130],\n",
              "          [132],\n",
              "          [135]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[230],\n",
              "          [229],\n",
              "          [232],\n",
              "          ...,\n",
              "          [172],\n",
              "          [172],\n",
              "          [171]],\n",
              "  \n",
              "         [[225],\n",
              "          [225],\n",
              "          [221],\n",
              "          ...,\n",
              "          [186],\n",
              "          [185],\n",
              "          [184]],\n",
              "  \n",
              "         [[224],\n",
              "          [221],\n",
              "          [229],\n",
              "          ...,\n",
              "          [184],\n",
              "          [186],\n",
              "          [186]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[143],\n",
              "          [133],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 99],\n",
              "          [116]],\n",
              "  \n",
              "         [[137],\n",
              "          [114],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 88],\n",
              "          [103]],\n",
              "  \n",
              "         [[115],\n",
              "          [ 67],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 87],\n",
              "          [ 84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 52],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 64],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 39],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 67],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 54],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 79],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[153],\n",
              "          [159],\n",
              "          [156],\n",
              "          ...,\n",
              "          [193],\n",
              "          [194],\n",
              "          [193]],\n",
              "  \n",
              "         [[165],\n",
              "          [162],\n",
              "          [166],\n",
              "          ...,\n",
              "          [193],\n",
              "          [194],\n",
              "          [195]],\n",
              "  \n",
              "         [[164],\n",
              "          [164],\n",
              "          [164],\n",
              "          ...,\n",
              "          [192],\n",
              "          [193],\n",
              "          [199]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[153],\n",
              "          [158],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 83],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[166],\n",
              "          [165],\n",
              "          [170],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 62],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[114],\n",
              "          [116],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 56],\n",
              "          [ 78]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 11],\n",
              "          [  8],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 79],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[  7],\n",
              "          [ 11],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 24],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 11],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 21],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[102],\n",
              "          [117],\n",
              "          [105],\n",
              "          ...,\n",
              "          [144],\n",
              "          [159],\n",
              "          [158]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [102],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [146],\n",
              "          [149],\n",
              "          [156]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [126],\n",
              "          [105],\n",
              "          ...,\n",
              "          [149],\n",
              "          [196],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[156],\n",
              "          [131],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 69],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[175],\n",
              "          [ 78],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 71],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 97],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 70],\n",
              "          [ 75]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [114],\n",
              "          [118],\n",
              "          ...,\n",
              "          [135],\n",
              "          [131],\n",
              "          [125]],\n",
              "  \n",
              "         [[117],\n",
              "          [121],\n",
              "          [120],\n",
              "          ...,\n",
              "          [121],\n",
              "          [114],\n",
              "          [116]],\n",
              "  \n",
              "         [[115],\n",
              "          [114],\n",
              "          [117],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 76],\n",
              "          [ 81]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[127],\n",
              "          [127],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 61],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[129],\n",
              "          [127],\n",
              "          [127],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 49],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[121],\n",
              "          [122],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 41],\n",
              "          [ 42]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 96],\n",
              "          [ 94],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 32],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 99],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 39],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[109],\n",
              "          [114],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 36],\n",
              "          [ 39]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 16],\n",
              "          [ 16],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [132],\n",
              "          [145],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 25],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [158],\n",
              "          [160],\n",
              "          [141]],\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 16],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [171],\n",
              "          [165],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[200],\n",
              "          [160],\n",
              "          [156],\n",
              "          ...,\n",
              "          [163],\n",
              "          [164],\n",
              "          [187]],\n",
              "  \n",
              "         [[170],\n",
              "          [197],\n",
              "          [170],\n",
              "          ...,\n",
              "          [177],\n",
              "          [164],\n",
              "          [154]],\n",
              "  \n",
              "         [[161],\n",
              "          [192],\n",
              "          [177],\n",
              "          ...,\n",
              "          [165],\n",
              "          [166],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 91],\n",
              "          [119],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [108],\n",
              "          [109],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 87],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [129],\n",
              "          [130],\n",
              "          [125]],\n",
              "  \n",
              "         [[108],\n",
              "          [ 98],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [130],\n",
              "          [129],\n",
              "          [119]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 88],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 32],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 69],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 16],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 51],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 23],\n",
              "          [ 32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 89],\n",
              "          [ 91],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 64],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [105],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 57],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[102],\n",
              "          [113],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 82],\n",
              "          [ 74]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 76],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [166],\n",
              "          [176],\n",
              "          [172]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 73],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [176],\n",
              "          [177],\n",
              "          [177]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 81],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [177],\n",
              "          [175],\n",
              "          [176]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 36],\n",
              "          [ 30],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 97],\n",
              "          [146]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 95],\n",
              "          [129]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 95],\n",
              "          [119]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 84],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 59],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 85],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 57],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 94],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 55],\n",
              "          [ 52]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 84],\n",
              "          [ 83],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [178],\n",
              "          [178],\n",
              "          [177]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 85],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 85],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [176],\n",
              "          [178],\n",
              "          [178]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[163],\n",
              "          [158],\n",
              "          [159],\n",
              "          ...,\n",
              "          [130],\n",
              "          [132],\n",
              "          [133]],\n",
              "  \n",
              "         [[160],\n",
              "          [159],\n",
              "          [159],\n",
              "          ...,\n",
              "          [128],\n",
              "          [125],\n",
              "          [129]],\n",
              "  \n",
              "         [[163],\n",
              "          [160],\n",
              "          [160],\n",
              "          ...,\n",
              "          [131],\n",
              "          [138],\n",
              "          [126]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[138],\n",
              "          [138],\n",
              "          [133],\n",
              "          ...,\n",
              "          [129],\n",
              "          [130],\n",
              "          [125]],\n",
              "  \n",
              "         [[120],\n",
              "          [115],\n",
              "          [121],\n",
              "          ...,\n",
              "          [134],\n",
              "          [133],\n",
              "          [128]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 63],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [131],\n",
              "          [133],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [189],\n",
              "          [224],\n",
              "          ...,\n",
              "          [101],\n",
              "          [109],\n",
              "          [117]],\n",
              "  \n",
              "         [[195],\n",
              "          [163],\n",
              "          [228],\n",
              "          ...,\n",
              "          [148],\n",
              "          [120],\n",
              "          [114]],\n",
              "  \n",
              "         [[213],\n",
              "          [207],\n",
              "          [232],\n",
              "          ...,\n",
              "          [113],\n",
              "          [127],\n",
              "          [142]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[115],\n",
              "          [119],\n",
              "          [132],\n",
              "          ...,\n",
              "          [156],\n",
              "          [154],\n",
              "          [155]],\n",
              "  \n",
              "         [[111],\n",
              "          [116],\n",
              "          [128],\n",
              "          ...,\n",
              "          [153],\n",
              "          [151],\n",
              "          [147]],\n",
              "  \n",
              "         [[110],\n",
              "          [117],\n",
              "          [126],\n",
              "          ...,\n",
              "          [150],\n",
              "          [146],\n",
              "          [146]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[226],\n",
              "          [228],\n",
              "          [225],\n",
              "          ...,\n",
              "          [226],\n",
              "          [225],\n",
              "          [221]],\n",
              "  \n",
              "         [[122],\n",
              "          [169],\n",
              "          [213],\n",
              "          ...,\n",
              "          [225],\n",
              "          [226],\n",
              "          [226]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [110],\n",
              "          [220],\n",
              "          ...,\n",
              "          [227],\n",
              "          [231],\n",
              "          [228]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[34],\n",
              "          [22],\n",
              "          [11],\n",
              "          ...,\n",
              "          [53],\n",
              "          [49],\n",
              "          [45]],\n",
              "  \n",
              "         [[32],\n",
              "          [16],\n",
              "          [29],\n",
              "          ...,\n",
              "          [52],\n",
              "          [45],\n",
              "          [43]],\n",
              "  \n",
              "         [[34],\n",
              "          [18],\n",
              "          [26],\n",
              "          ...,\n",
              "          [50],\n",
              "          [47],\n",
              "          [40]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 8],\n",
              "          [ 8],\n",
              "          [ 8],\n",
              "          ...,\n",
              "          [15],\n",
              "          [15],\n",
              "          [18]],\n",
              "  \n",
              "         [[12],\n",
              "          [10],\n",
              "          [13],\n",
              "          ...,\n",
              "          [14],\n",
              "          [14],\n",
              "          [13]],\n",
              "  \n",
              "         [[15],\n",
              "          [ 8],\n",
              "          [11],\n",
              "          ...,\n",
              "          [15],\n",
              "          [15],\n",
              "          [16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[156],\n",
              "          [170],\n",
              "          [176],\n",
              "          ...,\n",
              "          [114],\n",
              "          [104],\n",
              "          [104]],\n",
              "  \n",
              "         [[158],\n",
              "          [160],\n",
              "          [176],\n",
              "          ...,\n",
              "          [111],\n",
              "          [108],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[155],\n",
              "          [163],\n",
              "          [168],\n",
              "          ...,\n",
              "          [108],\n",
              "          [ 98],\n",
              "          [ 94]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [155],\n",
              "          [158],\n",
              "          ...,\n",
              "          [194],\n",
              "          [202],\n",
              "          [204]],\n",
              "  \n",
              "         [[145],\n",
              "          [152],\n",
              "          [148],\n",
              "          ...,\n",
              "          [201],\n",
              "          [197],\n",
              "          [202]],\n",
              "  \n",
              "         [[140],\n",
              "          [140],\n",
              "          [156],\n",
              "          ...,\n",
              "          [195],\n",
              "          [188],\n",
              "          [197]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 55],\n",
              "          [ 59],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 48],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 59],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 28],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 65],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 23],\n",
              "          [ 21],\n",
              "          [ 40]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 75],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [106],\n",
              "          [102],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 75],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [101],\n",
              "          [103],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 71],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 99],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [116],\n",
              "          [122],\n",
              "          ...,\n",
              "          [119],\n",
              "          [104],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[126],\n",
              "          [128],\n",
              "          [129],\n",
              "          ...,\n",
              "          [103],\n",
              "          [112],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[102],\n",
              "          [123],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 98],\n",
              "          [106]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[128],\n",
              "          [ 94],\n",
              "          [118],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 98],\n",
              "          [111]],\n",
              "  \n",
              "         [[109],\n",
              "          [137],\n",
              "          [127],\n",
              "          ...,\n",
              "          [104],\n",
              "          [ 98],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[123],\n",
              "          [151],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [111],\n",
              "          [117]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[121],\n",
              "          [122],\n",
              "          [128],\n",
              "          ...,\n",
              "          [154],\n",
              "          [154],\n",
              "          [152]],\n",
              "  \n",
              "         [[122],\n",
              "          [128],\n",
              "          [126],\n",
              "          ...,\n",
              "          [144],\n",
              "          [134],\n",
              "          [146]],\n",
              "  \n",
              "         [[116],\n",
              "          [124],\n",
              "          [126],\n",
              "          ...,\n",
              "          [143],\n",
              "          [145],\n",
              "          [158]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 49],\n",
              "          [115],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [127],\n",
              "          [108],\n",
              "          [108]],\n",
              "  \n",
              "         [[129],\n",
              "          [121],\n",
              "          [142],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [128],\n",
              "          [146]],\n",
              "  \n",
              "         [[105],\n",
              "          [ 54],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [116],\n",
              "          [103],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[204],\n",
              "          [232],\n",
              "          [231],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 83],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[231],\n",
              "          [234],\n",
              "          [218],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 81],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[231],\n",
              "          [223],\n",
              "          [232],\n",
              "          ...,\n",
              "          [102],\n",
              "          [102],\n",
              "          [ 92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [150],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 17],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[149],\n",
              "          [151],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 18],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[138],\n",
              "          [142],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 17],\n",
              "          [ 18]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[218],\n",
              "          [211],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 54],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[216],\n",
              "          [215],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 68],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[215],\n",
              "          [219],\n",
              "          [233],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 76],\n",
              "          [ 69]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 88],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [150],\n",
              "          [135],\n",
              "          [134]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 94],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [150],\n",
              "          [161],\n",
              "          [144]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 91],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [130],\n",
              "          [154],\n",
              "          [142]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[220],\n",
              "          [197],\n",
              "          [172],\n",
              "          ...,\n",
              "          [119],\n",
              "          [117],\n",
              "          [115]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 90],\n",
              "          [106],\n",
              "          ...,\n",
              "          [118],\n",
              "          [116],\n",
              "          [113]],\n",
              "  \n",
              "         [[124],\n",
              "          [127],\n",
              "          [148],\n",
              "          ...,\n",
              "          [115],\n",
              "          [115],\n",
              "          [112]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[157],\n",
              "          [156],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 92],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[134],\n",
              "          [134],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 97],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [144],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 99],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[156],\n",
              "          [161],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 88],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[156],\n",
              "          [159],\n",
              "          [163],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 92],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[157],\n",
              "          [162],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 95],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [146],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 77],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[162],\n",
              "          [163],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 74],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[174],\n",
              "          [160],\n",
              "          [162],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 39],\n",
              "          [ 39]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[212],\n",
              "          [212],\n",
              "          [213],\n",
              "          ...,\n",
              "          [237],\n",
              "          [233],\n",
              "          [238]],\n",
              "  \n",
              "         [[212],\n",
              "          [212],\n",
              "          [213],\n",
              "          ...,\n",
              "          [238],\n",
              "          [235],\n",
              "          [237]],\n",
              "  \n",
              "         [[212],\n",
              "          [212],\n",
              "          [213],\n",
              "          ...,\n",
              "          [232],\n",
              "          [236],\n",
              "          [237]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[231],\n",
              "          [238],\n",
              "          [228],\n",
              "          ...,\n",
              "          [133],\n",
              "          [139],\n",
              "          [139]],\n",
              "  \n",
              "         [[234],\n",
              "          [237],\n",
              "          [228],\n",
              "          ...,\n",
              "          [142],\n",
              "          [146],\n",
              "          [143]],\n",
              "  \n",
              "         [[232],\n",
              "          [235],\n",
              "          [221],\n",
              "          ...,\n",
              "          [138],\n",
              "          [141],\n",
              "          [138]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[155],\n",
              "          [159],\n",
              "          [158],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [255]],\n",
              "  \n",
              "         [[152],\n",
              "          [157],\n",
              "          [159],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [255]],\n",
              "  \n",
              "         [[132],\n",
              "          [155],\n",
              "          [156],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 73],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 73],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 73],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 74],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 72],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 74],\n",
              "          [ 72]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[105],\n",
              "          [111],\n",
              "          [106],\n",
              "          ...,\n",
              "          [114],\n",
              "          [118],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [100],\n",
              "          [100],\n",
              "          ...,\n",
              "          [124],\n",
              "          [130],\n",
              "          [120]],\n",
              "  \n",
              "         [[138],\n",
              "          [119],\n",
              "          [101],\n",
              "          ...,\n",
              "          [113],\n",
              "          [122],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [106],\n",
              "          [118],\n",
              "          ...,\n",
              "          [107],\n",
              "          [131],\n",
              "          [127]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [104],\n",
              "          [108],\n",
              "          ...,\n",
              "          [110],\n",
              "          [118],\n",
              "          [100]],\n",
              "  \n",
              "         [[107],\n",
              "          [102],\n",
              "          [104],\n",
              "          ...,\n",
              "          [104],\n",
              "          [104],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[116],\n",
              "          [130],\n",
              "          [147],\n",
              "          ...,\n",
              "          [155],\n",
              "          [152],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [102],\n",
              "          [137],\n",
              "          ...,\n",
              "          [158],\n",
              "          [154],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 98],\n",
              "          [109],\n",
              "          ...,\n",
              "          [160],\n",
              "          [157],\n",
              "          [153]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 30],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 61],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 30],\n",
              "          [ 31],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 60],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 28],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 53],\n",
              "          [ 49]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 41],\n",
              "          [ 39],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 15],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [ 95],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 40],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 82],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 80],\n",
              "          [ 80]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[245],\n",
              "          [243],\n",
              "          [248],\n",
              "          ...,\n",
              "          [139],\n",
              "          [166],\n",
              "          [179]],\n",
              "  \n",
              "         [[251],\n",
              "          [254],\n",
              "          [252],\n",
              "          ...,\n",
              "          [153],\n",
              "          [136],\n",
              "          [150]],\n",
              "  \n",
              "         [[254],\n",
              "          [253],\n",
              "          [252],\n",
              "          ...,\n",
              "          [190],\n",
              "          [181],\n",
              "          [142]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 13],\n",
              "          [ 23],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 21],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 21],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 78],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 15],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 58],\n",
              "          [ 79]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 84],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [203],\n",
              "          [201],\n",
              "          [198]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 75],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [200],\n",
              "          [196],\n",
              "          [201]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 71],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [200],\n",
              "          [200],\n",
              "          [198]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 81],\n",
              "          [ 82],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [115],\n",
              "          [120],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 66],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [117],\n",
              "          [116],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 59],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [110],\n",
              "          [109],\n",
              "          [122]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[246],\n",
              "          [237],\n",
              "          [220],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 35],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[235],\n",
              "          [231],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 40],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[227],\n",
              "          [247],\n",
              "          [213],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 43],\n",
              "          [ 40]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[235],\n",
              "          [237],\n",
              "          [234],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 61],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[237],\n",
              "          [238],\n",
              "          [233],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 62],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[238],\n",
              "          [236],\n",
              "          [232],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 61],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[158],\n",
              "          [219],\n",
              "          [206],\n",
              "          ...,\n",
              "          [117],\n",
              "          [121],\n",
              "          [120]],\n",
              "  \n",
              "         [[158],\n",
              "          [216],\n",
              "          [207],\n",
              "          ...,\n",
              "          [118],\n",
              "          [119],\n",
              "          [120]],\n",
              "  \n",
              "         [[156],\n",
              "          [214],\n",
              "          [205],\n",
              "          ...,\n",
              "          [119],\n",
              "          [119],\n",
              "          [118]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[210],\n",
              "          [206],\n",
              "          [208],\n",
              "          ...,\n",
              "          [215],\n",
              "          [221],\n",
              "          [218]],\n",
              "  \n",
              "         [[205],\n",
              "          [207],\n",
              "          [205],\n",
              "          ...,\n",
              "          [218],\n",
              "          [215],\n",
              "          [213]],\n",
              "  \n",
              "         [[200],\n",
              "          [200],\n",
              "          [205],\n",
              "          ...,\n",
              "          [218],\n",
              "          [212],\n",
              "          [213]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [163],\n",
              "          [158],\n",
              "          ...,\n",
              "          [145],\n",
              "          [127],\n",
              "          [135]],\n",
              "  \n",
              "         [[155],\n",
              "          [165],\n",
              "          [167],\n",
              "          ...,\n",
              "          [138],\n",
              "          [132],\n",
              "          [124]],\n",
              "  \n",
              "         [[171],\n",
              "          [166],\n",
              "          [163],\n",
              "          ...,\n",
              "          [133],\n",
              "          [128],\n",
              "          [134]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[196],\n",
              "          [194],\n",
              "          [193],\n",
              "          ...,\n",
              "          [110],\n",
              "          [104],\n",
              "          [109]],\n",
              "  \n",
              "         [[196],\n",
              "          [195],\n",
              "          [195],\n",
              "          ...,\n",
              "          [111],\n",
              "          [104],\n",
              "          [109]],\n",
              "  \n",
              "         [[195],\n",
              "          [197],\n",
              "          [195],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [100],\n",
              "          [104]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 74],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 71],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 40],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 60],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 31],\n",
              "          [ 31]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[123],\n",
              "          [ 19],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 81],\n",
              "          [164]],\n",
              "  \n",
              "         [[126],\n",
              "          [  6],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [137],\n",
              "          [164]],\n",
              "  \n",
              "         [[114],\n",
              "          [ 62],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [228],\n",
              "          [228],\n",
              "          [202]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[168],\n",
              "          [167],\n",
              "          [162],\n",
              "          ...,\n",
              "          [157],\n",
              "          [156],\n",
              "          [154]],\n",
              "  \n",
              "         [[161],\n",
              "          [164],\n",
              "          [170],\n",
              "          ...,\n",
              "          [160],\n",
              "          [156],\n",
              "          [159]],\n",
              "  \n",
              "         [[174],\n",
              "          [169],\n",
              "          [162],\n",
              "          ...,\n",
              "          [157],\n",
              "          [153],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 91],\n",
              "          [ 82],\n",
              "          [115],\n",
              "          ...,\n",
              "          [133],\n",
              "          [131],\n",
              "          [120]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [105],\n",
              "          [130],\n",
              "          ...,\n",
              "          [128],\n",
              "          [116],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [128],\n",
              "          [151],\n",
              "          ...,\n",
              "          [126],\n",
              "          [147],\n",
              "          [147]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[123],\n",
              "          [123],\n",
              "          [123],\n",
              "          ...,\n",
              "          [190],\n",
              "          [183],\n",
              "          [185]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 42],\n",
              "          [132],\n",
              "          ...,\n",
              "          [191],\n",
              "          [190],\n",
              "          [189]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 66],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [183],\n",
              "          [182],\n",
              "          [185]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 95],\n",
              "          [120],\n",
              "          [118],\n",
              "          ...,\n",
              "          [115],\n",
              "          [ 60],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[107],\n",
              "          [110],\n",
              "          [106],\n",
              "          ...,\n",
              "          [120],\n",
              "          [113],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[144],\n",
              "          [120],\n",
              "          [122],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 97],\n",
              "          [106]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[115],\n",
              "          [143],\n",
              "          [128],\n",
              "          ...,\n",
              "          [116],\n",
              "          [ 85],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[136],\n",
              "          [157],\n",
              "          [119],\n",
              "          ...,\n",
              "          [120],\n",
              "          [174],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[131],\n",
              "          [149],\n",
              "          [142],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 85],\n",
              "          [144]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 64],\n",
              "          [ 94],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 90],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 77],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 74],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [102],\n",
              "          [112],\n",
              "          [111]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 13],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 15],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 12],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 15],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 12],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 11],\n",
              "          [ 12]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 63],\n",
              "          [ 64],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [227],\n",
              "          [225],\n",
              "          [223]],\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 86],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [223],\n",
              "          [227],\n",
              "          [227]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [226],\n",
              "          [225],\n",
              "          [222]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [242],\n",
              "          [240],\n",
              "          [239]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [242],\n",
              "          [242],\n",
              "          [239]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [242],\n",
              "          [242],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[179],\n",
              "          [166],\n",
              "          [157],\n",
              "          ...,\n",
              "          [177],\n",
              "          [157],\n",
              "          [136]],\n",
              "  \n",
              "         [[131],\n",
              "          [166],\n",
              "          [138],\n",
              "          ...,\n",
              "          [138],\n",
              "          [128],\n",
              "          [168]],\n",
              "  \n",
              "         [[193],\n",
              "          [154],\n",
              "          [175],\n",
              "          ...,\n",
              "          [147],\n",
              "          [157],\n",
              "          [132]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[184],\n",
              "          [186],\n",
              "          [181],\n",
              "          ...,\n",
              "          [219],\n",
              "          [206],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[180],\n",
              "          [183],\n",
              "          [187],\n",
              "          ...,\n",
              "          [217],\n",
              "          [160],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[182],\n",
              "          [185],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 81],\n",
              "          [ 79]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[19],\n",
              "          [21],\n",
              "          [21],\n",
              "          ...,\n",
              "          [80],\n",
              "          [ 9],\n",
              "          [51]],\n",
              "  \n",
              "         [[17],\n",
              "          [21],\n",
              "          [21],\n",
              "          ...,\n",
              "          [99],\n",
              "          [ 6],\n",
              "          [52]],\n",
              "  \n",
              "         [[17],\n",
              "          [21],\n",
              "          [24],\n",
              "          ...,\n",
              "          [83],\n",
              "          [ 6],\n",
              "          [48]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 5],\n",
              "          [26],\n",
              "          [28],\n",
              "          ...,\n",
              "          [66],\n",
              "          [23],\n",
              "          [44]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [12],\n",
              "          [31],\n",
              "          ...,\n",
              "          [55],\n",
              "          [21],\n",
              "          [40]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 8],\n",
              "          [11],\n",
              "          ...,\n",
              "          [56],\n",
              "          [21],\n",
              "          [41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[115],\n",
              "          [114],\n",
              "          [110],\n",
              "          ...,\n",
              "          [253],\n",
              "          [252],\n",
              "          [255]],\n",
              "  \n",
              "         [[104],\n",
              "          [104],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [255]],\n",
              "  \n",
              "         [[119],\n",
              "          [ 99],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [110],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [112],\n",
              "          [113]],\n",
              "  \n",
              "         [[125],\n",
              "          [114],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [110],\n",
              "          [108],\n",
              "          [112]],\n",
              "  \n",
              "         [[118],\n",
              "          [105],\n",
              "          [113],\n",
              "          ...,\n",
              "          [102],\n",
              "          [103],\n",
              "          [104]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[136],\n",
              "          [122],\n",
              "          [116],\n",
              "          ...,\n",
              "          [234],\n",
              "          [223],\n",
              "          [205]],\n",
              "  \n",
              "         [[128],\n",
              "          [135],\n",
              "          [131],\n",
              "          ...,\n",
              "          [153],\n",
              "          [180],\n",
              "          [193]],\n",
              "  \n",
              "         [[112],\n",
              "          [102],\n",
              "          [115],\n",
              "          ...,\n",
              "          [192],\n",
              "          [114],\n",
              "          [104]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[129],\n",
              "          [152],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 32],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[162],\n",
              "          [ 74],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 30],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[125],\n",
              "          [118],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 20],\n",
              "          [ 20]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[209],\n",
              "          [227],\n",
              "          [238],\n",
              "          ...,\n",
              "          [106],\n",
              "          [115],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[235],\n",
              "          [134],\n",
              "          [236],\n",
              "          ...,\n",
              "          [133],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[122],\n",
              "          [155],\n",
              "          [163],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [146],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 37],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [107],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 30],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [121],\n",
              "          [143],\n",
              "          [122]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 24],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [133],\n",
              "          [138],\n",
              "          [143]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 51],\n",
              "          [121],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [117],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [102],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [123],\n",
              "          [174],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 60],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 99],\n",
              "          [154]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[148],\n",
              "          [118],\n",
              "          [124],\n",
              "          ...,\n",
              "          [120],\n",
              "          [113],\n",
              "          [183]],\n",
              "  \n",
              "         [[153],\n",
              "          [124],\n",
              "          [120],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 83],\n",
              "          [176]],\n",
              "  \n",
              "         [[145],\n",
              "          [ 97],\n",
              "          [110],\n",
              "          ...,\n",
              "          [171],\n",
              "          [105],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[68],\n",
              "          [65],\n",
              "          [65],\n",
              "          ...,\n",
              "          [76],\n",
              "          [70],\n",
              "          [66]],\n",
              "  \n",
              "         [[63],\n",
              "          [75],\n",
              "          [74],\n",
              "          ...,\n",
              "          [63],\n",
              "          [66],\n",
              "          [62]],\n",
              "  \n",
              "         [[70],\n",
              "          [61],\n",
              "          [63],\n",
              "          ...,\n",
              "          [67],\n",
              "          [71],\n",
              "          [71]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[81],\n",
              "          [58],\n",
              "          [26],\n",
              "          ...,\n",
              "          [75],\n",
              "          [70],\n",
              "          [75]],\n",
              "  \n",
              "         [[80],\n",
              "          [55],\n",
              "          [21],\n",
              "          ...,\n",
              "          [74],\n",
              "          [74],\n",
              "          [68]],\n",
              "  \n",
              "         [[76],\n",
              "          [55],\n",
              "          [27],\n",
              "          ...,\n",
              "          [82],\n",
              "          [73],\n",
              "          [69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[220],\n",
              "          [ 89],\n",
              "          [154],\n",
              "          ...,\n",
              "          [168],\n",
              "          [115],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[156],\n",
              "          [ 71],\n",
              "          [102],\n",
              "          ...,\n",
              "          [139],\n",
              "          [ 86],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[132],\n",
              "          [ 67],\n",
              "          [108],\n",
              "          ...,\n",
              "          [119],\n",
              "          [ 72],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[137],\n",
              "          [169],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 68],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[144],\n",
              "          [229],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 30],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[114],\n",
              "          [139],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 47],\n",
              "          [ 34]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 36],\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 60],\n",
              "          [172]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 39],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 66],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 36],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [121],\n",
              "          [138]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 74],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 56],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 75],\n",
              "          [ 71],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 53],\n",
              "          [ 30]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 76],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 47],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[53],\n",
              "          [48],\n",
              "          [47],\n",
              "          ...,\n",
              "          [34],\n",
              "          [34],\n",
              "          [38]],\n",
              "  \n",
              "         [[50],\n",
              "          [53],\n",
              "          [49],\n",
              "          ...,\n",
              "          [35],\n",
              "          [36],\n",
              "          [34]],\n",
              "  \n",
              "         [[43],\n",
              "          [47],\n",
              "          [51],\n",
              "          ...,\n",
              "          [37],\n",
              "          [38],\n",
              "          [40]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[72],\n",
              "          [66],\n",
              "          [61],\n",
              "          ...,\n",
              "          [47],\n",
              "          [44],\n",
              "          [47]],\n",
              "  \n",
              "         [[73],\n",
              "          [66],\n",
              "          [60],\n",
              "          ...,\n",
              "          [48],\n",
              "          [44],\n",
              "          [46]],\n",
              "  \n",
              "         [[74],\n",
              "          [67],\n",
              "          [63],\n",
              "          ...,\n",
              "          [47],\n",
              "          [45],\n",
              "          [48]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[119],\n",
              "          [197],\n",
              "          [206],\n",
              "          ...,\n",
              "          [248],\n",
              "          [249],\n",
              "          [168]],\n",
              "  \n",
              "         [[113],\n",
              "          [206],\n",
              "          [210],\n",
              "          ...,\n",
              "          [250],\n",
              "          [250],\n",
              "          [166]],\n",
              "  \n",
              "         [[130],\n",
              "          [206],\n",
              "          [210],\n",
              "          ...,\n",
              "          [250],\n",
              "          [251],\n",
              "          [159]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[211],\n",
              "          [211],\n",
              "          [207],\n",
              "          ...,\n",
              "          [145],\n",
              "          [142],\n",
              "          [141]],\n",
              "  \n",
              "         [[201],\n",
              "          [209],\n",
              "          [210],\n",
              "          ...,\n",
              "          [144],\n",
              "          [145],\n",
              "          [138]],\n",
              "  \n",
              "         [[203],\n",
              "          [209],\n",
              "          [201],\n",
              "          ...,\n",
              "          [144],\n",
              "          [140],\n",
              "          [136]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 13],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 17],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[  1],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 17]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[225],\n",
              "          [228],\n",
              "          [230],\n",
              "          ...,\n",
              "          [184],\n",
              "          [191],\n",
              "          [188]],\n",
              "  \n",
              "         [[220],\n",
              "          [222],\n",
              "          [224],\n",
              "          ...,\n",
              "          [187],\n",
              "          [190],\n",
              "          [201]],\n",
              "  \n",
              "         [[227],\n",
              "          [229],\n",
              "          [225],\n",
              "          ...,\n",
              "          [208],\n",
              "          [198],\n",
              "          [204]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[179],\n",
              "          [165],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 15],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[178],\n",
              "          [168],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 17],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[177],\n",
              "          [168],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[190],\n",
              "          [192],\n",
              "          [192],\n",
              "          ...,\n",
              "          [133],\n",
              "          [117],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[190],\n",
              "          [192],\n",
              "          [192],\n",
              "          ...,\n",
              "          [131],\n",
              "          [129],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[190],\n",
              "          [192],\n",
              "          [192],\n",
              "          ...,\n",
              "          [123],\n",
              "          [129],\n",
              "          [101]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 36],\n",
              "          [ 26],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [169],\n",
              "          [176]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 15],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [164],\n",
              "          [174]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 16],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [166],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 41],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 39],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 43],\n",
              "          [ 37],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 46],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 54],\n",
              "          [ 68]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 71],\n",
              "          [ 71],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 70],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 57],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[139],\n",
              "          [128],\n",
              "          [167],\n",
              "          ...,\n",
              "          [159],\n",
              "          [160],\n",
              "          [153]],\n",
              "  \n",
              "         [[134],\n",
              "          [176],\n",
              "          [173],\n",
              "          ...,\n",
              "          [150],\n",
              "          [145],\n",
              "          [142]],\n",
              "  \n",
              "         [[171],\n",
              "          [178],\n",
              "          [177],\n",
              "          ...,\n",
              "          [174],\n",
              "          [142],\n",
              "          [140]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[136],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [156],\n",
              "          [154],\n",
              "          [153]],\n",
              "  \n",
              "         [[147],\n",
              "          [145],\n",
              "          [150],\n",
              "          ...,\n",
              "          [159],\n",
              "          [158],\n",
              "          [154]],\n",
              "  \n",
              "         [[241],\n",
              "          [246],\n",
              "          [243],\n",
              "          ...,\n",
              "          [158],\n",
              "          [158],\n",
              "          [159]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[254],\n",
              "          [252],\n",
              "          [253],\n",
              "          ...,\n",
              "          [136],\n",
              "          [146],\n",
              "          [172]],\n",
              "  \n",
              "         [[252],\n",
              "          [251],\n",
              "          [187],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 85],\n",
              "          [101]],\n",
              "  \n",
              "         [[160],\n",
              "          [155],\n",
              "          [211],\n",
              "          ...,\n",
              "          [113],\n",
              "          [112],\n",
              "          [130]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[182],\n",
              "          [173],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [224],\n",
              "          [202],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 67],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [236],\n",
              "          [209],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[105],\n",
              "          [ 94],\n",
              "          [125],\n",
              "          ...,\n",
              "          [130],\n",
              "          [214],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[101],\n",
              "          [117],\n",
              "          [124],\n",
              "          ...,\n",
              "          [132],\n",
              "          [129],\n",
              "          [114]],\n",
              "  \n",
              "         [[104],\n",
              "          [104],\n",
              "          [106],\n",
              "          ...,\n",
              "          [119],\n",
              "          [125],\n",
              "          [110]],\n",
              "  \n",
              "         [[106],\n",
              "          [103],\n",
              "          [112],\n",
              "          ...,\n",
              "          [124],\n",
              "          [119],\n",
              "          [117]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 36],\n",
              "          [ 29],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 57],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 24],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 37],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 23],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 28],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 58],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [214],\n",
              "          [186],\n",
              "          [177]],\n",
              "  \n",
              "         [[106],\n",
              "          [107],\n",
              "          [106],\n",
              "          ...,\n",
              "          [199],\n",
              "          [193],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 98],\n",
              "          [110],\n",
              "          ...,\n",
              "          [217],\n",
              "          [213],\n",
              "          [207]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[27],\n",
              "          [37],\n",
              "          [16],\n",
              "          ...,\n",
              "          [70],\n",
              "          [67],\n",
              "          [63]],\n",
              "  \n",
              "         [[32],\n",
              "          [39],\n",
              "          [41],\n",
              "          ...,\n",
              "          [74],\n",
              "          [71],\n",
              "          [66]],\n",
              "  \n",
              "         [[39],\n",
              "          [35],\n",
              "          [39],\n",
              "          ...,\n",
              "          [75],\n",
              "          [70],\n",
              "          [68]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[64],\n",
              "          [75],\n",
              "          [72],\n",
              "          ...,\n",
              "          [37],\n",
              "          [34],\n",
              "          [34]],\n",
              "  \n",
              "         [[53],\n",
              "          [55],\n",
              "          [67],\n",
              "          ...,\n",
              "          [37],\n",
              "          [35],\n",
              "          [35]],\n",
              "  \n",
              "         [[51],\n",
              "          [53],\n",
              "          [47],\n",
              "          ...,\n",
              "          [36],\n",
              "          [34],\n",
              "          [37]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 61],\n",
              "          [ 62],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [192],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 63],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [192],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 63],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [192],\n",
              "          [192],\n",
              "          [192]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  4],\n",
              "          [ 35],\n",
              "          [108],\n",
              "          ...,\n",
              "          [167],\n",
              "          [167],\n",
              "          [166]],\n",
              "  \n",
              "         [[  5],\n",
              "          [ 21],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [166],\n",
              "          [166],\n",
              "          [166]],\n",
              "  \n",
              "         [[  2],\n",
              "          [  8],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [168],\n",
              "          [167],\n",
              "          [167]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 47],\n",
              "          [ 45],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [104],\n",
              "          [ 55],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 49],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 55],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 57],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 53],\n",
              "          [ 50]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[162],\n",
              "          [166],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 75],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[164],\n",
              "          [164],\n",
              "          [168],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 86],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[160],\n",
              "          [156],\n",
              "          [163],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 83],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 35],\n",
              "          [ 37],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 93],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 46],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 97],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 93],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [100],\n",
              "          [100]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[191],\n",
              "          [173],\n",
              "          [166],\n",
              "          ...,\n",
              "          [210],\n",
              "          [201],\n",
              "          [157]],\n",
              "  \n",
              "         [[165],\n",
              "          [155],\n",
              "          [152],\n",
              "          ...,\n",
              "          [130],\n",
              "          [196],\n",
              "          [153]],\n",
              "  \n",
              "         [[164],\n",
              "          [155],\n",
              "          [156],\n",
              "          ...,\n",
              "          [141],\n",
              "          [174],\n",
              "          [161]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 82],\n",
              "          [ 86],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 30],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 95],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 28],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[104],\n",
              "          [104],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          [ 21]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[210],\n",
              "          [204],\n",
              "          [209],\n",
              "          ...,\n",
              "          [228],\n",
              "          [229],\n",
              "          [226]],\n",
              "  \n",
              "         [[205],\n",
              "          [208],\n",
              "          [208],\n",
              "          ...,\n",
              "          [225],\n",
              "          [222],\n",
              "          [224]],\n",
              "  \n",
              "         [[201],\n",
              "          [205],\n",
              "          [208],\n",
              "          ...,\n",
              "          [227],\n",
              "          [226],\n",
              "          [226]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [107],\n",
              "          [109],\n",
              "          ...,\n",
              "          [227],\n",
              "          [222],\n",
              "          [177]],\n",
              "  \n",
              "         [[103],\n",
              "          [107],\n",
              "          [109],\n",
              "          ...,\n",
              "          [188],\n",
              "          [206],\n",
              "          [186]],\n",
              "  \n",
              "         [[109],\n",
              "          [109],\n",
              "          [109],\n",
              "          ...,\n",
              "          [176],\n",
              "          [184],\n",
              "          [227]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 44],\n",
              "          [104],\n",
              "          [109],\n",
              "          ...,\n",
              "          [102],\n",
              "          [117],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 95],\n",
              "          [109],\n",
              "          ...,\n",
              "          [104],\n",
              "          [101],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [102],\n",
              "          [110],\n",
              "          ...,\n",
              "          [117],\n",
              "          [102],\n",
              "          [116]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[221],\n",
              "          [219],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 19],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[227],\n",
              "          [196],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 20],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[229],\n",
              "          [201],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 19],\n",
              "          [ 20],\n",
              "          [ 20]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [173],\n",
              "          [171],\n",
              "          [152]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [172],\n",
              "          [172],\n",
              "          [154]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [174],\n",
              "          [179],\n",
              "          [164]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[131],\n",
              "          [140],\n",
              "          [104],\n",
              "          ...,\n",
              "          [141],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[125],\n",
              "          [132],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [141],\n",
              "          [140],\n",
              "          [138]],\n",
              "  \n",
              "         [[115],\n",
              "          [131],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [141],\n",
              "          [140],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[107],\n",
              "          [ 99],\n",
              "          [105],\n",
              "          ...,\n",
              "          [160],\n",
              "          [162],\n",
              "          [172]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [100],\n",
              "          [106],\n",
              "          ...,\n",
              "          [162],\n",
              "          [174],\n",
              "          [175]],\n",
              "  \n",
              "         [[102],\n",
              "          [102],\n",
              "          [105],\n",
              "          ...,\n",
              "          [158],\n",
              "          [162],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[104],\n",
              "          [105],\n",
              "          [102],\n",
              "          ...,\n",
              "          [135],\n",
              "          [133],\n",
              "          [106]],\n",
              "  \n",
              "         [[110],\n",
              "          [110],\n",
              "          [107],\n",
              "          ...,\n",
              "          [154],\n",
              "          [111],\n",
              "          [104]],\n",
              "  \n",
              "         [[114],\n",
              "          [111],\n",
              "          [112],\n",
              "          ...,\n",
              "          [127],\n",
              "          [113],\n",
              "          [114]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[150],\n",
              "          [157],\n",
              "          [162],\n",
              "          ...,\n",
              "          [152],\n",
              "          [151],\n",
              "          [148]],\n",
              "  \n",
              "         [[145],\n",
              "          [150],\n",
              "          [153],\n",
              "          ...,\n",
              "          [141],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[132],\n",
              "          [140],\n",
              "          [145],\n",
              "          ...,\n",
              "          [127],\n",
              "          [126],\n",
              "          [125]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[238],\n",
              "          [239],\n",
              "          [201],\n",
              "          ...,\n",
              "          [220],\n",
              "          [222],\n",
              "          [223]],\n",
              "  \n",
              "         [[240],\n",
              "          [238],\n",
              "          [236],\n",
              "          ...,\n",
              "          [222],\n",
              "          [223],\n",
              "          [223]],\n",
              "  \n",
              "         [[240],\n",
              "          [241],\n",
              "          [234],\n",
              "          ...,\n",
              "          [222],\n",
              "          [223],\n",
              "          [223]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[230],\n",
              "          [231],\n",
              "          [233],\n",
              "          ...,\n",
              "          [101],\n",
              "          [101],\n",
              "          [102]],\n",
              "  \n",
              "         [[230],\n",
              "          [231],\n",
              "          [233],\n",
              "          ...,\n",
              "          [105],\n",
              "          [102],\n",
              "          [100]],\n",
              "  \n",
              "         [[229],\n",
              "          [230],\n",
              "          [232],\n",
              "          ...,\n",
              "          [107],\n",
              "          [104],\n",
              "          [100]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[124],\n",
              "          [124],\n",
              "          [125],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [171]],\n",
              "  \n",
              "         [[122],\n",
              "          [122],\n",
              "          [122],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [171]],\n",
              "  \n",
              "         [[121],\n",
              "          [121],\n",
              "          [122],\n",
              "          ...,\n",
              "          [169],\n",
              "          [171],\n",
              "          [172]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [123],\n",
              "          [147],\n",
              "          ...,\n",
              "          [124],\n",
              "          [128],\n",
              "          [170]],\n",
              "  \n",
              "         [[135],\n",
              "          [145],\n",
              "          [167],\n",
              "          ...,\n",
              "          [129],\n",
              "          [144],\n",
              "          [177]],\n",
              "  \n",
              "         [[154],\n",
              "          [173],\n",
              "          [152],\n",
              "          ...,\n",
              "          [137],\n",
              "          [133],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[112],\n",
              "          [ 52],\n",
              "          [ 25],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[119],\n",
              "          [ 80],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 25],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[118],\n",
              "          [112],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 28],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 73],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [100],\n",
              "          [103],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 72],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 62],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 98],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 47],\n",
              "          [ 62],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  4],\n",
              "          [  5]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 55],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  3],\n",
              "          [  7]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 43],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  3],\n",
              "          [  5]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [191],\n",
              "          [178],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 95],\n",
              "          [100]],\n",
              "  \n",
              "         [[173],\n",
              "          [198],\n",
              "          [185],\n",
              "          ...,\n",
              "          [102],\n",
              "          [100],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[173],\n",
              "          [167],\n",
              "          [180],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 92],\n",
              "          [ 97]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 45],\n",
              "          [ 59],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  4],\n",
              "          [  2]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 56],\n",
              "          [ 55],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  4],\n",
              "          [  3]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 57],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 16],\n",
              "          [ 17],\n",
              "          [ 19]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 17],\n",
              "          [ 17],\n",
              "          ...,\n",
              "          [132],\n",
              "          [123],\n",
              "          [112]],\n",
              "  \n",
              "         [[  9],\n",
              "          [  3],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [143],\n",
              "          [120],\n",
              "          [114]],\n",
              "  \n",
              "         [[  0],\n",
              "          [  1],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [126],\n",
              "          [115],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[137],\n",
              "          [141],\n",
              "          [135],\n",
              "          ...,\n",
              "          [134],\n",
              "          [127],\n",
              "          [129]],\n",
              "  \n",
              "         [[141],\n",
              "          [143],\n",
              "          [139],\n",
              "          ...,\n",
              "          [133],\n",
              "          [128],\n",
              "          [130]],\n",
              "  \n",
              "         [[143],\n",
              "          [139],\n",
              "          [136],\n",
              "          ...,\n",
              "          [128],\n",
              "          [136],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 99],\n",
              "          [135],\n",
              "          [123],\n",
              "          ...,\n",
              "          [131],\n",
              "          [109],\n",
              "          [115]],\n",
              "  \n",
              "         [[114],\n",
              "          [ 97],\n",
              "          [116],\n",
              "          ...,\n",
              "          [121],\n",
              "          [109],\n",
              "          [115]],\n",
              "  \n",
              "         [[130],\n",
              "          [118],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [110],\n",
              "          [109],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 74],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [117],\n",
              "          [ 99],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 75],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [114],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 76],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [104],\n",
              "          [103]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [154],\n",
              "          [153],\n",
              "          [154]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 81],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [151],\n",
              "          [150],\n",
              "          [148]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 57],\n",
              "          [111],\n",
              "          ...,\n",
              "          [149],\n",
              "          [148],\n",
              "          [142]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 65],\n",
              "          [ 69],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [103],\n",
              "          [100],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 70],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [104],\n",
              "          [102],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 71],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [107],\n",
              "          [103],\n",
              "          [ 99]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 70],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  3],\n",
              "          [  4]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 38],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  4],\n",
              "          [  3]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 16],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [  4],\n",
              "          [  4],\n",
              "          [  5]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[227],\n",
              "          [222],\n",
              "          [221],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 70],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[235],\n",
              "          [228],\n",
              "          [227],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 82],\n",
              "          [ 79]],\n",
              "  \n",
              "         [[236],\n",
              "          [229],\n",
              "          [230],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 79],\n",
              "          [ 81]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[203],\n",
              "          [219],\n",
              "          [211],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[199],\n",
              "          [217],\n",
              "          [208],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[197],\n",
              "          [212],\n",
              "          [203],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          [ 16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[17],\n",
              "          [22],\n",
              "          [26],\n",
              "          ...,\n",
              "          [27],\n",
              "          [27],\n",
              "          [33]],\n",
              "  \n",
              "         [[28],\n",
              "          [25],\n",
              "          [25],\n",
              "          ...,\n",
              "          [32],\n",
              "          [32],\n",
              "          [25]],\n",
              "  \n",
              "         [[21],\n",
              "          [22],\n",
              "          [25],\n",
              "          ...,\n",
              "          [44],\n",
              "          [43],\n",
              "          [44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[50],\n",
              "          [54],\n",
              "          [49],\n",
              "          ...,\n",
              "          [55],\n",
              "          [67],\n",
              "          [65]],\n",
              "  \n",
              "         [[52],\n",
              "          [49],\n",
              "          [48],\n",
              "          ...,\n",
              "          [62],\n",
              "          [58],\n",
              "          [57]],\n",
              "  \n",
              "         [[53],\n",
              "          [52],\n",
              "          [51],\n",
              "          ...,\n",
              "          [53],\n",
              "          [62],\n",
              "          [64]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 93],\n",
              "          [ 99],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 43],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 83],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 43],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 92],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 18],\n",
              "          [ 28],\n",
              "          [ 46]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[161],\n",
              "          [163],\n",
              "          [171],\n",
              "          ...,\n",
              "          [173],\n",
              "          [176],\n",
              "          [174]],\n",
              "  \n",
              "         [[164],\n",
              "          [161],\n",
              "          [165],\n",
              "          ...,\n",
              "          [175],\n",
              "          [179],\n",
              "          [180]],\n",
              "  \n",
              "         [[157],\n",
              "          [152],\n",
              "          [170],\n",
              "          ...,\n",
              "          [177],\n",
              "          [180],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[130],\n",
              "          [132],\n",
              "          [135],\n",
              "          ...,\n",
              "          [172],\n",
              "          [156],\n",
              "          [147]],\n",
              "  \n",
              "         [[139],\n",
              "          [134],\n",
              "          [129],\n",
              "          ...,\n",
              "          [172],\n",
              "          [150],\n",
              "          [159]],\n",
              "  \n",
              "         [[130],\n",
              "          [133],\n",
              "          [135],\n",
              "          ...,\n",
              "          [173],\n",
              "          [157],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[107],\n",
              "          [107],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [152],\n",
              "          [148],\n",
              "          [156]],\n",
              "  \n",
              "         [[126],\n",
              "          [117],\n",
              "          [120],\n",
              "          ...,\n",
              "          [143],\n",
              "          [162],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [102],\n",
              "          [114],\n",
              "          ...,\n",
              "          [164],\n",
              "          [158],\n",
              "          [157]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 37],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 66],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 77],\n",
              "          [ 88],\n",
              "          [105]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[124],\n",
              "          [138],\n",
              "          [140],\n",
              "          ...,\n",
              "          [200],\n",
              "          [179],\n",
              "          [167]],\n",
              "  \n",
              "         [[132],\n",
              "          [156],\n",
              "          [110],\n",
              "          ...,\n",
              "          [192],\n",
              "          [177],\n",
              "          [169]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [114],\n",
              "          [124],\n",
              "          ...,\n",
              "          [196],\n",
              "          [194],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[115],\n",
              "          [116],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[118],\n",
              "          [117],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 14],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[117],\n",
              "          [117],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 15],\n",
              "          [ 15]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 58],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [104],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 60],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [111],\n",
              "          [101],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 60],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [122],\n",
              "          [125],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[209],\n",
              "          [222],\n",
              "          [224],\n",
              "          ...,\n",
              "          [174],\n",
              "          [211],\n",
              "          [200]],\n",
              "  \n",
              "         [[244],\n",
              "          [253],\n",
              "          [232],\n",
              "          ...,\n",
              "          [185],\n",
              "          [218],\n",
              "          [207]],\n",
              "  \n",
              "         [[243],\n",
              "          [242],\n",
              "          [216],\n",
              "          ...,\n",
              "          [222],\n",
              "          [218],\n",
              "          [219]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 91],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [113],\n",
              "          [108]],\n",
              "  \n",
              "         [[112],\n",
              "          [108],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [107],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [115],\n",
              "          [128],\n",
              "          ...,\n",
              "          [110],\n",
              "          [114],\n",
              "          [109]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 12],\n",
              "          [ 14],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [120],\n",
              "          [123],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[  8],\n",
              "          [ 12],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [118],\n",
              "          [115],\n",
              "          [144]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [  8],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [128],\n",
              "          [ 73]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 65],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 41],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 63],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 42],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 67],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 42],\n",
              "          [ 49]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[176],\n",
              "          [181],\n",
              "          [177],\n",
              "          ...,\n",
              "          [161],\n",
              "          [ 66],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[173],\n",
              "          [180],\n",
              "          [183],\n",
              "          ...,\n",
              "          [163],\n",
              "          [ 88],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[176],\n",
              "          [180],\n",
              "          [182],\n",
              "          ...,\n",
              "          [161],\n",
              "          [ 97],\n",
              "          [ 94]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[218],\n",
              "          [226],\n",
              "          [224],\n",
              "          ...,\n",
              "          [229],\n",
              "          [233],\n",
              "          [227]],\n",
              "  \n",
              "         [[224],\n",
              "          [224],\n",
              "          [231],\n",
              "          ...,\n",
              "          [231],\n",
              "          [230],\n",
              "          [230]],\n",
              "  \n",
              "         [[228],\n",
              "          [225],\n",
              "          [231],\n",
              "          ...,\n",
              "          [230],\n",
              "          [228],\n",
              "          [227]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 70],\n",
              "          [ 67],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 40],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [112],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 37],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[108],\n",
              "          [ 61],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 36],\n",
              "          [ 38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 63],\n",
              "          [ 56],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 29],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 54],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 31],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 64],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[190],\n",
              "          [191],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 56],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[185],\n",
              "          [187],\n",
              "          [185],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 60],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[190],\n",
              "          [192],\n",
              "          [191],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 60],\n",
              "          [ 67]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 88],\n",
              "          [113],\n",
              "          ...,\n",
              "          [130],\n",
              "          [129],\n",
              "          [137]],\n",
              "  \n",
              "         [[101],\n",
              "          [121],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [159],\n",
              "          [125],\n",
              "          [112]],\n",
              "  \n",
              "         [[110],\n",
              "          [ 98],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [138],\n",
              "          [130],\n",
              "          [ 98]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 37],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[239],\n",
              "          [241],\n",
              "          [240],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 44],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[209],\n",
              "          [209],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 52],\n",
              "          [ 58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  5],\n",
              "          [  2],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [195],\n",
              "          [187],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [  4],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [183],\n",
              "          [189],\n",
              "          [119]],\n",
              "  \n",
              "         [[  2],\n",
              "          [ 30],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [189],\n",
              "          [183],\n",
              "          [118]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[207],\n",
              "          [207],\n",
              "          [209],\n",
              "          ...,\n",
              "          [215],\n",
              "          [211],\n",
              "          [214]],\n",
              "  \n",
              "         [[208],\n",
              "          [211],\n",
              "          [209],\n",
              "          ...,\n",
              "          [214],\n",
              "          [211],\n",
              "          [213]],\n",
              "  \n",
              "         [[210],\n",
              "          [209],\n",
              "          [211],\n",
              "          ...,\n",
              "          [214],\n",
              "          [211],\n",
              "          [214]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 10],\n",
              "          [  7],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          [ 12]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [ 10],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [ 10],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  8],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [  9],\n",
              "          [ 10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[167],\n",
              "          [160],\n",
              "          [168],\n",
              "          ...,\n",
              "          [209],\n",
              "          [214],\n",
              "          [217]],\n",
              "  \n",
              "         [[160],\n",
              "          [165],\n",
              "          [165],\n",
              "          ...,\n",
              "          [204],\n",
              "          [204],\n",
              "          [184]],\n",
              "  \n",
              "         [[159],\n",
              "          [168],\n",
              "          [163],\n",
              "          ...,\n",
              "          [206],\n",
              "          [208],\n",
              "          [215]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 62],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [126],\n",
              "          [135],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 63],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [126],\n",
              "          [129],\n",
              "          [127]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 66],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [129],\n",
              "          [132],\n",
              "          [129]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 52],\n",
              "          [ 51],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 53],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 56],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 51],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 47],\n",
              "          [ 40]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[100],\n",
              "          [ 46],\n",
              "          [140],\n",
              "          ...,\n",
              "          [147],\n",
              "          [129],\n",
              "          [129]],\n",
              "  \n",
              "         [[107],\n",
              "          [108],\n",
              "          [126],\n",
              "          ...,\n",
              "          [145],\n",
              "          [144],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 92],\n",
              "          [156],\n",
              "          ...,\n",
              "          [156],\n",
              "          [134],\n",
              "          [135]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 72],\n",
              "          [ 76],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [214],\n",
              "          [220],\n",
              "          [212]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 58],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [209],\n",
              "          [217],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 69],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [218],\n",
              "          [198],\n",
              "          [218]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[129],\n",
              "          [103],\n",
              "          [138],\n",
              "          ...,\n",
              "          [241],\n",
              "          [230],\n",
              "          [241]],\n",
              "  \n",
              "         [[117],\n",
              "          [104],\n",
              "          [133],\n",
              "          ...,\n",
              "          [239],\n",
              "          [239],\n",
              "          [237]],\n",
              "  \n",
              "         [[120],\n",
              "          [123],\n",
              "          [131],\n",
              "          ...,\n",
              "          [230],\n",
              "          [236],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[199],\n",
              "          [200],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[206],\n",
              "          [206],\n",
              "          [205],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 15],\n",
              "          [ 13]],\n",
              "  \n",
              "         [[207],\n",
              "          [209],\n",
              "          [208],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 15],\n",
              "          [ 13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 53],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [  7],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [  9],\n",
              "          [  9]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 54],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [  9],\n",
              "          [  7]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[215],\n",
              "          [215],\n",
              "          [215],\n",
              "          ...,\n",
              "          [205],\n",
              "          [179],\n",
              "          [153]],\n",
              "  \n",
              "         [[216],\n",
              "          [217],\n",
              "          [217],\n",
              "          ...,\n",
              "          [210],\n",
              "          [196],\n",
              "          [162]],\n",
              "  \n",
              "         [[219],\n",
              "          [219],\n",
              "          [219],\n",
              "          ...,\n",
              "          [213],\n",
              "          [208],\n",
              "          [191]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[237],\n",
              "          [238],\n",
              "          [238],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [254]],\n",
              "  \n",
              "         [[239],\n",
              "          [236],\n",
              "          [236],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [252]],\n",
              "  \n",
              "         [[240],\n",
              "          [238],\n",
              "          [236],\n",
              "          ...,\n",
              "          [253],\n",
              "          [253],\n",
              "          [253]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[75],\n",
              "          [69],\n",
              "          [68],\n",
              "          ...,\n",
              "          [31],\n",
              "          [26],\n",
              "          [58]],\n",
              "  \n",
              "         [[78],\n",
              "          [75],\n",
              "          [65],\n",
              "          ...,\n",
              "          [15],\n",
              "          [19],\n",
              "          [81]],\n",
              "  \n",
              "         [[81],\n",
              "          [73],\n",
              "          [71],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [27],\n",
              "          [75]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[37],\n",
              "          [21],\n",
              "          [35],\n",
              "          ...,\n",
              "          [66],\n",
              "          [63],\n",
              "          [56]],\n",
              "  \n",
              "         [[29],\n",
              "          [18],\n",
              "          [20],\n",
              "          ...,\n",
              "          [70],\n",
              "          [60],\n",
              "          [48]],\n",
              "  \n",
              "         [[40],\n",
              "          [23],\n",
              "          [16],\n",
              "          ...,\n",
              "          [69],\n",
              "          [47],\n",
              "          [37]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[170],\n",
              "          [166],\n",
              "          [188],\n",
              "          ...,\n",
              "          [  2],\n",
              "          [  1],\n",
              "          [  2]],\n",
              "  \n",
              "         [[170],\n",
              "          [172],\n",
              "          [189],\n",
              "          ...,\n",
              "          [  3],\n",
              "          [  3],\n",
              "          [  3]],\n",
              "  \n",
              "         [[172],\n",
              "          [177],\n",
              "          [192],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 56],\n",
              "          [190],\n",
              "          [183],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [  8],\n",
              "          [  9]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [188],\n",
              "          [182],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [  2],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [183],\n",
              "          [176],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  5],\n",
              "          [ 23]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[143],\n",
              "          [141],\n",
              "          [141],\n",
              "          ...,\n",
              "          [151],\n",
              "          [143],\n",
              "          [146]],\n",
              "  \n",
              "         [[142],\n",
              "          [141],\n",
              "          [141],\n",
              "          ...,\n",
              "          [154],\n",
              "          [148],\n",
              "          [148]],\n",
              "  \n",
              "         [[141],\n",
              "          [142],\n",
              "          [141],\n",
              "          ...,\n",
              "          [157],\n",
              "          [149],\n",
              "          [147]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 21],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [249],\n",
              "          [248],\n",
              "          [247]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 20],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [247],\n",
              "          [247],\n",
              "          [246]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 22],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [246],\n",
              "          [247],\n",
              "          [245]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[202],\n",
              "          [202],\n",
              "          [202],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 54],\n",
              "          [112]],\n",
              "  \n",
              "         [[202],\n",
              "          [202],\n",
              "          [202],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 69],\n",
              "          [ 72]],\n",
              "  \n",
              "         [[201],\n",
              "          [201],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 29],\n",
              "          [ 39]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[136],\n",
              "          [145],\n",
              "          [148],\n",
              "          ...,\n",
              "          [173],\n",
              "          [172],\n",
              "          [173]],\n",
              "  \n",
              "         [[143],\n",
              "          [148],\n",
              "          [153],\n",
              "          ...,\n",
              "          [175],\n",
              "          [181],\n",
              "          [180]],\n",
              "  \n",
              "         [[150],\n",
              "          [144],\n",
              "          [149],\n",
              "          ...,\n",
              "          [174],\n",
              "          [183],\n",
              "          [177]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[180],\n",
              "          [128],\n",
              "          [172],\n",
              "          ...,\n",
              "          [108],\n",
              "          [110],\n",
              "          [108]],\n",
              "  \n",
              "         [[179],\n",
              "          [152],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [109],\n",
              "          [103],\n",
              "          [108]],\n",
              "  \n",
              "         [[152],\n",
              "          [158],\n",
              "          [134],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [104]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[133],\n",
              "          [112],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 58],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[117],\n",
              "          [109],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 99],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[125],\n",
              "          [117],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 92],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[106],\n",
              "          [124],\n",
              "          [120],\n",
              "          ...,\n",
              "          [123],\n",
              "          [133],\n",
              "          [131]],\n",
              "  \n",
              "         [[102],\n",
              "          [127],\n",
              "          [107],\n",
              "          ...,\n",
              "          [127],\n",
              "          [127],\n",
              "          [130]],\n",
              "  \n",
              "         [[112],\n",
              "          [129],\n",
              "          [118],\n",
              "          ...,\n",
              "          [133],\n",
              "          [125],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[165],\n",
              "          [164],\n",
              "          [170],\n",
              "          ...,\n",
              "          [159],\n",
              "          [158],\n",
              "          [147]],\n",
              "  \n",
              "         [[161],\n",
              "          [163],\n",
              "          [166],\n",
              "          ...,\n",
              "          [156],\n",
              "          [157],\n",
              "          [158]],\n",
              "  \n",
              "         [[162],\n",
              "          [161],\n",
              "          [161],\n",
              "          ...,\n",
              "          [155],\n",
              "          [159],\n",
              "          [156]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[173],\n",
              "          [180],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [102],\n",
              "          [108],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[174],\n",
              "          [186],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [111],\n",
              "          [119],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[177],\n",
              "          [185],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [105],\n",
              "          [106]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[153],\n",
              "          [196],\n",
              "          [150],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 36],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[158],\n",
              "          [168],\n",
              "          [140],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 32],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[183],\n",
              "          [184],\n",
              "          [185],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 33],\n",
              "          [ 33]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 90],\n",
              "          [ 66],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [101],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 35],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [114],\n",
              "          [ 99],\n",
              "          [140]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 79],\n",
              "          [103],\n",
              "          ...,\n",
              "          [105],\n",
              "          [ 94],\n",
              "          [102]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 98],\n",
              "          [131],\n",
              "          [106],\n",
              "          ...,\n",
              "          [112],\n",
              "          [101],\n",
              "          [111]],\n",
              "  \n",
              "         [[150],\n",
              "          [125],\n",
              "          [102],\n",
              "          ...,\n",
              "          [103],\n",
              "          [154],\n",
              "          [108]],\n",
              "  \n",
              "         [[157],\n",
              "          [146],\n",
              "          [131],\n",
              "          ...,\n",
              "          [139],\n",
              "          [128],\n",
              "          [157]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[56],\n",
              "          [33],\n",
              "          [25],\n",
              "          ...,\n",
              "          [75],\n",
              "          [61],\n",
              "          [41]],\n",
              "  \n",
              "         [[45],\n",
              "          [37],\n",
              "          [64],\n",
              "          ...,\n",
              "          [68],\n",
              "          [63],\n",
              "          [33]],\n",
              "  \n",
              "         [[39],\n",
              "          [46],\n",
              "          [40],\n",
              "          ...,\n",
              "          [53],\n",
              "          [44],\n",
              "          [32]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[55],\n",
              "          [75],\n",
              "          [60],\n",
              "          ...,\n",
              "          [92],\n",
              "          [86],\n",
              "          [68]],\n",
              "  \n",
              "         [[60],\n",
              "          [57],\n",
              "          [45],\n",
              "          ...,\n",
              "          [92],\n",
              "          [71],\n",
              "          [71]],\n",
              "  \n",
              "         [[66],\n",
              "          [46],\n",
              "          [40],\n",
              "          ...,\n",
              "          [93],\n",
              "          [74],\n",
              "          [65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[108],\n",
              "          [108],\n",
              "          [109],\n",
              "          ...,\n",
              "          [181],\n",
              "          [187],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [105],\n",
              "          [111],\n",
              "          ...,\n",
              "          [134],\n",
              "          [139],\n",
              "          [154]],\n",
              "  \n",
              "         [[100],\n",
              "          [125],\n",
              "          [119],\n",
              "          ...,\n",
              "          [111],\n",
              "          [138],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 76],\n",
              "          [102],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [114],\n",
              "          [115],\n",
              "          [121]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 96],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [108],\n",
              "          [113],\n",
              "          [117]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 69],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 98],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[170],\n",
              "          [171],\n",
              "          [174],\n",
              "          ...,\n",
              "          [177],\n",
              "          [171],\n",
              "          [170]],\n",
              "  \n",
              "         [[170],\n",
              "          [172],\n",
              "          [174],\n",
              "          ...,\n",
              "          [181],\n",
              "          [175],\n",
              "          [173]],\n",
              "  \n",
              "         [[172],\n",
              "          [174],\n",
              "          [174],\n",
              "          ...,\n",
              "          [184],\n",
              "          [179],\n",
              "          [178]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[157],\n",
              "          [156],\n",
              "          [156],\n",
              "          ...,\n",
              "          [150],\n",
              "          [147],\n",
              "          [146]],\n",
              "  \n",
              "         [[148],\n",
              "          [144],\n",
              "          [158],\n",
              "          ...,\n",
              "          [152],\n",
              "          [155],\n",
              "          [158]],\n",
              "  \n",
              "         [[155],\n",
              "          [156],\n",
              "          [159],\n",
              "          ...,\n",
              "          [152],\n",
              "          [150],\n",
              "          [146]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[107],\n",
              "          [105],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 24],\n",
              "          [ 47],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 83],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 78],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[120],\n",
              "          [127],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 74],\n",
              "          [ 91]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 96],\n",
              "          [120],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [111],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[126],\n",
              "          [ 88],\n",
              "          [103],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [101],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 87],\n",
              "          [101],\n",
              "          ...,\n",
              "          [150],\n",
              "          [ 57],\n",
              "          [124]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[216],\n",
              "          [222],\n",
              "          [223],\n",
              "          ...,\n",
              "          [212],\n",
              "          [210],\n",
              "          [210]],\n",
              "  \n",
              "         [[221],\n",
              "          [224],\n",
              "          [224],\n",
              "          ...,\n",
              "          [212],\n",
              "          [210],\n",
              "          [210]],\n",
              "  \n",
              "         [[224],\n",
              "          [224],\n",
              "          [223],\n",
              "          ...,\n",
              "          [211],\n",
              "          [210],\n",
              "          [210]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[188],\n",
              "          [179],\n",
              "          [167],\n",
              "          ...,\n",
              "          [254],\n",
              "          [252],\n",
              "          [254]],\n",
              "  \n",
              "         [[188],\n",
              "          [183],\n",
              "          [180],\n",
              "          ...,\n",
              "          [252],\n",
              "          [251],\n",
              "          [254]],\n",
              "  \n",
              "         [[152],\n",
              "          [171],\n",
              "          [169],\n",
              "          ...,\n",
              "          [255],\n",
              "          [254],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[250],\n",
              "          [239],\n",
              "          [241],\n",
              "          ...,\n",
              "          [251],\n",
              "          [252],\n",
              "          [246]],\n",
              "  \n",
              "         [[243],\n",
              "          [ 84],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 36],\n",
              "          [245]],\n",
              "  \n",
              "         [[243],\n",
              "          [ 83],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 35],\n",
              "          [245]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[245],\n",
              "          [ 90],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [100],\n",
              "          [104],\n",
              "          [237]],\n",
              "  \n",
              "         [[245],\n",
              "          [ 82],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [103],\n",
              "          [239]],\n",
              "  \n",
              "         [[253],\n",
              "          [245],\n",
              "          [246],\n",
              "          ...,\n",
              "          [247],\n",
              "          [244],\n",
              "          [254]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[106],\n",
              "          [105],\n",
              "          [105],\n",
              "          ...,\n",
              "          [104],\n",
              "          [108],\n",
              "          [108]],\n",
              "  \n",
              "         [[108],\n",
              "          [109],\n",
              "          [106],\n",
              "          ...,\n",
              "          [110],\n",
              "          [111],\n",
              "          [111]],\n",
              "  \n",
              "         [[105],\n",
              "          [107],\n",
              "          [106],\n",
              "          ...,\n",
              "          [110],\n",
              "          [110],\n",
              "          [113]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 22],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [117],\n",
              "          [132],\n",
              "          [127]],\n",
              "  \n",
              "         [[ 17],\n",
              "          [ 29],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [125],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 23],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [157],\n",
              "          [152],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[45],\n",
              "          [47],\n",
              "          [50],\n",
              "          ...,\n",
              "          [33],\n",
              "          [20],\n",
              "          [29]],\n",
              "  \n",
              "         [[47],\n",
              "          [49],\n",
              "          [51],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 7],\n",
              "          [ 6]],\n",
              "  \n",
              "         [[49],\n",
              "          [51],\n",
              "          [53],\n",
              "          ...,\n",
              "          [16],\n",
              "          [36],\n",
              "          [33]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[44],\n",
              "          [43],\n",
              "          [45],\n",
              "          ...,\n",
              "          [36],\n",
              "          [33],\n",
              "          [29]],\n",
              "  \n",
              "         [[45],\n",
              "          [42],\n",
              "          [42],\n",
              "          ...,\n",
              "          [34],\n",
              "          [32],\n",
              "          [28]],\n",
              "  \n",
              "         [[39],\n",
              "          [38],\n",
              "          [38],\n",
              "          ...,\n",
              "          [33],\n",
              "          [31],\n",
              "          [26]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[201],\n",
              "          [202],\n",
              "          [205],\n",
              "          ...,\n",
              "          [190],\n",
              "          [188],\n",
              "          [168]],\n",
              "  \n",
              "         [[203],\n",
              "          [208],\n",
              "          [207],\n",
              "          ...,\n",
              "          [217],\n",
              "          [199],\n",
              "          [197]],\n",
              "  \n",
              "         [[207],\n",
              "          [207],\n",
              "          [210],\n",
              "          ...,\n",
              "          [215],\n",
              "          [227],\n",
              "          [185]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[118],\n",
              "          [135],\n",
              "          [151],\n",
              "          ...,\n",
              "          [139],\n",
              "          [117],\n",
              "          [123]],\n",
              "  \n",
              "         [[137],\n",
              "          [138],\n",
              "          [146],\n",
              "          ...,\n",
              "          [108],\n",
              "          [125],\n",
              "          [136]],\n",
              "  \n",
              "         [[129],\n",
              "          [130],\n",
              "          [171],\n",
              "          ...,\n",
              "          [139],\n",
              "          [126],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 70],\n",
              "          [ 79],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 47],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 48],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 45],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 44],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 49],\n",
              "          [ 42]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[124],\n",
              "          [137],\n",
              "          [122],\n",
              "          ...,\n",
              "          [161],\n",
              "          [142],\n",
              "          [151]],\n",
              "  \n",
              "         [[141],\n",
              "          [135],\n",
              "          [124],\n",
              "          ...,\n",
              "          [137],\n",
              "          [168],\n",
              "          [158]],\n",
              "  \n",
              "         [[143],\n",
              "          [138],\n",
              "          [128],\n",
              "          ...,\n",
              "          [139],\n",
              "          [153],\n",
              "          [162]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 50],\n",
              "          [ 36],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 60],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 36],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 72],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 39],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 57],\n",
              "          [ 84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[163],\n",
              "          [151],\n",
              "          [177],\n",
              "          ...,\n",
              "          [155],\n",
              "          [160],\n",
              "          [180]],\n",
              "  \n",
              "         [[176],\n",
              "          [163],\n",
              "          [168],\n",
              "          ...,\n",
              "          [162],\n",
              "          [174],\n",
              "          [182]],\n",
              "  \n",
              "         [[141],\n",
              "          [167],\n",
              "          [190],\n",
              "          ...,\n",
              "          [167],\n",
              "          [203],\n",
              "          [188]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 18],\n",
              "          [ 18],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [117],\n",
              "          [113],\n",
              "          [107]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 17],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [121],\n",
              "          [121],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [123],\n",
              "          [119],\n",
              "          [120]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 42],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 60],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 27],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 61],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [ 25],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 63],\n",
              "          [ 58]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 83],\n",
              "          [ 87],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 38],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 51],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 49],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 25],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 46],\n",
              "          [  9]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[102],\n",
              "          [ 46],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 39],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 72],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 37],\n",
              "          [ 24]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 69],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 57],\n",
              "          [ 23]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 64],\n",
              "          [  8],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 36],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 10],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 38],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 23],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 36],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[185],\n",
              "          [185],\n",
              "          [185],\n",
              "          ...,\n",
              "          [180],\n",
              "          [178],\n",
              "          [185]],\n",
              "  \n",
              "         [[183],\n",
              "          [182],\n",
              "          [184],\n",
              "          ...,\n",
              "          [178],\n",
              "          [180],\n",
              "          [183]],\n",
              "  \n",
              "         [[189],\n",
              "          [182],\n",
              "          [186],\n",
              "          ...,\n",
              "          [188],\n",
              "          [184],\n",
              "          [186]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[119],\n",
              "          [118],\n",
              "          [117],\n",
              "          ...,\n",
              "          [181],\n",
              "          [194],\n",
              "          [ 96]],\n",
              "  \n",
              "         [[120],\n",
              "          [127],\n",
              "          [107],\n",
              "          ...,\n",
              "          [190],\n",
              "          [180],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[115],\n",
              "          [108],\n",
              "          [113],\n",
              "          ...,\n",
              "          [183],\n",
              "          [185],\n",
              "          [ 58]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[203],\n",
              "          [207],\n",
              "          [207],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [119],\n",
              "          [171]],\n",
              "  \n",
              "         [[201],\n",
              "          [205],\n",
              "          [205],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [174],\n",
              "          [176]],\n",
              "  \n",
              "         [[199],\n",
              "          [202],\n",
              "          [202],\n",
              "          ...,\n",
              "          [100],\n",
              "          [167],\n",
              "          [178]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[122],\n",
              "          [122],\n",
              "          [124],\n",
              "          ...,\n",
              "          [112],\n",
              "          [111],\n",
              "          [110]],\n",
              "  \n",
              "         [[124],\n",
              "          [124],\n",
              "          [125],\n",
              "          ...,\n",
              "          [110],\n",
              "          [111],\n",
              "          [110]],\n",
              "  \n",
              "         [[124],\n",
              "          [124],\n",
              "          [125],\n",
              "          ...,\n",
              "          [110],\n",
              "          [111],\n",
              "          [109]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 86],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 74],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 84],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 71],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 82],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 72],\n",
              "          [ 65]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[145],\n",
              "          [141],\n",
              "          [149],\n",
              "          ...,\n",
              "          [137],\n",
              "          [134],\n",
              "          [132]],\n",
              "  \n",
              "         [[145],\n",
              "          [143],\n",
              "          [143],\n",
              "          ...,\n",
              "          [136],\n",
              "          [137],\n",
              "          [135]],\n",
              "  \n",
              "         [[148],\n",
              "          [142],\n",
              "          [141],\n",
              "          ...,\n",
              "          [136],\n",
              "          [138],\n",
              "          [137]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 90],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [  9],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[100],\n",
              "          [106],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 26],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[109],\n",
              "          [112],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 55],\n",
              "          [ 41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 64],\n",
              "          [114],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 49],\n",
              "          [ 43]],\n",
              "  \n",
              "         [[130],\n",
              "          [110],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 49],\n",
              "          [ 47],\n",
              "          [ 47]],\n",
              "  \n",
              "         [[141],\n",
              "          [192],\n",
              "          [138],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 49],\n",
              "          [ 45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [106],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 75],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[104],\n",
              "          [110],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 78],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[106],\n",
              "          [110],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 86],\n",
              "          [ 73]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[211],\n",
              "          [211],\n",
              "          [211],\n",
              "          ...,\n",
              "          [196],\n",
              "          [223],\n",
              "          [223]],\n",
              "  \n",
              "         [[209],\n",
              "          [209],\n",
              "          [209],\n",
              "          ...,\n",
              "          [213],\n",
              "          [232],\n",
              "          [221]],\n",
              "  \n",
              "         [[208],\n",
              "          [207],\n",
              "          [204],\n",
              "          ...,\n",
              "          [220],\n",
              "          [234],\n",
              "          [218]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[191],\n",
              "          [195],\n",
              "          [206],\n",
              "          ...,\n",
              "          [180],\n",
              "          [168],\n",
              "          [178]],\n",
              "  \n",
              "         [[196],\n",
              "          [204],\n",
              "          [213],\n",
              "          ...,\n",
              "          [201],\n",
              "          [190],\n",
              "          [167]],\n",
              "  \n",
              "         [[197],\n",
              "          [206],\n",
              "          [213],\n",
              "          ...,\n",
              "          [203],\n",
              "          [194],\n",
              "          [157]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[170],\n",
              "          [168],\n",
              "          [169],\n",
              "          ...,\n",
              "          [177],\n",
              "          [ 93],\n",
              "          [183]],\n",
              "  \n",
              "         [[170],\n",
              "          [169],\n",
              "          [164],\n",
              "          ...,\n",
              "          [165],\n",
              "          [ 87],\n",
              "          [174]],\n",
              "  \n",
              "         [[157],\n",
              "          [162],\n",
              "          [121],\n",
              "          ...,\n",
              "          [178],\n",
              "          [ 91],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 93],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 22],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 93],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 19],\n",
              "          [ 18]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 94],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 17],\n",
              "          [ 19],\n",
              "          [ 14]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[  6],\n",
              "          [  5],\n",
              "          [  4],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 10],\n",
              "          [  9]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  3],\n",
              "          [  3],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [  8],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[  3],\n",
              "          [  2],\n",
              "          [  2],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [ 10],\n",
              "          [ 11]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [225],\n",
              "          [221],\n",
              "          [216]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 71],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [227],\n",
              "          [214],\n",
              "          [216]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [224],\n",
              "          [217],\n",
              "          [219]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[101],\n",
              "          [109],\n",
              "          [105],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 17],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [106],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 11],\n",
              "          [ 18],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [103],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 14],\n",
              "          [ 27],\n",
              "          [ 38]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  7],\n",
              "          [ 11],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 38],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[  8],\n",
              "          [  7],\n",
              "          [ 38],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 46],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[  5],\n",
              "          [  7],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 52],\n",
              "          [ 45]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[109],\n",
              "          [111],\n",
              "          [113],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 65],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[109],\n",
              "          [110],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 60],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[104],\n",
              "          [109],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 57],\n",
              "          [ 53]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 76],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [119],\n",
              "          [114],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 62],\n",
              "          [ 73],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [119],\n",
              "          [118],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 71],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [122],\n",
              "          [119],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[165],\n",
              "          [167],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [166],\n",
              "          [143],\n",
              "          [132]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [163],\n",
              "          [164],\n",
              "          ...,\n",
              "          [222],\n",
              "          [235],\n",
              "          [230]],\n",
              "  \n",
              "         [[174],\n",
              "          [126],\n",
              "          [164],\n",
              "          ...,\n",
              "          [217],\n",
              "          [214],\n",
              "          [175]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [174],\n",
              "          [146],\n",
              "          ...,\n",
              "          [159],\n",
              "          [ 77],\n",
              "          [123]],\n",
              "  \n",
              "         [[225],\n",
              "          [173],\n",
              "          [125],\n",
              "          ...,\n",
              "          [224],\n",
              "          [168],\n",
              "          [188]],\n",
              "  \n",
              "         [[163],\n",
              "          [ 89],\n",
              "          [138],\n",
              "          ...,\n",
              "          [207],\n",
              "          [169],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[171],\n",
              "          [159],\n",
              "          [173],\n",
              "          ...,\n",
              "          [145],\n",
              "          [170],\n",
              "          [163]],\n",
              "  \n",
              "         [[195],\n",
              "          [161],\n",
              "          [158],\n",
              "          ...,\n",
              "          [166],\n",
              "          [181],\n",
              "          [173]],\n",
              "  \n",
              "         [[169],\n",
              "          [156],\n",
              "          [166],\n",
              "          ...,\n",
              "          [127],\n",
              "          [147],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 95],\n",
              "          [ 94],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [108],\n",
              "          [117],\n",
              "          [127]],\n",
              "  \n",
              "         [[127],\n",
              "          [111],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [107],\n",
              "          [121],\n",
              "          [118]],\n",
              "  \n",
              "         [[122],\n",
              "          [103],\n",
              "          [112],\n",
              "          ...,\n",
              "          [114],\n",
              "          [109],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 40],\n",
              "          [ 36],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [134],\n",
              "          [112],\n",
              "          [136]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 38],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [134],\n",
              "          [121],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 44],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [150],\n",
              "          [147],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [182],\n",
              "          [157],\n",
              "          ...,\n",
              "          [218],\n",
              "          [213],\n",
              "          [198]],\n",
              "  \n",
              "         [[162],\n",
              "          [177],\n",
              "          [154],\n",
              "          ...,\n",
              "          [218],\n",
              "          [218],\n",
              "          [205]],\n",
              "  \n",
              "         [[156],\n",
              "          [164],\n",
              "          [154],\n",
              "          ...,\n",
              "          [215],\n",
              "          [213],\n",
              "          [210]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[135],\n",
              "          [179],\n",
              "          [129],\n",
              "          ...,\n",
              "          [185],\n",
              "          [160],\n",
              "          [161]],\n",
              "  \n",
              "         [[177],\n",
              "          [197],\n",
              "          [187],\n",
              "          ...,\n",
              "          [164],\n",
              "          [148],\n",
              "          [161]],\n",
              "  \n",
              "         [[188],\n",
              "          [135],\n",
              "          [207],\n",
              "          ...,\n",
              "          [167],\n",
              "          [164],\n",
              "          [172]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[191],\n",
              "          [190],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 34],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[188],\n",
              "          [194],\n",
              "          [195],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 46],\n",
              "          [ 40]],\n",
              "  \n",
              "         [[180],\n",
              "          [192],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 22],\n",
              "          [ 30]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[185],\n",
              "          [192],\n",
              "          [195],\n",
              "          ...,\n",
              "          [172],\n",
              "          [171],\n",
              "          [169]],\n",
              "  \n",
              "         [[191],\n",
              "          [196],\n",
              "          [199],\n",
              "          ...,\n",
              "          [173],\n",
              "          [174],\n",
              "          [173]],\n",
              "  \n",
              "         [[193],\n",
              "          [196],\n",
              "          [199],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [171]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [120],\n",
              "          [124],\n",
              "          ...,\n",
              "          [112],\n",
              "          [109],\n",
              "          [104]],\n",
              "  \n",
              "         [[113],\n",
              "          [112],\n",
              "          [120],\n",
              "          ...,\n",
              "          [112],\n",
              "          [106],\n",
              "          [100]],\n",
              "  \n",
              "         [[104],\n",
              "          [111],\n",
              "          [115],\n",
              "          ...,\n",
              "          [111],\n",
              "          [107],\n",
              "          [102]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[175],\n",
              "          [137],\n",
              "          [141],\n",
              "          ...,\n",
              "          [207],\n",
              "          [218],\n",
              "          [217]],\n",
              "  \n",
              "         [[142],\n",
              "          [165],\n",
              "          [185],\n",
              "          ...,\n",
              "          [198],\n",
              "          [186],\n",
              "          [185]],\n",
              "  \n",
              "         [[209],\n",
              "          [180],\n",
              "          [201],\n",
              "          ...,\n",
              "          [166],\n",
              "          [214],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[210],\n",
              "          [210],\n",
              "          [210],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [ 86],\n",
              "          [108]],\n",
              "  \n",
              "         [[205],\n",
              "          [205],\n",
              "          [200],\n",
              "          ...,\n",
              "          [110],\n",
              "          [142],\n",
              "          [ 63]],\n",
              "  \n",
              "         [[195],\n",
              "          [191],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 67],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[201],\n",
              "          [202],\n",
              "          [205],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 84],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[200],\n",
              "          [200],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 89],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[199],\n",
              "          [199],\n",
              "          [199],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 85],\n",
              "          [ 96]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[138],\n",
              "          [138],\n",
              "          [134],\n",
              "          ...,\n",
              "          [145],\n",
              "          [147],\n",
              "          [148]],\n",
              "  \n",
              "         [[132],\n",
              "          [129],\n",
              "          [131],\n",
              "          ...,\n",
              "          [147],\n",
              "          [151],\n",
              "          [151]],\n",
              "  \n",
              "         [[135],\n",
              "          [139],\n",
              "          [132],\n",
              "          ...,\n",
              "          [152],\n",
              "          [150],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 30],\n",
              "          [ 27],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 28],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 24],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 27],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [ 27],\n",
              "          [ 26],\n",
              "          [ 27]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 73],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [171],\n",
              "          [168],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 84],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [171],\n",
              "          [164],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 86],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [180],\n",
              "          [174],\n",
              "          [173]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 61],\n",
              "          [ 65],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [140],\n",
              "          [135],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 62],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [111],\n",
              "          [125],\n",
              "          [127]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 69],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [114],\n",
              "          [130],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 87],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [118],\n",
              "          [116],\n",
              "          [111]],\n",
              "  \n",
              "         [[101],\n",
              "          [ 90],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [111],\n",
              "          [109],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 92],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [109],\n",
              "          [111],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 1],\n",
              "          [ 1],\n",
              "          [ 2],\n",
              "          ...,\n",
              "          [ 4],\n",
              "          [ 2],\n",
              "          [ 3]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 1],\n",
              "          [ 2],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 4]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 1],\n",
              "          [ 0],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 2],\n",
              "          [ 3]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 8],\n",
              "          [ 8],\n",
              "          ...,\n",
              "          [16],\n",
              "          [18],\n",
              "          [11]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 7],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [12],\n",
              "          [12],\n",
              "          [12]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 7],\n",
              "          [ 9],\n",
              "          [10]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 32],\n",
              "          [ 49],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 17],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [ 46],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 18],\n",
              "          [ 11]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 24],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 14],\n",
              "          [ 10]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[117],\n",
              "          [112],\n",
              "          [116],\n",
              "          ...,\n",
              "          [110],\n",
              "          [106],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[117],\n",
              "          [113],\n",
              "          [122],\n",
              "          ...,\n",
              "          [112],\n",
              "          [106],\n",
              "          [103]],\n",
              "  \n",
              "         [[119],\n",
              "          [109],\n",
              "          [120],\n",
              "          ...,\n",
              "          [117],\n",
              "          [113],\n",
              "          [115]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 39],\n",
              "          [ 42],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 65],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 30],\n",
              "          [ 31],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [132],\n",
              "          [128],\n",
              "          [102]],\n",
              "  \n",
              "         [[ 29],\n",
              "          [ 30],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 66],\n",
              "          [ 74]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[100],\n",
              "          [112],\n",
              "          [111],\n",
              "          ...,\n",
              "          [126],\n",
              "          [119],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 89],\n",
              "          [ 99],\n",
              "          [106],\n",
              "          ...,\n",
              "          [152],\n",
              "          [118],\n",
              "          [111]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 94],\n",
              "          [116],\n",
              "          ...,\n",
              "          [135],\n",
              "          [115],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 11],\n",
              "          [ 14],\n",
              "          [  7],\n",
              "          ...,\n",
              "          [104],\n",
              "          [124],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 11],\n",
              "          [ 12],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 94],\n",
              "          [114]],\n",
              "  \n",
              "         [[  4],\n",
              "          [  1],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 89],\n",
              "          [ 97]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [105],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 42],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[101],\n",
              "          [121],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 39],\n",
              "          [154]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [104],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 42],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[220],\n",
              "          [217],\n",
              "          [215],\n",
              "          ...,\n",
              "          [208],\n",
              "          [209],\n",
              "          [208]],\n",
              "  \n",
              "         [[217],\n",
              "          [218],\n",
              "          [216],\n",
              "          ...,\n",
              "          [208],\n",
              "          [207],\n",
              "          [206]],\n",
              "  \n",
              "         [[218],\n",
              "          [216],\n",
              "          [214],\n",
              "          ...,\n",
              "          [210],\n",
              "          [212],\n",
              "          [209]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[181],\n",
              "          [184],\n",
              "          [173],\n",
              "          ...,\n",
              "          [250],\n",
              "          [246],\n",
              "          [242]],\n",
              "  \n",
              "         [[185],\n",
              "          [180],\n",
              "          [172],\n",
              "          ...,\n",
              "          [249],\n",
              "          [248],\n",
              "          [238]],\n",
              "  \n",
              "         [[184],\n",
              "          [175],\n",
              "          [169],\n",
              "          ...,\n",
              "          [248],\n",
              "          [247],\n",
              "          [237]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 20],\n",
              "          [ 37],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [196],\n",
              "          [171],\n",
              "          [201]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 59],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [219],\n",
              "          [106],\n",
              "          [205]],\n",
              "  \n",
              "         [[ 23],\n",
              "          [181],\n",
              "          [191],\n",
              "          ...,\n",
              "          [100],\n",
              "          [ 96],\n",
              "          [211]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[142],\n",
              "          [160],\n",
              "          [153],\n",
              "          ...,\n",
              "          [129],\n",
              "          [140],\n",
              "          [139]],\n",
              "  \n",
              "         [[172],\n",
              "          [158],\n",
              "          [145],\n",
              "          ...,\n",
              "          [162],\n",
              "          [146],\n",
              "          [162]],\n",
              "  \n",
              "         [[162],\n",
              "          [189],\n",
              "          [187],\n",
              "          ...,\n",
              "          [175],\n",
              "          [191],\n",
              "          [145]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 85],\n",
              "          [ 66],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 78],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 85],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 53],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[106],\n",
              "          [ 97],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 55],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 90],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 97],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 33],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 29],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[104],\n",
              "          [ 66],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 85],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[112],\n",
              "          [181],\n",
              "          [181],\n",
              "          ...,\n",
              "          [180],\n",
              "          [169],\n",
              "          [111]],\n",
              "  \n",
              "         [[121],\n",
              "          [187],\n",
              "          [184],\n",
              "          ...,\n",
              "          [182],\n",
              "          [173],\n",
              "          [111]],\n",
              "  \n",
              "         [[122],\n",
              "          [190],\n",
              "          [185],\n",
              "          ...,\n",
              "          [179],\n",
              "          [169],\n",
              "          [114]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[152],\n",
              "          [179],\n",
              "          [178],\n",
              "          ...,\n",
              "          [174],\n",
              "          [173],\n",
              "          [171]],\n",
              "  \n",
              "         [[159],\n",
              "          [166],\n",
              "          [168],\n",
              "          ...,\n",
              "          [173],\n",
              "          [171],\n",
              "          [172]],\n",
              "  \n",
              "         [[137],\n",
              "          [138],\n",
              "          [152],\n",
              "          ...,\n",
              "          [174],\n",
              "          [172],\n",
              "          [172]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[135],\n",
              "          [135],\n",
              "          [135],\n",
              "          ...,\n",
              "          [136],\n",
              "          [141],\n",
              "          [145]],\n",
              "  \n",
              "         [[135],\n",
              "          [135],\n",
              "          [135],\n",
              "          ...,\n",
              "          [138],\n",
              "          [142],\n",
              "          [147]],\n",
              "  \n",
              "         [[135],\n",
              "          [135],\n",
              "          [135],\n",
              "          ...,\n",
              "          [149],\n",
              "          [140],\n",
              "          [147]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[106],\n",
              "          [ 96],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 93],\n",
              "          [100]],\n",
              "  \n",
              "         [[103],\n",
              "          [ 81],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 96],\n",
              "          [105]],\n",
              "  \n",
              "         [[124],\n",
              "          [ 99],\n",
              "          [122],\n",
              "          ...,\n",
              "          [106],\n",
              "          [103],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 34],\n",
              "          [ 37],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 52],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 37],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 47],\n",
              "          [ 48]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 40],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 42],\n",
              "          [ 43]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 20],\n",
              "          [ 30],\n",
              "          [ 15],\n",
              "          ...,\n",
              "          [160],\n",
              "          [155],\n",
              "          [157]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 16],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [149],\n",
              "          [156],\n",
              "          [159]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 41],\n",
              "          [ 11],\n",
              "          ...,\n",
              "          [155],\n",
              "          [154],\n",
              "          [153]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[184],\n",
              "          [190],\n",
              "          [188],\n",
              "          ...,\n",
              "          [182],\n",
              "          [179],\n",
              "          [187]],\n",
              "  \n",
              "         [[188],\n",
              "          [184],\n",
              "          [184],\n",
              "          ...,\n",
              "          [182],\n",
              "          [184],\n",
              "          [183]],\n",
              "  \n",
              "         [[185],\n",
              "          [188],\n",
              "          [186],\n",
              "          ...,\n",
              "          [184],\n",
              "          [184],\n",
              "          [175]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[212],\n",
              "          [212],\n",
              "          [215],\n",
              "          ...,\n",
              "          [196],\n",
              "          [200],\n",
              "          [197]],\n",
              "  \n",
              "         [[215],\n",
              "          [218],\n",
              "          [216],\n",
              "          ...,\n",
              "          [203],\n",
              "          [206],\n",
              "          [197]],\n",
              "  \n",
              "         [[213],\n",
              "          [212],\n",
              "          [216],\n",
              "          ...,\n",
              "          [207],\n",
              "          [196],\n",
              "          [202]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 78],\n",
              "          [ 65],\n",
              "          [ 71],\n",
              "          ...,\n",
              "          [109],\n",
              "          [128],\n",
              "          [145]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 65],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 96],\n",
              "          [129]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 67],\n",
              "          [ 74],\n",
              "          ...,\n",
              "          [122],\n",
              "          [113],\n",
              "          [132]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 14],\n",
              "          [ 21],\n",
              "          [ 14],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 34],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [  8],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 34],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[  7],\n",
              "          [  6],\n",
              "          [  6],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 37],\n",
              "          [ 36]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[134],\n",
              "          [143],\n",
              "          [148],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 98],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[139],\n",
              "          [148],\n",
              "          [153],\n",
              "          ...,\n",
              "          [108],\n",
              "          [100],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[143],\n",
              "          [152],\n",
              "          [153],\n",
              "          ...,\n",
              "          [104],\n",
              "          [106],\n",
              "          [102]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[223],\n",
              "          [230],\n",
              "          [234],\n",
              "          ...,\n",
              "          [137],\n",
              "          [165],\n",
              "          [180]],\n",
              "  \n",
              "         [[221],\n",
              "          [227],\n",
              "          [234],\n",
              "          ...,\n",
              "          [166],\n",
              "          [181],\n",
              "          [185]],\n",
              "  \n",
              "         [[219],\n",
              "          [223],\n",
              "          [230],\n",
              "          ...,\n",
              "          [184],\n",
              "          [183],\n",
              "          [181]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[205],\n",
              "          [202],\n",
              "          [209],\n",
              "          ...,\n",
              "          [216],\n",
              "          [213],\n",
              "          [209]],\n",
              "  \n",
              "         [[200],\n",
              "          [203],\n",
              "          [199],\n",
              "          ...,\n",
              "          [215],\n",
              "          [202],\n",
              "          [209]],\n",
              "  \n",
              "         [[188],\n",
              "          [187],\n",
              "          [195],\n",
              "          ...,\n",
              "          [207],\n",
              "          [202],\n",
              "          [203]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[168],\n",
              "          [174],\n",
              "          [176],\n",
              "          ...,\n",
              "          [104],\n",
              "          [ 98],\n",
              "          [ 74]],\n",
              "  \n",
              "         [[166],\n",
              "          [175],\n",
              "          [160],\n",
              "          ...,\n",
              "          [102],\n",
              "          [102],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[172],\n",
              "          [171],\n",
              "          [160],\n",
              "          ...,\n",
              "          [107],\n",
              "          [103],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[130],\n",
              "          [130],\n",
              "          [130],\n",
              "          ...,\n",
              "          [219],\n",
              "          [221],\n",
              "          [223]],\n",
              "  \n",
              "         [[130],\n",
              "          [130],\n",
              "          [130],\n",
              "          ...,\n",
              "          [219],\n",
              "          [221],\n",
              "          [224]],\n",
              "  \n",
              "         [[130],\n",
              "          [130],\n",
              "          [130],\n",
              "          ...,\n",
              "          [220],\n",
              "          [221],\n",
              "          [229]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [140],\n",
              "          [138],\n",
              "          ...,\n",
              "          [113],\n",
              "          [ 90],\n",
              "          [101]],\n",
              "  \n",
              "         [[142],\n",
              "          [140],\n",
              "          [138],\n",
              "          ...,\n",
              "          [122],\n",
              "          [120],\n",
              "          [116]],\n",
              "  \n",
              "         [[137],\n",
              "          [139],\n",
              "          [136],\n",
              "          ...,\n",
              "          [120],\n",
              "          [119],\n",
              "          [108]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[131],\n",
              "          [135],\n",
              "          [139],\n",
              "          ...,\n",
              "          [130],\n",
              "          [126],\n",
              "          [120]],\n",
              "  \n",
              "         [[133],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [130],\n",
              "          [128],\n",
              "          [122]],\n",
              "  \n",
              "         [[136],\n",
              "          [139],\n",
              "          [141],\n",
              "          ...,\n",
              "          [131],\n",
              "          [130],\n",
              "          [127]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[127],\n",
              "          [127],\n",
              "          [128],\n",
              "          ...,\n",
              "          [179],\n",
              "          [177],\n",
              "          [176]],\n",
              "  \n",
              "         [[119],\n",
              "          [124],\n",
              "          [125],\n",
              "          ...,\n",
              "          [174],\n",
              "          [175],\n",
              "          [174]],\n",
              "  \n",
              "         [[115],\n",
              "          [119],\n",
              "          [121],\n",
              "          ...,\n",
              "          [173],\n",
              "          [176],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[110],\n",
              "          [108],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [103],\n",
              "          [101]],\n",
              "  \n",
              "         [[110],\n",
              "          [112],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [100],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[107],\n",
              "          [117],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [100],\n",
              "          [100],\n",
              "          [ 92]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[170],\n",
              "          [164],\n",
              "          [163],\n",
              "          ...,\n",
              "          [108],\n",
              "          [104],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[168],\n",
              "          [159],\n",
              "          [163],\n",
              "          ...,\n",
              "          [111],\n",
              "          [ 98],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[151],\n",
              "          [146],\n",
              "          [162],\n",
              "          ...,\n",
              "          [108],\n",
              "          [100],\n",
              "          [ 85]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[178],\n",
              "          [180],\n",
              "          [180],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 74],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[183],\n",
              "          [184],\n",
              "          [185],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 84],\n",
              "          [103]],\n",
              "  \n",
              "         [[186],\n",
              "          [179],\n",
              "          [186],\n",
              "          ...,\n",
              "          [138],\n",
              "          [113],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 80],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 92],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 78],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 89],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 88],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 84],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 68],\n",
              "          [ 65],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 56],\n",
              "          [ 41]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [ 71],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 45],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 81],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 68],\n",
              "          [ 60]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[136],\n",
              "          [150],\n",
              "          [136],\n",
              "          ...,\n",
              "          [134],\n",
              "          [138],\n",
              "          [123]],\n",
              "  \n",
              "         [[149],\n",
              "          [149],\n",
              "          [147],\n",
              "          ...,\n",
              "          [133],\n",
              "          [136],\n",
              "          [127]],\n",
              "  \n",
              "         [[148],\n",
              "          [131],\n",
              "          [151],\n",
              "          ...,\n",
              "          [144],\n",
              "          [133],\n",
              "          [127]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 69],\n",
              "          [ 76],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 71],\n",
              "          [ 65]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 82],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 71],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 85],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 70],\n",
              "          [ 63]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [109],\n",
              "          [112],\n",
              "          ...,\n",
              "          [119],\n",
              "          [119],\n",
              "          [114]],\n",
              "  \n",
              "         [[118],\n",
              "          [121],\n",
              "          [118],\n",
              "          ...,\n",
              "          [118],\n",
              "          [113],\n",
              "          [115]],\n",
              "  \n",
              "         [[113],\n",
              "          [106],\n",
              "          [111],\n",
              "          ...,\n",
              "          [114],\n",
              "          [112],\n",
              "          [ 98]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 83],\n",
              "          [ 83],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [144],\n",
              "          [148],\n",
              "          [149]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 87],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [146],\n",
              "          [150],\n",
              "          [155]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 89],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [148],\n",
              "          [153],\n",
              "          [156]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 61],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 34],\n",
              "          [ 35]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 59],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 32],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 56],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 33],\n",
              "          [ 30]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 17],\n",
              "          [  6],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [109],\n",
              "          [117],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 18],\n",
              "          [  5],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [109],\n",
              "          [113],\n",
              "          [105]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [  7],\n",
              "          [  8],\n",
              "          ...,\n",
              "          [106],\n",
              "          [112],\n",
              "          [ 93]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[  9],\n",
              "          [ 11],\n",
              "          [ 13],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 43],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 12],\n",
              "          [ 16],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 42],\n",
              "          [ 49],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 31],\n",
              "          [ 38],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 45],\n",
              "          [ 45]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[253],\n",
              "          [141],\n",
              "          [144],\n",
              "          ...,\n",
              "          [148],\n",
              "          [148],\n",
              "          [252]],\n",
              "  \n",
              "         [[252],\n",
              "          [ 29],\n",
              "          [ 36],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 70],\n",
              "          [250]],\n",
              "  \n",
              "         [[251],\n",
              "          [ 25],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 91],\n",
              "          [251]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[251],\n",
              "          [ 97],\n",
              "          [103],\n",
              "          ...,\n",
              "          [131],\n",
              "          [137],\n",
              "          [252]],\n",
              "  \n",
              "         [[250],\n",
              "          [ 90],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [111],\n",
              "          [114],\n",
              "          [249]],\n",
              "  \n",
              "         [[251],\n",
              "          [168],\n",
              "          [171],\n",
              "          ...,\n",
              "          [174],\n",
              "          [172],\n",
              "          [251]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 83],\n",
              "          [ 89],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 87],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 94],\n",
              "          [159],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 90],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 81],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [111],\n",
              "          [140]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 94],\n",
              "          [112],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 39],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[116],\n",
              "          [114],\n",
              "          [132],\n",
              "          ...,\n",
              "          [ 52],\n",
              "          [ 37],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 84],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 54],\n",
              "          [ 46]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[127],\n",
              "          [124],\n",
              "          [173],\n",
              "          ...,\n",
              "          [220],\n",
              "          [ 76],\n",
              "          [ 46]],\n",
              "  \n",
              "         [[175],\n",
              "          [163],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 95],\n",
              "          [236]],\n",
              "  \n",
              "         [[125],\n",
              "          [137],\n",
              "          [145],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 30],\n",
              "          [150]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [187],\n",
              "          [248],\n",
              "          ...,\n",
              "          [248],\n",
              "          [249],\n",
              "          [250]],\n",
              "  \n",
              "         [[163],\n",
              "          [168],\n",
              "          [248],\n",
              "          ...,\n",
              "          [247],\n",
              "          [242],\n",
              "          [244]],\n",
              "  \n",
              "         [[177],\n",
              "          [177],\n",
              "          [183],\n",
              "          ...,\n",
              "          [247],\n",
              "          [248],\n",
              "          [245]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[227],\n",
              "          [227],\n",
              "          [225],\n",
              "          ...,\n",
              "          [ 64],\n",
              "          [ 65],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[226],\n",
              "          [226],\n",
              "          [225],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 58],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[228],\n",
              "          [226],\n",
              "          [224],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 55],\n",
              "          [ 62]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[210],\n",
              "          [212],\n",
              "          [215],\n",
              "          ...,\n",
              "          [179],\n",
              "          [167],\n",
              "          [181]],\n",
              "  \n",
              "         [[214],\n",
              "          [218],\n",
              "          [212],\n",
              "          ...,\n",
              "          [184],\n",
              "          [182],\n",
              "          [181]],\n",
              "  \n",
              "         [[213],\n",
              "          [213],\n",
              "          [208],\n",
              "          ...,\n",
              "          [200],\n",
              "          [182],\n",
              "          [169]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[212],\n",
              "          [212],\n",
              "          [208],\n",
              "          ...,\n",
              "          [179],\n",
              "          [150],\n",
              "          [184]],\n",
              "  \n",
              "         [[222],\n",
              "          [209],\n",
              "          [215],\n",
              "          ...,\n",
              "          [172],\n",
              "          [132],\n",
              "          [173]],\n",
              "  \n",
              "         [[208],\n",
              "          [191],\n",
              "          [212],\n",
              "          ...,\n",
              "          [197],\n",
              "          [186],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [ 41],\n",
              "          [103],\n",
              "          ...,\n",
              "          [122],\n",
              "          [ 74],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 85],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 94],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[140],\n",
              "          [105],\n",
              "          [118],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 53],\n",
              "          [ 36]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 48],\n",
              "          [ 46],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 84],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 44],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 87],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 37],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [ 89],\n",
              "          [ 82]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [149],\n",
              "          [149],\n",
              "          ...,\n",
              "          [175],\n",
              "          [176],\n",
              "          [168]],\n",
              "  \n",
              "         [[151],\n",
              "          [155],\n",
              "          [158],\n",
              "          ...,\n",
              "          [177],\n",
              "          [171],\n",
              "          [170]],\n",
              "  \n",
              "         [[141],\n",
              "          [147],\n",
              "          [154],\n",
              "          ...,\n",
              "          [173],\n",
              "          [169],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[184],\n",
              "          [186],\n",
              "          [149],\n",
              "          ...,\n",
              "          [128],\n",
              "          [127],\n",
              "          [127]],\n",
              "  \n",
              "         [[182],\n",
              "          [188],\n",
              "          [184],\n",
              "          ...,\n",
              "          [123],\n",
              "          [127],\n",
              "          [127]],\n",
              "  \n",
              "         [[170],\n",
              "          [191],\n",
              "          [184],\n",
              "          ...,\n",
              "          [127],\n",
              "          [126],\n",
              "          [118]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[214],\n",
              "          [197],\n",
              "          [211],\n",
              "          ...,\n",
              "          [154],\n",
              "          [157],\n",
              "          [155]],\n",
              "  \n",
              "         [[231],\n",
              "          [220],\n",
              "          [206],\n",
              "          ...,\n",
              "          [167],\n",
              "          [158],\n",
              "          [165]],\n",
              "  \n",
              "         [[232],\n",
              "          [223],\n",
              "          [197],\n",
              "          ...,\n",
              "          [158],\n",
              "          [167],\n",
              "          [181]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[152],\n",
              "          [152],\n",
              "          [164],\n",
              "          ...,\n",
              "          [130],\n",
              "          [125],\n",
              "          [124]],\n",
              "  \n",
              "         [[151],\n",
              "          [152],\n",
              "          [154],\n",
              "          ...,\n",
              "          [127],\n",
              "          [124],\n",
              "          [125]],\n",
              "  \n",
              "         [[152],\n",
              "          [156],\n",
              "          [154],\n",
              "          ...,\n",
              "          [123],\n",
              "          [122],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[130],\n",
              "          [132],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 70],\n",
              "          [ 75],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[128],\n",
              "          [131],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 73],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[127],\n",
              "          [126],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 72],\n",
              "          [ 75]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 86],\n",
              "          [ 43],\n",
              "          [ 16],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 24],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 92],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 29],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 44],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [ 32],\n",
              "          [ 30],\n",
              "          [ 34]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 45],\n",
              "          [106],\n",
              "          ...,\n",
              "          [215],\n",
              "          [151],\n",
              "          [110]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 76],\n",
              "          [100],\n",
              "          ...,\n",
              "          [121],\n",
              "          [ 87],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 93],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [114],\n",
              "          [134],\n",
              "          [ 82]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 94],\n",
              "          [ 90],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 88],\n",
              "          [ 81],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 87],\n",
              "          [ 80],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [252],\n",
              "          [252],\n",
              "          [252]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 33],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [142],\n",
              "          [145],\n",
              "          [145]],\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 33],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [145],\n",
              "          [143],\n",
              "          [144]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 35],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [145],\n",
              "          [140],\n",
              "          [140]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 37],\n",
              "          [ 42],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [252],\n",
              "          [253],\n",
              "          [254]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 42],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [239],\n",
              "          [249],\n",
              "          [252]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 42],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [248],\n",
              "          [253],\n",
              "          [252]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [188],\n",
              "          [177],\n",
              "          ...,\n",
              "          [205],\n",
              "          [167],\n",
              "          [223]],\n",
              "  \n",
              "         [[130],\n",
              "          [176],\n",
              "          [172],\n",
              "          ...,\n",
              "          [219],\n",
              "          [191],\n",
              "          [195]],\n",
              "  \n",
              "         [[182],\n",
              "          [111],\n",
              "          [128],\n",
              "          ...,\n",
              "          [229],\n",
              "          [192],\n",
              "          [220]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [120],\n",
              "          [107],\n",
              "          ...,\n",
              "          [ 66],\n",
              "          [ 80],\n",
              "          [107]],\n",
              "  \n",
              "         [[120],\n",
              "          [ 96],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [105],\n",
              "          [117]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 98],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 89],\n",
              "          [ 80]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 84],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [167],\n",
              "          [167],\n",
              "          [164]],\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 74],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [147],\n",
              "          [181],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 71],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [132],\n",
              "          [144],\n",
              "          [159]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[110],\n",
              "          [114],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 72],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[111],\n",
              "          [110],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 77],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[111],\n",
              "          [115],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 76],\n",
              "          [ 67]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 43],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [106],\n",
              "          [116],\n",
              "          [116]],\n",
              "  \n",
              "         [[ 25],\n",
              "          [ 17],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [110],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 42],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [102],\n",
              "          [107],\n",
              "          [102]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [ 66],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [146],\n",
              "          [169],\n",
              "          [187]],\n",
              "  \n",
              "         [[ 66],\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [127],\n",
              "          [143],\n",
              "          [167]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 67],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [103],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[103],\n",
              "          [ 95],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [177],\n",
              "          [176],\n",
              "          [181]],\n",
              "  \n",
              "         [[ 98],\n",
              "          [106],\n",
              "          [104],\n",
              "          ...,\n",
              "          [174],\n",
              "          [175],\n",
              "          [182]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 96],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [180],\n",
              "          [177],\n",
              "          [181]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[128],\n",
              "          [126],\n",
              "          [121],\n",
              "          ...,\n",
              "          [108],\n",
              "          [110],\n",
              "          [106]],\n",
              "  \n",
              "         [[128],\n",
              "          [129],\n",
              "          [123],\n",
              "          ...,\n",
              "          [111],\n",
              "          [110],\n",
              "          [108]],\n",
              "  \n",
              "         [[130],\n",
              "          [126],\n",
              "          [123],\n",
              "          ...,\n",
              "          [112],\n",
              "          [108],\n",
              "          [110]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 62],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 27],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[ 68],\n",
              "          [ 72],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 28],\n",
              "          [ 32]],\n",
              "  \n",
              "         [[ 54],\n",
              "          [ 62],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [ 33],\n",
              "          [ 29],\n",
              "          [ 28]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 77],\n",
              "          [ 58],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [ 31],\n",
              "          [ 24],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[ 71],\n",
              "          [ 71],\n",
              "          [ 60],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 31],\n",
              "          [ 59]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 59],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 46],\n",
              "          [ 54]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 94],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 48],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [100],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 71],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[112],\n",
              "          [109],\n",
              "          [109],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 49],\n",
              "          [ 54]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[191],\n",
              "          [203],\n",
              "          [222],\n",
              "          ...,\n",
              "          [230],\n",
              "          [230],\n",
              "          [229]],\n",
              "  \n",
              "         [[192],\n",
              "          [203],\n",
              "          [221],\n",
              "          ...,\n",
              "          [231],\n",
              "          [231],\n",
              "          [230]],\n",
              "  \n",
              "         [[192],\n",
              "          [202],\n",
              "          [220],\n",
              "          ...,\n",
              "          [230],\n",
              "          [229],\n",
              "          [229]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 70],\n",
              "          [ 50],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 60],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 25],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 51],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[ 26],\n",
              "          [ 22],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 51],\n",
              "          [ 62]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 6],\n",
              "          [ 6],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 3],\n",
              "          [ 3],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          [ 2]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 7],\n",
              "          [ 7],\n",
              "          ...,\n",
              "          [ 2],\n",
              "          [ 2],\n",
              "          [ 1]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[14],\n",
              "          [17],\n",
              "          [16],\n",
              "          ...,\n",
              "          [66],\n",
              "          [59],\n",
              "          [58]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 5],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [66],\n",
              "          [55],\n",
              "          [53]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 4],\n",
              "          [ 1],\n",
              "          ...,\n",
              "          [59],\n",
              "          [55],\n",
              "          [50]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[196],\n",
              "          [135],\n",
              "          [191],\n",
              "          ...,\n",
              "          [248],\n",
              "          [245],\n",
              "          [248]],\n",
              "  \n",
              "         [[174],\n",
              "          [141],\n",
              "          [131],\n",
              "          ...,\n",
              "          [249],\n",
              "          [248],\n",
              "          [241]],\n",
              "  \n",
              "         [[134],\n",
              "          [134],\n",
              "          [117],\n",
              "          ...,\n",
              "          [248],\n",
              "          [247],\n",
              "          [247]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[183],\n",
              "          [171],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 73],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[176],\n",
              "          [160],\n",
              "          [154],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 72],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[168],\n",
              "          [164],\n",
              "          [198],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 70],\n",
              "          [105]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 69],\n",
              "          [ 78],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 88],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 78],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [ 74],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 90],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 66],\n",
              "          [ 76]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[113],\n",
              "          [110],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [106],\n",
              "          [134],\n",
              "          [108]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 86],\n",
              "          [ 99],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [ 75],\n",
              "          [ 64]],\n",
              "  \n",
              "         [[108],\n",
              "          [ 91],\n",
              "          [111],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 49],\n",
              "          [ 53]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[147],\n",
              "          [142],\n",
              "          [139],\n",
              "          ...,\n",
              "          [137],\n",
              "          [ 60],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[152],\n",
              "          [145],\n",
              "          [139],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 29],\n",
              "          [ 36]],\n",
              "  \n",
              "         [[154],\n",
              "          [148],\n",
              "          [141],\n",
              "          ...,\n",
              "          [127],\n",
              "          [ 85],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 67],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [106],\n",
              "          [112],\n",
              "          [114]],\n",
              "  \n",
              "         [[ 85],\n",
              "          [ 80],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [101],\n",
              "          [129],\n",
              "          [112]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 48],\n",
              "          [ 64],\n",
              "          ...,\n",
              "          [111],\n",
              "          [118],\n",
              "          [104]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[124],\n",
              "          [161],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 13],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[126],\n",
              "          [131],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 28],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[122],\n",
              "          [134],\n",
              "          [134],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 20],\n",
              "          [ 18]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 93],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 90],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 92],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 94],\n",
              "          [101]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 86],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 92],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[254],\n",
              "          [254],\n",
              "          [254],\n",
              "          ...,\n",
              "          [254],\n",
              "          [254],\n",
              "          [253]],\n",
              "  \n",
              "         [[229],\n",
              "          [229],\n",
              "          [230],\n",
              "          ...,\n",
              "          [242],\n",
              "          [252],\n",
              "          [243]],\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [251],\n",
              "          ...,\n",
              "          [226],\n",
              "          [231],\n",
              "          [229]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 49],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [237],\n",
              "          [234],\n",
              "          [233]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 53],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [235],\n",
              "          [235],\n",
              "          [232]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 52],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [234],\n",
              "          [230],\n",
              "          [230]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[101],\n",
              "          [103],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 99],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 26],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [100],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 28],\n",
              "          [ 25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 34],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 10],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 32],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 12],\n",
              "          [ 12],\n",
              "          [ 19]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 36],\n",
              "          [104],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 17],\n",
              "          [ 21]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[118],\n",
              "          [115],\n",
              "          [117],\n",
              "          ...,\n",
              "          [135],\n",
              "          [132],\n",
              "          [131]],\n",
              "  \n",
              "         [[115],\n",
              "          [117],\n",
              "          [116],\n",
              "          ...,\n",
              "          [133],\n",
              "          [129],\n",
              "          [123]],\n",
              "  \n",
              "         [[115],\n",
              "          [117],\n",
              "          [114],\n",
              "          ...,\n",
              "          [131],\n",
              "          [132],\n",
              "          [128]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[156],\n",
              "          [163],\n",
              "          [169],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 58],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[161],\n",
              "          [165],\n",
              "          [167],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          [ 55]],\n",
              "  \n",
              "         [[160],\n",
              "          [163],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 55],\n",
              "          [ 58]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [241],\n",
              "          [231],\n",
              "          ...,\n",
              "          [251],\n",
              "          [223],\n",
              "          [125]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [253],\n",
              "          ...,\n",
              "          [226],\n",
              "          [215],\n",
              "          [130]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [188],\n",
              "          [174],\n",
              "          [136]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 58],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [106],\n",
              "          [105],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 69],\n",
              "          [ 63],\n",
              "          ...,\n",
              "          [ 95],\n",
              "          [133],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 63],\n",
              "          [ 67],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [124],\n",
              "          [ 38]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[247],\n",
              "          [250],\n",
              "          [249],\n",
              "          ...,\n",
              "          [192],\n",
              "          [189],\n",
              "          [174]],\n",
              "  \n",
              "         [[247],\n",
              "          [249],\n",
              "          [248],\n",
              "          ...,\n",
              "          [207],\n",
              "          [202],\n",
              "          [205]],\n",
              "  \n",
              "         [[248],\n",
              "          [247],\n",
              "          [248],\n",
              "          ...,\n",
              "          [220],\n",
              "          [219],\n",
              "          [213]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[215],\n",
              "          [211],\n",
              "          [124],\n",
              "          ...,\n",
              "          [179],\n",
              "          [196],\n",
              "          [209]],\n",
              "  \n",
              "         [[217],\n",
              "          [214],\n",
              "          [132],\n",
              "          ...,\n",
              "          [198],\n",
              "          [189],\n",
              "          [180]],\n",
              "  \n",
              "         [[199],\n",
              "          [211],\n",
              "          [104],\n",
              "          ...,\n",
              "          [190],\n",
              "          [196],\n",
              "          [187]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[140],\n",
              "          [177],\n",
              "          [203],\n",
              "          ...,\n",
              "          [240],\n",
              "          [241],\n",
              "          [240]],\n",
              "  \n",
              "         [[122],\n",
              "          [134],\n",
              "          [133],\n",
              "          ...,\n",
              "          [239],\n",
              "          [239],\n",
              "          [232]],\n",
              "  \n",
              "         [[112],\n",
              "          [108],\n",
              "          [111],\n",
              "          ...,\n",
              "          [233],\n",
              "          [228],\n",
              "          [220]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[181],\n",
              "          [193],\n",
              "          [205],\n",
              "          ...,\n",
              "          [193],\n",
              "          [131],\n",
              "          [100]],\n",
              "  \n",
              "         [[181],\n",
              "          [193],\n",
              "          [206],\n",
              "          ...,\n",
              "          [168],\n",
              "          [153],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[182],\n",
              "          [194],\n",
              "          [202],\n",
              "          ...,\n",
              "          [156],\n",
              "          [163],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 55],\n",
              "          [ 56],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [121],\n",
              "          [122],\n",
              "          [123]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 63],\n",
              "          [ 66],\n",
              "          ...,\n",
              "          [123],\n",
              "          [123],\n",
              "          [125]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 68],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [132],\n",
              "          [131],\n",
              "          [130]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[116],\n",
              "          [109],\n",
              "          [117],\n",
              "          ...,\n",
              "          [225],\n",
              "          [214],\n",
              "          [214]],\n",
              "  \n",
              "         [[126],\n",
              "          [126],\n",
              "          [130],\n",
              "          ...,\n",
              "          [215],\n",
              "          [223],\n",
              "          [222]],\n",
              "  \n",
              "         [[128],\n",
              "          [141],\n",
              "          [135],\n",
              "          ...,\n",
              "          [226],\n",
              "          [208],\n",
              "          [218]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 12],\n",
              "          [ 16]],\n",
              "  \n",
              "         [[249],\n",
              "          [249],\n",
              "          [250],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [ 11],\n",
              "          [ 10]],\n",
              "  \n",
              "         [[207],\n",
              "          [199],\n",
              "          [183],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [ 10],\n",
              "          [ 15]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 38],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 35],\n",
              "          [ 33]],\n",
              "  \n",
              "         [[ 39],\n",
              "          [ 33],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 39],\n",
              "          [ 37]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 33],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 33],\n",
              "          [ 45]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[158],\n",
              "          [161],\n",
              "          [163],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 77],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[159],\n",
              "          [161],\n",
              "          [164],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[141],\n",
              "          [140],\n",
              "          [140],\n",
              "          ...,\n",
              "          [162],\n",
              "          [159],\n",
              "          [160]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[165],\n",
              "          [160],\n",
              "          [158],\n",
              "          ...,\n",
              "          [139],\n",
              "          [139],\n",
              "          [140]],\n",
              "  \n",
              "         [[165],\n",
              "          [163],\n",
              "          [160],\n",
              "          ...,\n",
              "          [141],\n",
              "          [141],\n",
              "          [140]],\n",
              "  \n",
              "         [[160],\n",
              "          [161],\n",
              "          [162],\n",
              "          ...,\n",
              "          [142],\n",
              "          [141],\n",
              "          [141]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[105],\n",
              "          [106],\n",
              "          [108],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 82],\n",
              "          [ 84]],\n",
              "  \n",
              "         [[102],\n",
              "          [105],\n",
              "          [110],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [ 84],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[102],\n",
              "          [105],\n",
              "          [106],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 83],\n",
              "          [ 86]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 75],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [179],\n",
              "          [176],\n",
              "          [175]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 77],\n",
              "          [ 77],\n",
              "          ...,\n",
              "          [181],\n",
              "          [175],\n",
              "          [176]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 74],\n",
              "          [ 76],\n",
              "          ...,\n",
              "          [180],\n",
              "          [176],\n",
              "          [179]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 5],\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          ...,\n",
              "          [25],\n",
              "          [22],\n",
              "          [21]],\n",
              "  \n",
              "         [[ 5],\n",
              "          [ 5],\n",
              "          [ 5],\n",
              "          ...,\n",
              "          [27],\n",
              "          [23],\n",
              "          [24]],\n",
              "  \n",
              "         [[ 5],\n",
              "          [ 4],\n",
              "          [ 6],\n",
              "          ...,\n",
              "          [28],\n",
              "          [26],\n",
              "          [25]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[14],\n",
              "          [16],\n",
              "          [10],\n",
              "          ...,\n",
              "          [28],\n",
              "          [53],\n",
              "          [43]],\n",
              "  \n",
              "         [[15],\n",
              "          [15],\n",
              "          [12],\n",
              "          ...,\n",
              "          [30],\n",
              "          [48],\n",
              "          [30]],\n",
              "  \n",
              "         [[14],\n",
              "          [12],\n",
              "          [13],\n",
              "          ...,\n",
              "          [30],\n",
              "          [27],\n",
              "          [14]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 59],\n",
              "          [ 57],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [  6],\n",
              "          [  6]],\n",
              "  \n",
              "         [[ 42],\n",
              "          [ 45],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [  6],\n",
              "          [  7]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 51],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  6],\n",
              "          [  7]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [130],\n",
              "          [165],\n",
              "          ...,\n",
              "          [111],\n",
              "          [111],\n",
              "          [103]],\n",
              "  \n",
              "         [[167],\n",
              "          [136],\n",
              "          [169],\n",
              "          ...,\n",
              "          [109],\n",
              "          [110],\n",
              "          [ 95]],\n",
              "  \n",
              "         [[160],\n",
              "          [135],\n",
              "          [153],\n",
              "          ...,\n",
              "          [106],\n",
              "          [110],\n",
              "          [106]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[137],\n",
              "          [137],\n",
              "          [135],\n",
              "          ...,\n",
              "          [175],\n",
              "          [156],\n",
              "          [176]],\n",
              "  \n",
              "         [[137],\n",
              "          [136],\n",
              "          [138],\n",
              "          ...,\n",
              "          [166],\n",
              "          [163],\n",
              "          [191]],\n",
              "  \n",
              "         [[138],\n",
              "          [136],\n",
              "          [139],\n",
              "          ...,\n",
              "          [167],\n",
              "          [169],\n",
              "          [168]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 59],\n",
              "          [ 64],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [184],\n",
              "          [185],\n",
              "          [175]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 66],\n",
              "          [ 72],\n",
              "          ...,\n",
              "          [185],\n",
              "          [185],\n",
              "          [170]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 80],\n",
              "          [ 68],\n",
              "          ...,\n",
              "          [181],\n",
              "          [174],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 88],\n",
              "          [100],\n",
              "          [ 73],\n",
              "          ...,\n",
              "          [110],\n",
              "          [  4],\n",
              "          [110]],\n",
              "  \n",
              "         [[107],\n",
              "          [110],\n",
              "          [ 75],\n",
              "          ...,\n",
              "          [112],\n",
              "          [ 33],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 82],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [104],\n",
              "          [101],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[146],\n",
              "          [158],\n",
              "          [156],\n",
              "          ...,\n",
              "          [170],\n",
              "          [164],\n",
              "          [175]],\n",
              "  \n",
              "         [[138],\n",
              "          [128],\n",
              "          [123],\n",
              "          ...,\n",
              "          [166],\n",
              "          [168],\n",
              "          [159]],\n",
              "  \n",
              "         [[105],\n",
              "          [111],\n",
              "          [104],\n",
              "          ...,\n",
              "          [152],\n",
              "          [155],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 96],\n",
              "          [112],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 83],\n",
              "          [ 48],\n",
              "          [113]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [117],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 57],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[102],\n",
              "          [119],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 43],\n",
              "          [ 56]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 34],\n",
              "          [ 31],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [109],\n",
              "          [118],\n",
              "          [130]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 25],\n",
              "          [ 28],\n",
              "          ...,\n",
              "          [104],\n",
              "          [112],\n",
              "          [118]],\n",
              "  \n",
              "         [[ 22],\n",
              "          [ 24],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [109],\n",
              "          [112],\n",
              "          [117]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 8],\n",
              "          [ 6],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [43],\n",
              "          [43],\n",
              "          [41]],\n",
              "  \n",
              "         [[ 6],\n",
              "          [ 2],\n",
              "          [12],\n",
              "          ...,\n",
              "          [28],\n",
              "          [25],\n",
              "          [42]],\n",
              "  \n",
              "         [[15],\n",
              "          [32],\n",
              "          [24],\n",
              "          ...,\n",
              "          [55],\n",
              "          [53],\n",
              "          [23]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[52],\n",
              "          [39],\n",
              "          [13],\n",
              "          ...,\n",
              "          [55],\n",
              "          [30],\n",
              "          [42]],\n",
              "  \n",
              "         [[54],\n",
              "          [31],\n",
              "          [16],\n",
              "          ...,\n",
              "          [58],\n",
              "          [28],\n",
              "          [46]],\n",
              "  \n",
              "         [[48],\n",
              "          [13],\n",
              "          [50],\n",
              "          ...,\n",
              "          [59],\n",
              "          [51],\n",
              "          [32]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[175],\n",
              "          [168],\n",
              "          [167],\n",
              "          ...,\n",
              "          [179],\n",
              "          [168],\n",
              "          [161]],\n",
              "  \n",
              "         [[173],\n",
              "          [168],\n",
              "          [156],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [173]],\n",
              "  \n",
              "         [[175],\n",
              "          [177],\n",
              "          [166],\n",
              "          ...,\n",
              "          [167],\n",
              "          [156],\n",
              "          [165]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[118],\n",
              "          [123],\n",
              "          [121],\n",
              "          ...,\n",
              "          [177],\n",
              "          [172],\n",
              "          [120]],\n",
              "  \n",
              "         [[126],\n",
              "          [112],\n",
              "          [108],\n",
              "          ...,\n",
              "          [170],\n",
              "          [137],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[116],\n",
              "          [118],\n",
              "          [112],\n",
              "          ...,\n",
              "          [168],\n",
              "          [119],\n",
              "          [ 92]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[249],\n",
              "          [238],\n",
              "          [160],\n",
              "          ...,\n",
              "          [176],\n",
              "          [192],\n",
              "          [163]],\n",
              "  \n",
              "         [[252],\n",
              "          [249],\n",
              "          [247],\n",
              "          ...,\n",
              "          [172],\n",
              "          [183],\n",
              "          [102]],\n",
              "  \n",
              "         [[248],\n",
              "          [252],\n",
              "          [254],\n",
              "          ...,\n",
              "          [188],\n",
              "          [141],\n",
              "          [150]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[143],\n",
              "          [118],\n",
              "          [133],\n",
              "          ...,\n",
              "          [176],\n",
              "          [175],\n",
              "          [181]],\n",
              "  \n",
              "         [[ 91],\n",
              "          [123],\n",
              "          [126],\n",
              "          ...,\n",
              "          [151],\n",
              "          [161],\n",
              "          [178]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [162],\n",
              "          [200],\n",
              "          ...,\n",
              "          [120],\n",
              "          [121],\n",
              "          [153]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[103],\n",
              "          [116],\n",
              "          [126],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  8],\n",
              "          [  6]],\n",
              "  \n",
              "         [[116],\n",
              "          [111],\n",
              "          [113],\n",
              "          ...,\n",
              "          [  8],\n",
              "          [  6],\n",
              "          [  7]],\n",
              "  \n",
              "         [[113],\n",
              "          [115],\n",
              "          [116],\n",
              "          ...,\n",
              "          [  9],\n",
              "          [  8],\n",
              "          [  8]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[173],\n",
              "          [152],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 68],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[158],\n",
              "          [135],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 77],\n",
              "          [ 70]],\n",
              "  \n",
              "         [[154],\n",
              "          [135],\n",
              "          [136],\n",
              "          ...,\n",
              "          [ 78],\n",
              "          [ 73],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[130],\n",
              "          [115],\n",
              "          [119],\n",
              "          ...,\n",
              "          [150],\n",
              "          [152],\n",
              "          [171]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 56],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [103],\n",
              "          [107],\n",
              "          [131]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 19],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [100],\n",
              "          [102],\n",
              "          [134]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[174],\n",
              "          [154],\n",
              "          [152],\n",
              "          ...,\n",
              "          [108],\n",
              "          [106],\n",
              "          [132]],\n",
              "  \n",
              "         [[166],\n",
              "          [129],\n",
              "          [153],\n",
              "          ...,\n",
              "          [103],\n",
              "          [114],\n",
              "          [133]],\n",
              "  \n",
              "         [[173],\n",
              "          [167],\n",
              "          [171],\n",
              "          ...,\n",
              "          [144],\n",
              "          [128],\n",
              "          [158]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[208],\n",
              "          [192],\n",
              "          [ 57],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 38],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[223],\n",
              "          [196],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 42],\n",
              "          [ 49]],\n",
              "  \n",
              "         [[208],\n",
              "          [114],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 44],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[167],\n",
              "          [146],\n",
              "          [148],\n",
              "          ...,\n",
              "          [138],\n",
              "          [167],\n",
              "          [134]],\n",
              "  \n",
              "         [[150],\n",
              "          [152],\n",
              "          [159],\n",
              "          ...,\n",
              "          [146],\n",
              "          [128],\n",
              "          [147]],\n",
              "  \n",
              "         [[141],\n",
              "          [158],\n",
              "          [157],\n",
              "          ...,\n",
              "          [112],\n",
              "          [144],\n",
              "          [107]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 22],\n",
              "          [ 22],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 64],\n",
              "          [ 76]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 35],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [117],\n",
              "          [ 57],\n",
              "          [ 93]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 41],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 59],\n",
              "          [ 75],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[112],\n",
              "          [122],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 84],\n",
              "          [170],\n",
              "          [145]],\n",
              "  \n",
              "         [[126],\n",
              "          [134],\n",
              "          [146],\n",
              "          ...,\n",
              "          [102],\n",
              "          [147],\n",
              "          [135]],\n",
              "  \n",
              "         [[ 76],\n",
              "          [ 78],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [141],\n",
              "          [152]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 6],\n",
              "          [ 6],\n",
              "          [ 9],\n",
              "          ...,\n",
              "          [12],\n",
              "          [24],\n",
              "          [27]],\n",
              "  \n",
              "         [[ 7],\n",
              "          [ 7],\n",
              "          [ 9],\n",
              "          ...,\n",
              "          [12],\n",
              "          [25],\n",
              "          [32]],\n",
              "  \n",
              "         [[ 8],\n",
              "          [ 8],\n",
              "          [ 9],\n",
              "          ...,\n",
              "          [13],\n",
              "          [24],\n",
              "          [35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[50],\n",
              "          [47],\n",
              "          [52],\n",
              "          ...,\n",
              "          [25],\n",
              "          [21],\n",
              "          [20]],\n",
              "  \n",
              "         [[44],\n",
              "          [39],\n",
              "          [45],\n",
              "          ...,\n",
              "          [29],\n",
              "          [25],\n",
              "          [20]],\n",
              "  \n",
              "         [[37],\n",
              "          [43],\n",
              "          [48],\n",
              "          ...,\n",
              "          [42],\n",
              "          [30],\n",
              "          [23]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[152],\n",
              "          [152],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 95],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[152],\n",
              "          [152],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          [ 90]],\n",
              "  \n",
              "         [[153],\n",
              "          [150],\n",
              "          [153],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 96],\n",
              "          [ 94]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [161],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 73],\n",
              "          [ 67]],\n",
              "  \n",
              "         [[162],\n",
              "          [149],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 74],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[157],\n",
              "          [152],\n",
              "          [157],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 71],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 73],\n",
              "          [ 55],\n",
              "          [ 52],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [ 49],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 64],\n",
              "          [ 56],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [107],\n",
              "          [ 64],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 49],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [118],\n",
              "          [ 71],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 27],\n",
              "          [ 40],\n",
              "          [ 21],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 65],\n",
              "          [ 62]],\n",
              "  \n",
              "         [[ 16],\n",
              "          [ 26],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 65],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 24],\n",
              "          [ 18],\n",
              "          [  9],\n",
              "          ...,\n",
              "          [ 58],\n",
              "          [ 60],\n",
              "          [ 59]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 81],\n",
              "          [ 38],\n",
              "          [ 30],\n",
              "          ...,\n",
              "          [215],\n",
              "          [189],\n",
              "          [215]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 59],\n",
              "          [143],\n",
              "          ...,\n",
              "          [165],\n",
              "          [214],\n",
              "          [224]],\n",
              "  \n",
              "         [[187],\n",
              "          [176],\n",
              "          [183],\n",
              "          ...,\n",
              "          [222],\n",
              "          [217],\n",
              "          [222]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[146],\n",
              "          [152],\n",
              "          [149],\n",
              "          ...,\n",
              "          [215],\n",
              "          [230],\n",
              "          [227]],\n",
              "  \n",
              "         [[148],\n",
              "          [160],\n",
              "          [165],\n",
              "          ...,\n",
              "          [221],\n",
              "          [226],\n",
              "          [216]],\n",
              "  \n",
              "         [[176],\n",
              "          [178],\n",
              "          [170],\n",
              "          ...,\n",
              "          [214],\n",
              "          [215],\n",
              "          [214]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[236],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [195],\n",
              "          [195],\n",
              "          [193]],\n",
              "  \n",
              "         [[236],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [195],\n",
              "          [195],\n",
              "          [193]],\n",
              "  \n",
              "         [[237],\n",
              "          [237],\n",
              "          [237],\n",
              "          ...,\n",
              "          [197],\n",
              "          [196],\n",
              "          [194]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[210],\n",
              "          [212],\n",
              "          [214],\n",
              "          ...,\n",
              "          [183],\n",
              "          [180],\n",
              "          [177]],\n",
              "  \n",
              "         [[181],\n",
              "          [199],\n",
              "          [206],\n",
              "          ...,\n",
              "          [182],\n",
              "          [180],\n",
              "          [174]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 71],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [157],\n",
              "          [148],\n",
              "          [137]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 98],\n",
              "          [ 66],\n",
              "          [ 96],\n",
              "          ...,\n",
              "          [239],\n",
              "          [198],\n",
              "          [232]],\n",
              "  \n",
              "         [[102],\n",
              "          [ 67],\n",
              "          [ 88],\n",
              "          ...,\n",
              "          [238],\n",
              "          [170],\n",
              "          [233]],\n",
              "  \n",
              "         [[ 80],\n",
              "          [ 71],\n",
              "          [ 78],\n",
              "          ...,\n",
              "          [238],\n",
              "          [157],\n",
              "          [234]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[137],\n",
              "          [128],\n",
              "          [139],\n",
              "          ...,\n",
              "          [  5],\n",
              "          [  7],\n",
              "          [  8]],\n",
              "  \n",
              "         [[132],\n",
              "          [128],\n",
              "          [127],\n",
              "          ...,\n",
              "          [  7],\n",
              "          [  7],\n",
              "          [  5]],\n",
              "  \n",
              "         [[145],\n",
              "          [131],\n",
              "          [200],\n",
              "          ...,\n",
              "          [  6],\n",
              "          [  7],\n",
              "          [  8]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[248],\n",
              "          [248],\n",
              "          [248],\n",
              "          ...,\n",
              "          [179],\n",
              "          [197],\n",
              "          [195]],\n",
              "  \n",
              "         [[248],\n",
              "          [248],\n",
              "          [248],\n",
              "          ...,\n",
              "          [186],\n",
              "          [191],\n",
              "          [214]],\n",
              "  \n",
              "         [[248],\n",
              "          [248],\n",
              "          [249],\n",
              "          ...,\n",
              "          [222],\n",
              "          [172],\n",
              "          [170]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [190],\n",
              "          [110],\n",
              "          ...,\n",
              "          [103],\n",
              "          [147],\n",
              "          [149]],\n",
              "  \n",
              "         [[178],\n",
              "          [193],\n",
              "          [116],\n",
              "          ...,\n",
              "          [105],\n",
              "          [170],\n",
              "          [163]],\n",
              "  \n",
              "         [[191],\n",
              "          [184],\n",
              "          [127],\n",
              "          ...,\n",
              "          [147],\n",
              "          [157],\n",
              "          [155]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 94],\n",
              "          [ 94],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 79],\n",
              "          [107],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 90],\n",
              "          [ 85],\n",
              "          ...,\n",
              "          [106],\n",
              "          [ 98],\n",
              "          [ 82]],\n",
              "  \n",
              "         [[ 73],\n",
              "          [ 73],\n",
              "          [ 70],\n",
              "          ...,\n",
              "          [105],\n",
              "          [101],\n",
              "          [ 98]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[122],\n",
              "          [122],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 96],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[125],\n",
              "          [125],\n",
              "          [123],\n",
              "          ...,\n",
              "          [ 55],\n",
              "          [ 77],\n",
              "          [ 91]],\n",
              "  \n",
              "         [[127],\n",
              "          [127],\n",
              "          [124],\n",
              "          ...,\n",
              "          [ 54],\n",
              "          [ 50],\n",
              "          [ 70]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[170],\n",
              "          [170],\n",
              "          [168],\n",
              "          ...,\n",
              "          [179],\n",
              "          [178],\n",
              "          [181]],\n",
              "  \n",
              "         [[171],\n",
              "          [171],\n",
              "          [169],\n",
              "          ...,\n",
              "          [176],\n",
              "          [181],\n",
              "          [177]],\n",
              "  \n",
              "         [[172],\n",
              "          [173],\n",
              "          [171],\n",
              "          ...,\n",
              "          [174],\n",
              "          [177],\n",
              "          [179]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[111],\n",
              "          [117],\n",
              "          [125],\n",
              "          ...,\n",
              "          [125],\n",
              "          [123],\n",
              "          [124]],\n",
              "  \n",
              "         [[127],\n",
              "          [132],\n",
              "          [138],\n",
              "          ...,\n",
              "          [130],\n",
              "          [125],\n",
              "          [128]],\n",
              "  \n",
              "         [[135],\n",
              "          [140],\n",
              "          [144],\n",
              "          ...,\n",
              "          [134],\n",
              "          [126],\n",
              "          [132]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[146],\n",
              "          [146],\n",
              "          [147],\n",
              "          ...,\n",
              "          [129],\n",
              "          [129],\n",
              "          [129]],\n",
              "  \n",
              "         [[150],\n",
              "          [146],\n",
              "          [146],\n",
              "          ...,\n",
              "          [127],\n",
              "          [128],\n",
              "          [126]],\n",
              "  \n",
              "         [[148],\n",
              "          [148],\n",
              "          [144],\n",
              "          ...,\n",
              "          [124],\n",
              "          [127],\n",
              "          [129]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [149],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 36],\n",
              "          [ 31],\n",
              "          [ 29]],\n",
              "  \n",
              "         [[115],\n",
              "          [115],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 62],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[114],\n",
              "          [ 96],\n",
              "          [101],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 42],\n",
              "          [ 33]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[118],\n",
              "          [ 85],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [138],\n",
              "          [146],\n",
              "          [163]],\n",
              "  \n",
              "         [[118],\n",
              "          [ 85],\n",
              "          [ 44],\n",
              "          ...,\n",
              "          [143],\n",
              "          [141],\n",
              "          [140]],\n",
              "  \n",
              "         [[121],\n",
              "          [ 85],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [137],\n",
              "          [143],\n",
              "          [140]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[179],\n",
              "          [129],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [110],\n",
              "          [124],\n",
              "          [125]],\n",
              "  \n",
              "         [[174],\n",
              "          [132],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [105],\n",
              "          [121],\n",
              "          [119]],\n",
              "  \n",
              "         [[159],\n",
              "          [132],\n",
              "          [ 80],\n",
              "          ...,\n",
              "          [101],\n",
              "          [107],\n",
              "          [120]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [ 55],\n",
              "          [ 40],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 44],\n",
              "          [ 38]],\n",
              "  \n",
              "         [[ 57],\n",
              "          [ 63],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 43],\n",
              "          [ 45],\n",
              "          [ 45]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 62],\n",
              "          [ 59],\n",
              "          ...,\n",
              "          [ 53],\n",
              "          [ 52],\n",
              "          [ 45]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[125],\n",
              "          [139],\n",
              "          [122],\n",
              "          ...,\n",
              "          [153],\n",
              "          [154],\n",
              "          [155]],\n",
              "  \n",
              "         [[135],\n",
              "          [129],\n",
              "          [137],\n",
              "          ...,\n",
              "          [160],\n",
              "          [155],\n",
              "          [159]],\n",
              "  \n",
              "         [[130],\n",
              "          [135],\n",
              "          [142],\n",
              "          ...,\n",
              "          [161],\n",
              "          [154],\n",
              "          [150]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 49],\n",
              "          [ 68],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[ 47],\n",
              "          [ 46],\n",
              "          [ 43],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 15]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 50],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 13],\n",
              "          [ 14],\n",
              "          [ 13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 85],\n",
              "          [140],\n",
              "          ...,\n",
              "          [133],\n",
              "          [135],\n",
              "          [124]],\n",
              "  \n",
              "         [[ 51],\n",
              "          [ 79],\n",
              "          [129],\n",
              "          ...,\n",
              "          [137],\n",
              "          [145],\n",
              "          [150]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 71],\n",
              "          [133],\n",
              "          ...,\n",
              "          [152],\n",
              "          [140],\n",
              "          [110]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[180],\n",
              "          [180],\n",
              "          [180],\n",
              "          ...,\n",
              "          [168],\n",
              "          [170],\n",
              "          [171]],\n",
              "  \n",
              "         [[162],\n",
              "          [181],\n",
              "          [182],\n",
              "          ...,\n",
              "          [169],\n",
              "          [168],\n",
              "          [171]],\n",
              "  \n",
              "         [[153],\n",
              "          [150],\n",
              "          [161],\n",
              "          ...,\n",
              "          [170],\n",
              "          [170],\n",
              "          [172]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[223],\n",
              "          [222],\n",
              "          [163],\n",
              "          ...,\n",
              "          [174],\n",
              "          [168],\n",
              "          [160]],\n",
              "  \n",
              "         [[222],\n",
              "          [225],\n",
              "          [158],\n",
              "          ...,\n",
              "          [173],\n",
              "          [171],\n",
              "          [167]],\n",
              "  \n",
              "         [[218],\n",
              "          [219],\n",
              "          [160],\n",
              "          ...,\n",
              "          [173],\n",
              "          [169],\n",
              "          [167]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[191],\n",
              "          [194],\n",
              "          [195],\n",
              "          ...,\n",
              "          [141],\n",
              "          [142],\n",
              "          [141]],\n",
              "  \n",
              "         [[196],\n",
              "          [196],\n",
              "          [197],\n",
              "          ...,\n",
              "          [139],\n",
              "          [141],\n",
              "          [141]],\n",
              "  \n",
              "         [[197],\n",
              "          [195],\n",
              "          [196],\n",
              "          ...,\n",
              "          [140],\n",
              "          [140],\n",
              "          [140]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 56],\n",
              "          [ 49],\n",
              "          [ 34],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 65],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 21],\n",
              "          [ 33],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 82],\n",
              "          [ 73],\n",
              "          [ 61]],\n",
              "  \n",
              "         [[ 34],\n",
              "          [  9],\n",
              "          [ 20],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 77],\n",
              "          [ 52]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[171],\n",
              "          [170],\n",
              "          [161],\n",
              "          ...,\n",
              "          [125],\n",
              "          [129],\n",
              "          [119]],\n",
              "  \n",
              "         [[167],\n",
              "          [174],\n",
              "          [159],\n",
              "          ...,\n",
              "          [132],\n",
              "          [123],\n",
              "          [124]],\n",
              "  \n",
              "         [[164],\n",
              "          [157],\n",
              "          [166],\n",
              "          ...,\n",
              "          [127],\n",
              "          [128],\n",
              "          [129]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 12],\n",
              "          [  4],\n",
              "          [  0],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 13],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[  6],\n",
              "          [  7],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 18],\n",
              "          [ 20]],\n",
              "  \n",
              "         [[ 10],\n",
              "          [  3],\n",
              "          [  1],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 27],\n",
              "          [ 31]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[164],\n",
              "          [140],\n",
              "          [162],\n",
              "          ...,\n",
              "          [125],\n",
              "          [117],\n",
              "          [114]],\n",
              "  \n",
              "         [[133],\n",
              "          [140],\n",
              "          [126],\n",
              "          ...,\n",
              "          [112],\n",
              "          [113],\n",
              "          [104]],\n",
              "  \n",
              "         [[150],\n",
              "          [157],\n",
              "          [157],\n",
              "          ...,\n",
              "          [128],\n",
              "          [120],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[176],\n",
              "          [137],\n",
              "          [150],\n",
              "          ...,\n",
              "          [192],\n",
              "          [173],\n",
              "          [193]],\n",
              "  \n",
              "         [[185],\n",
              "          [175],\n",
              "          [163],\n",
              "          ...,\n",
              "          [193],\n",
              "          [182],\n",
              "          [124]],\n",
              "  \n",
              "         [[190],\n",
              "          [165],\n",
              "          [204],\n",
              "          ...,\n",
              "          [172],\n",
              "          [172],\n",
              "          [172]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 91],\n",
              "          [ 93],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [158],\n",
              "          [162],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 93],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [169],\n",
              "          [165],\n",
              "          [171]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 90],\n",
              "          [ 92],\n",
              "          ...,\n",
              "          [162],\n",
              "          [173],\n",
              "          [169]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 69],\n",
              "          [113],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 65],\n",
              "          [164],\n",
              "          [173]],\n",
              "  \n",
              "         [[117],\n",
              "          [124],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [150],\n",
              "          [171]],\n",
              "  \n",
              "         [[121],\n",
              "          [127],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 38],\n",
              "          [ 57],\n",
              "          [166]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[107],\n",
              "          [116],\n",
              "          [125],\n",
              "          ...,\n",
              "          [156],\n",
              "          [150],\n",
              "          [143]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [125],\n",
              "          [119],\n",
              "          ...,\n",
              "          [172],\n",
              "          [135],\n",
              "          [152]],\n",
              "  \n",
              "         [[109],\n",
              "          [117],\n",
              "          [108],\n",
              "          ...,\n",
              "          [132],\n",
              "          [165],\n",
              "          [145]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 88],\n",
              "          [ 90],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [ 88],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[ 82],\n",
              "          [ 86],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 91],\n",
              "          [ 92]],\n",
              "  \n",
              "         [[ 83],\n",
              "          [ 85],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 92],\n",
              "          [ 89]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[220],\n",
              "          [223],\n",
              "          [222],\n",
              "          ...,\n",
              "          [199],\n",
              "          [201],\n",
              "          [201]],\n",
              "  \n",
              "         [[157],\n",
              "          [154],\n",
              "          [158],\n",
              "          ...,\n",
              "          [162],\n",
              "          [108],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[159],\n",
              "          [156],\n",
              "          [158],\n",
              "          ...,\n",
              "          [158],\n",
              "          [152],\n",
              "          [165]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[110],\n",
              "          [128],\n",
              "          [124],\n",
              "          ...,\n",
              "          [132],\n",
              "          [143],\n",
              "          [138]],\n",
              "  \n",
              "         [[101],\n",
              "          [121],\n",
              "          [123],\n",
              "          ...,\n",
              "          [133],\n",
              "          [141],\n",
              "          [128]],\n",
              "  \n",
              "         [[123],\n",
              "          [127],\n",
              "          [120],\n",
              "          ...,\n",
              "          [148],\n",
              "          [146],\n",
              "          [136]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 14],\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 45],\n",
              "          [ 40],\n",
              "          [ 42]],\n",
              "  \n",
              "         [[ 19],\n",
              "          [ 19],\n",
              "          [ 19],\n",
              "          ...,\n",
              "          [ 62],\n",
              "          [ 30],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 15],\n",
              "          [ 24],\n",
              "          [ 18],\n",
              "          ...,\n",
              "          [ 48],\n",
              "          [ 31],\n",
              "          [ 30]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 26],\n",
              "          [ 26],\n",
              "          ...,\n",
              "          [207],\n",
              "          [210],\n",
              "          [211]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 31],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [207],\n",
              "          [208],\n",
              "          [208]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 33],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [202],\n",
              "          [208],\n",
              "          [209]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[136],\n",
              "          [136],\n",
              "          [135],\n",
              "          ...,\n",
              "          [144],\n",
              "          [144],\n",
              "          [144]],\n",
              "  \n",
              "         [[136],\n",
              "          [137],\n",
              "          [137],\n",
              "          ...,\n",
              "          [145],\n",
              "          [145],\n",
              "          [145]],\n",
              "  \n",
              "         [[137],\n",
              "          [137],\n",
              "          [138],\n",
              "          ...,\n",
              "          [146],\n",
              "          [146],\n",
              "          [146]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[199],\n",
              "          [196],\n",
              "          [192],\n",
              "          ...,\n",
              "          [190],\n",
              "          [200],\n",
              "          [213]],\n",
              "  \n",
              "         [[214],\n",
              "          [213],\n",
              "          [213],\n",
              "          ...,\n",
              "          [191],\n",
              "          [198],\n",
              "          [208]],\n",
              "  \n",
              "         [[198],\n",
              "          [202],\n",
              "          [204],\n",
              "          ...,\n",
              "          [190],\n",
              "          [197],\n",
              "          [206]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 90],\n",
              "          [ 92],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [ 47],\n",
              "          [ 47],\n",
              "          [ 53]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 89],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [ 47],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[179],\n",
              "          [180],\n",
              "          [184],\n",
              "          ...,\n",
              "          [ 35],\n",
              "          [ 29],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 97],\n",
              "          [ 94],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [193],\n",
              "          [165],\n",
              "          [119]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 91],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [232],\n",
              "          [189],\n",
              "          [163]],\n",
              "  \n",
              "         [[ 93],\n",
              "          [ 90],\n",
              "          [ 82],\n",
              "          ...,\n",
              "          [238],\n",
              "          [209],\n",
              "          [197]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 56],\n",
              "          [ 68],\n",
              "          [171],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 88],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 55],\n",
              "          [ 53],\n",
              "          [168],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 88],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[ 58],\n",
              "          [ 48],\n",
              "          [164],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 87],\n",
              "          [ 83]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 91],\n",
              "          [ 88],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [104],\n",
              "          [104]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [105],\n",
              "          [ 94],\n",
              "          ...,\n",
              "          [100],\n",
              "          [101],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [ 92],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [104],\n",
              "          [103],\n",
              "          [104]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 94],\n",
              "          [134],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 60],\n",
              "          [ 56]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [133],\n",
              "          [133],\n",
              "          ...,\n",
              "          [ 56],\n",
              "          [ 67],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [130],\n",
              "          [135],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 90],\n",
              "          [ 59]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[109],\n",
              "          [117],\n",
              "          [121],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 22],\n",
              "          [ 23]],\n",
              "  \n",
              "         [[107],\n",
              "          [114],\n",
              "          [119],\n",
              "          ...,\n",
              "          [ 28],\n",
              "          [ 27],\n",
              "          [ 25]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 92],\n",
              "          [100],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 27],\n",
              "          [ 21]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[251],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [149],\n",
              "          [156],\n",
              "          [163]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [153],\n",
              "          [160],\n",
              "          [161]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [159],\n",
              "          [168],\n",
              "          [151]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[253],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [110],\n",
              "          [102],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[250],\n",
              "          [251],\n",
              "          [251],\n",
              "          ...,\n",
              "          [110],\n",
              "          [106],\n",
              "          [106]],\n",
              "  \n",
              "         [[251],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [115],\n",
              "          [104],\n",
              "          [ 94]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[232],\n",
              "          [234],\n",
              "          [235],\n",
              "          ...,\n",
              "          [234],\n",
              "          [232],\n",
              "          [231]],\n",
              "  \n",
              "         [[233],\n",
              "          [234],\n",
              "          [235],\n",
              "          ...,\n",
              "          [235],\n",
              "          [233],\n",
              "          [232]],\n",
              "  \n",
              "         [[234],\n",
              "          [235],\n",
              "          [236],\n",
              "          ...,\n",
              "          [236],\n",
              "          [234],\n",
              "          [233]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[147],\n",
              "          [150],\n",
              "          [151],\n",
              "          ...,\n",
              "          [151],\n",
              "          [151],\n",
              "          [148]],\n",
              "  \n",
              "         [[127],\n",
              "          [136],\n",
              "          [143],\n",
              "          ...,\n",
              "          [159],\n",
              "          [161],\n",
              "          [168]],\n",
              "  \n",
              "         [[143],\n",
              "          [138],\n",
              "          [131],\n",
              "          ...,\n",
              "          [157],\n",
              "          [159],\n",
              "          [163]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[37],\n",
              "          [41],\n",
              "          [43],\n",
              "          ...,\n",
              "          [48],\n",
              "          [48],\n",
              "          [47]],\n",
              "  \n",
              "         [[36],\n",
              "          [39],\n",
              "          [41],\n",
              "          ...,\n",
              "          [29],\n",
              "          [28],\n",
              "          [31]],\n",
              "  \n",
              "         [[37],\n",
              "          [39],\n",
              "          [41],\n",
              "          ...,\n",
              "          [34],\n",
              "          [29],\n",
              "          [31]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[48],\n",
              "          [47],\n",
              "          [53],\n",
              "          ...,\n",
              "          [19],\n",
              "          [19],\n",
              "          [35]],\n",
              "  \n",
              "         [[57],\n",
              "          [41],\n",
              "          [31],\n",
              "          ...,\n",
              "          [20],\n",
              "          [31],\n",
              "          [42]],\n",
              "  \n",
              "         [[44],\n",
              "          [32],\n",
              "          [33],\n",
              "          ...,\n",
              "          [24],\n",
              "          [26],\n",
              "          [50]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 83],\n",
              "          [ 97],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 71],\n",
              "          [ 60]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [ 96],\n",
              "          [ 87],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 57],\n",
              "          [ 54]],\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 96],\n",
              "          [ 91],\n",
              "          ...,\n",
              "          [ 44],\n",
              "          [ 46],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[129],\n",
              "          [125],\n",
              "          [126],\n",
              "          ...,\n",
              "          [ 98],\n",
              "          [ 95],\n",
              "          [105]],\n",
              "  \n",
              "         [[122],\n",
              "          [118],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 96],\n",
              "          [106]],\n",
              "  \n",
              "         [[116],\n",
              "          [112],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 97],\n",
              "          [104],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[102],\n",
              "          [105],\n",
              "          [108],\n",
              "          ...,\n",
              "          [191],\n",
              "          [ 67],\n",
              "          [111]],\n",
              "  \n",
              "         [[126],\n",
              "          [133],\n",
              "          [137],\n",
              "          ...,\n",
              "          [193],\n",
              "          [ 68],\n",
              "          [113]],\n",
              "  \n",
              "         [[147],\n",
              "          [157],\n",
              "          [162],\n",
              "          ...,\n",
              "          [194],\n",
              "          [ 69],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[209],\n",
              "          [205],\n",
              "          [209],\n",
              "          ...,\n",
              "          [162],\n",
              "          [ 47],\n",
              "          [104]],\n",
              "  \n",
              "         [[201],\n",
              "          [212],\n",
              "          [220],\n",
              "          ...,\n",
              "          [199],\n",
              "          [ 47],\n",
              "          [111]],\n",
              "  \n",
              "         [[236],\n",
              "          [236],\n",
              "          [237],\n",
              "          ...,\n",
              "          [160],\n",
              "          [ 96],\n",
              "          [103]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[147],\n",
              "          [152],\n",
              "          [156],\n",
              "          ...,\n",
              "          [201],\n",
              "          [201],\n",
              "          [202]],\n",
              "  \n",
              "         [[146],\n",
              "          [147],\n",
              "          [152],\n",
              "          ...,\n",
              "          [201],\n",
              "          [186],\n",
              "          [198]],\n",
              "  \n",
              "         [[145],\n",
              "          [148],\n",
              "          [152],\n",
              "          ...,\n",
              "          [198],\n",
              "          [194],\n",
              "          [200]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[135],\n",
              "          [120],\n",
              "          [125],\n",
              "          ...,\n",
              "          [ 87],\n",
              "          [ 86],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 67],\n",
              "          [ 69],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 86],\n",
              "          [ 89]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 68],\n",
              "          [ 67],\n",
              "          ...,\n",
              "          [103],\n",
              "          [ 91],\n",
              "          [ 87]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[215],\n",
              "          [233],\n",
              "          [254],\n",
              "          ...,\n",
              "          [165],\n",
              "          [164],\n",
              "          [182]],\n",
              "  \n",
              "         [[205],\n",
              "          [226],\n",
              "          [253],\n",
              "          ...,\n",
              "          [161],\n",
              "          [168],\n",
              "          [186]],\n",
              "  \n",
              "         [[175],\n",
              "          [208],\n",
              "          [254],\n",
              "          ...,\n",
              "          [161],\n",
              "          [175],\n",
              "          [178]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[250],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[250],\n",
              "          [253],\n",
              "          [253],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[252],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 64],\n",
              "          [ 71],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [133],\n",
              "          [132],\n",
              "          [132]],\n",
              "  \n",
              "         [[ 65],\n",
              "          [ 73],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [134],\n",
              "          [134],\n",
              "          [126]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 73],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [127],\n",
              "          [125],\n",
              "          [133]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[169],\n",
              "          [170],\n",
              "          [169],\n",
              "          ...,\n",
              "          [137],\n",
              "          [137],\n",
              "          [121]],\n",
              "  \n",
              "         [[175],\n",
              "          [167],\n",
              "          [171],\n",
              "          ...,\n",
              "          [151],\n",
              "          [148],\n",
              "          [138]],\n",
              "  \n",
              "         [[219],\n",
              "          [177],\n",
              "          [190],\n",
              "          ...,\n",
              "          [152],\n",
              "          [151],\n",
              "          [145]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 46],\n",
              "          [ 46],\n",
              "          [ 48],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 51],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 50],\n",
              "          [ 45],\n",
              "          ...,\n",
              "          [ 50],\n",
              "          [ 53],\n",
              "          [ 52]],\n",
              "  \n",
              "         [[ 53],\n",
              "          [ 52],\n",
              "          [ 51],\n",
              "          ...,\n",
              "          [ 51],\n",
              "          [ 53],\n",
              "          [ 53]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[132],\n",
              "          [132],\n",
              "          [134],\n",
              "          ...,\n",
              "          [148],\n",
              "          [150],\n",
              "          [151]],\n",
              "  \n",
              "         [[139],\n",
              "          [139],\n",
              "          [138],\n",
              "          ...,\n",
              "          [153],\n",
              "          [151],\n",
              "          [150]],\n",
              "  \n",
              "         [[132],\n",
              "          [136],\n",
              "          [135],\n",
              "          ...,\n",
              "          [152],\n",
              "          [151],\n",
              "          [149]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[105],\n",
              "          [121],\n",
              "          [135],\n",
              "          ...,\n",
              "          [164],\n",
              "          [154],\n",
              "          [148]],\n",
              "  \n",
              "         [[124],\n",
              "          [142],\n",
              "          [152],\n",
              "          ...,\n",
              "          [164],\n",
              "          [156],\n",
              "          [153]],\n",
              "  \n",
              "         [[139],\n",
              "          [149],\n",
              "          [154],\n",
              "          ...,\n",
              "          [150],\n",
              "          [151],\n",
              "          [155]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[124],\n",
              "          [132],\n",
              "          [138],\n",
              "          ...,\n",
              "          [125],\n",
              "          [105],\n",
              "          [ 50]],\n",
              "  \n",
              "         [[132],\n",
              "          [132],\n",
              "          [134],\n",
              "          ...,\n",
              "          [123],\n",
              "          [103],\n",
              "          [ 51]],\n",
              "  \n",
              "         [[123],\n",
              "          [142],\n",
              "          [138],\n",
              "          ...,\n",
              "          [109],\n",
              "          [ 97],\n",
              "          [ 51]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[122],\n",
              "          [128],\n",
              "          [117],\n",
              "          ...,\n",
              "          [100],\n",
              "          [113],\n",
              "          [121]],\n",
              "  \n",
              "         [[133],\n",
              "          [125],\n",
              "          [121],\n",
              "          ...,\n",
              "          [101],\n",
              "          [ 99],\n",
              "          [135]],\n",
              "  \n",
              "         [[171],\n",
              "          [139],\n",
              "          [118],\n",
              "          ...,\n",
              "          [106],\n",
              "          [144],\n",
              "          [121]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 77],\n",
              "          [ 74],\n",
              "          [ 79],\n",
              "          ...,\n",
              "          [103],\n",
              "          [103],\n",
              "          [ 77]],\n",
              "  \n",
              "         [[ 72],\n",
              "          [ 85],\n",
              "          [ 95],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 93],\n",
              "          [ 78]],\n",
              "  \n",
              "         [[ 84],\n",
              "          [ 77],\n",
              "          [ 98],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 76],\n",
              "          [ 77]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [106],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [121],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[107],\n",
              "          [ 42],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [158],\n",
              "          [154],\n",
              "          [152]],\n",
              "  \n",
              "         [[112],\n",
              "          [ 63],\n",
              "          [ 46],\n",
              "          ...,\n",
              "          [142],\n",
              "          [141],\n",
              "          [142]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[133],\n",
              "          [116],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 86],\n",
              "          [ 95],\n",
              "          [101]],\n",
              "  \n",
              "         [[151],\n",
              "          [ 68],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 94],\n",
              "          [101]],\n",
              "  \n",
              "         [[136],\n",
              "          [134],\n",
              "          [131],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [ 96],\n",
              "          [105]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[104],\n",
              "          [113],\n",
              "          [116],\n",
              "          ...,\n",
              "          [135],\n",
              "          [134],\n",
              "          [107]],\n",
              "  \n",
              "         [[ 95],\n",
              "          [113],\n",
              "          [119],\n",
              "          ...,\n",
              "          [132],\n",
              "          [135],\n",
              "          [100]],\n",
              "  \n",
              "         [[ 79],\n",
              "          [104],\n",
              "          [118],\n",
              "          ...,\n",
              "          [130],\n",
              "          [135],\n",
              "          [124]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[121],\n",
              "          [116],\n",
              "          [126],\n",
              "          ...,\n",
              "          [176],\n",
              "          [176],\n",
              "          [166]],\n",
              "  \n",
              "         [[121],\n",
              "          [121],\n",
              "          [121],\n",
              "          ...,\n",
              "          [177],\n",
              "          [180],\n",
              "          [171]],\n",
              "  \n",
              "         [[121],\n",
              "          [117],\n",
              "          [115],\n",
              "          ...,\n",
              "          [175],\n",
              "          [172],\n",
              "          [175]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 50],\n",
              "          [ 77],\n",
              "          [ 84],\n",
              "          ...,\n",
              "          [ 57],\n",
              "          [ 65],\n",
              "          [ 75]],\n",
              "  \n",
              "         [[ 28],\n",
              "          [ 28],\n",
              "          [ 53],\n",
              "          ...,\n",
              "          [ 68],\n",
              "          [ 73],\n",
              "          [ 58]],\n",
              "  \n",
              "         [[ 36],\n",
              "          [ 33],\n",
              "          [ 27],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 80],\n",
              "          [ 44]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[134],\n",
              "          [130],\n",
              "          [125],\n",
              "          ...,\n",
              "          [176],\n",
              "          [190],\n",
              "          [185]],\n",
              "  \n",
              "         [[136],\n",
              "          [130],\n",
              "          [126],\n",
              "          ...,\n",
              "          [173],\n",
              "          [185],\n",
              "          [181]],\n",
              "  \n",
              "         [[137],\n",
              "          [131],\n",
              "          [126],\n",
              "          ...,\n",
              "          [162],\n",
              "          [183],\n",
              "          [180]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[122],\n",
              "          [ 93],\n",
              "          [114],\n",
              "          ...,\n",
              "          [ 90],\n",
              "          [ 95],\n",
              "          [ 99]],\n",
              "  \n",
              "         [[113],\n",
              "          [ 96],\n",
              "          [116],\n",
              "          ...,\n",
              "          [ 99],\n",
              "          [ 99],\n",
              "          [103]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [118],\n",
              "          [122],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [ 89],\n",
              "          [ 89]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 79],\n",
              "          [116],\n",
              "          [125],\n",
              "          ...,\n",
              "          [116],\n",
              "          [142],\n",
              "          [140]],\n",
              "  \n",
              "         [[105],\n",
              "          [117],\n",
              "          [116],\n",
              "          ...,\n",
              "          [115],\n",
              "          [145],\n",
              "          [137]],\n",
              "  \n",
              "         [[ 97],\n",
              "          [107],\n",
              "          [119],\n",
              "          ...,\n",
              "          [129],\n",
              "          [148],\n",
              "          [125]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[250],\n",
              "          [246],\n",
              "          [251],\n",
              "          ...,\n",
              "          [240],\n",
              "          [242],\n",
              "          [239]],\n",
              "  \n",
              "         [[254],\n",
              "          [252],\n",
              "          [252],\n",
              "          ...,\n",
              "          [238],\n",
              "          [241],\n",
              "          [239]],\n",
              "  \n",
              "         [[249],\n",
              "          [243],\n",
              "          [254],\n",
              "          ...,\n",
              "          [238],\n",
              "          [238],\n",
              "          [236]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[172],\n",
              "          [157],\n",
              "          [159],\n",
              "          ...,\n",
              "          [161],\n",
              "          [172],\n",
              "          [172]],\n",
              "  \n",
              "         [[175],\n",
              "          [177],\n",
              "          [154],\n",
              "          ...,\n",
              "          [162],\n",
              "          [172],\n",
              "          [162]],\n",
              "  \n",
              "         [[170],\n",
              "          [167],\n",
              "          [161],\n",
              "          ...,\n",
              "          [158],\n",
              "          [169],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 52],\n",
              "          [ 53],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 39],\n",
              "          [ 37],\n",
              "          [ 27]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 59],\n",
              "          [150],\n",
              "          ...,\n",
              "          [101],\n",
              "          [104],\n",
              "          [ 83]],\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 73],\n",
              "          [128],\n",
              "          ...,\n",
              "          [ 94],\n",
              "          [ 72],\n",
              "          [ 84]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[237],\n",
              "          [237],\n",
              "          [236],\n",
              "          ...,\n",
              "          [ 67],\n",
              "          [ 69],\n",
              "          [ 66]],\n",
              "  \n",
              "         [[237],\n",
              "          [236],\n",
              "          [238],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [ 74],\n",
              "          [ 97]],\n",
              "  \n",
              "         [[238],\n",
              "          [238],\n",
              "          [235],\n",
              "          ...,\n",
              "          [ 75],\n",
              "          [ 74],\n",
              "          [ 69]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[114],\n",
              "          [123],\n",
              "          [125],\n",
              "          ...,\n",
              "          [162],\n",
              "          [153],\n",
              "          [167]],\n",
              "  \n",
              "         [[120],\n",
              "          [122],\n",
              "          [128],\n",
              "          ...,\n",
              "          [168],\n",
              "          [163],\n",
              "          [157]],\n",
              "  \n",
              "         [[125],\n",
              "          [120],\n",
              "          [133],\n",
              "          ...,\n",
              "          [163],\n",
              "          [160],\n",
              "          [144]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 86],\n",
              "          [ 99],\n",
              "          [103],\n",
              "          ...,\n",
              "          [184],\n",
              "          [183],\n",
              "          [171]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 96],\n",
              "          [ 97],\n",
              "          ...,\n",
              "          [176],\n",
              "          [175],\n",
              "          [173]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 88],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [174],\n",
              "          [171],\n",
              "          [171]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[200],\n",
              "          [200],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 88],\n",
              "          [ 85]],\n",
              "  \n",
              "         [[200],\n",
              "          [200],\n",
              "          [201],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 90],\n",
              "          [ 87]],\n",
              "  \n",
              "         [[200],\n",
              "          [200],\n",
              "          [200],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [ 90],\n",
              "          [ 89]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 45],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [133],\n",
              "          [123],\n",
              "          [145]],\n",
              "  \n",
              "         [[ 37],\n",
              "          [ 58],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [150],\n",
              "          [149],\n",
              "          [153]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 40],\n",
              "          [ 50],\n",
              "          ...,\n",
              "          [148],\n",
              "          [160],\n",
              "          [145]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 65],\n",
              "          [ 48],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 37],\n",
              "          [ 27],\n",
              "          [ 28]],\n",
              "  \n",
              "         [[ 60],\n",
              "          [ 48],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 46],\n",
              "          [105],\n",
              "          [109]],\n",
              "  \n",
              "         [[ 61],\n",
              "          [ 55],\n",
              "          [ 49],\n",
              "          ...,\n",
              "          [ 34],\n",
              "          [ 36],\n",
              "          [ 36]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 50],\n",
              "          [ 44],\n",
              "          [ 62],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 92],\n",
              "          [ 69]],\n",
              "  \n",
              "         [[ 44],\n",
              "          [ 58],\n",
              "          [ 58],\n",
              "          ...,\n",
              "          [ 73],\n",
              "          [ 70],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 46],\n",
              "          [ 56],\n",
              "          [ 56],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 73],\n",
              "          [ 78]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 78],\n",
              "          [ 77],\n",
              "          [ 90],\n",
              "          ...,\n",
              "          [134],\n",
              "          [143],\n",
              "          [152]],\n",
              "  \n",
              "         [[ 90],\n",
              "          [ 90],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [138],\n",
              "          [145],\n",
              "          [161]],\n",
              "  \n",
              "         [[102],\n",
              "          [106],\n",
              "          [105],\n",
              "          ...,\n",
              "          [139],\n",
              "          [143],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[141],\n",
              "          [120],\n",
              "          [149],\n",
              "          ...,\n",
              "          [ 76],\n",
              "          [ 79],\n",
              "          [ 73]],\n",
              "  \n",
              "         [[142],\n",
              "          [146],\n",
              "          [151],\n",
              "          ...,\n",
              "          [ 74],\n",
              "          [ 73],\n",
              "          [ 68]],\n",
              "  \n",
              "         [[144],\n",
              "          [138],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 69],\n",
              "          [ 69],\n",
              "          [ 71]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 31],\n",
              "          [ 32],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [210],\n",
              "          [213],\n",
              "          [203]],\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 29],\n",
              "          [ 29],\n",
              "          ...,\n",
              "          [233],\n",
              "          [220],\n",
              "          [212]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 29],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [237],\n",
              "          [231],\n",
              "          [228]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 99],\n",
              "          [101],\n",
              "          [119],\n",
              "          ...,\n",
              "          [193],\n",
              "          [238],\n",
              "          [219]],\n",
              "  \n",
              "         [[ 92],\n",
              "          [106],\n",
              "          [132],\n",
              "          ...,\n",
              "          [228],\n",
              "          [239],\n",
              "          [233]],\n",
              "  \n",
              "         [[104],\n",
              "          [126],\n",
              "          [129],\n",
              "          ...,\n",
              "          [247],\n",
              "          [242],\n",
              "          [234]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 3],\n",
              "          [ 2],\n",
              "          [ 4],\n",
              "          ...,\n",
              "          [11],\n",
              "          [10],\n",
              "          [10]],\n",
              "  \n",
              "         [[ 1],\n",
              "          [ 1],\n",
              "          [ 1],\n",
              "          ...,\n",
              "          [ 6],\n",
              "          [ 6],\n",
              "          [ 7]],\n",
              "  \n",
              "         [[ 2],\n",
              "          [ 6],\n",
              "          [ 3],\n",
              "          ...,\n",
              "          [12],\n",
              "          [14],\n",
              "          [13]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[42],\n",
              "          [45],\n",
              "          [44],\n",
              "          ...,\n",
              "          [51],\n",
              "          [51],\n",
              "          [52]],\n",
              "  \n",
              "         [[37],\n",
              "          [38],\n",
              "          [48],\n",
              "          ...,\n",
              "          [51],\n",
              "          [60],\n",
              "          [50]],\n",
              "  \n",
              "         [[44],\n",
              "          [43],\n",
              "          [31],\n",
              "          ...,\n",
              "          [57],\n",
              "          [50],\n",
              "          [41]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[ 48],\n",
              "          [ 43],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 22],\n",
              "          [ 20],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 45],\n",
              "          [ 39],\n",
              "          [ 41],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 23],\n",
              "          [  8]],\n",
              "  \n",
              "         [[ 48],\n",
              "          [ 42],\n",
              "          [ 42],\n",
              "          ...,\n",
              "          [ 25],\n",
              "          [ 21],\n",
              "          [  2]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[105],\n",
              "          [116],\n",
              "          [122],\n",
              "          ...,\n",
              "          [  0],\n",
              "          [  0],\n",
              "          [  1]],\n",
              "  \n",
              "         [[ 96],\n",
              "          [112],\n",
              "          [120],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]],\n",
              "  \n",
              "         [[113],\n",
              "          [120],\n",
              "          [121],\n",
              "          ...,\n",
              "          [  1],\n",
              "          [  1],\n",
              "          [  1]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[141],\n",
              "          [158],\n",
              "          [151],\n",
              "          ...,\n",
              "          [162],\n",
              "          [166],\n",
              "          [155]],\n",
              "  \n",
              "         [[146],\n",
              "          [152],\n",
              "          [142],\n",
              "          ...,\n",
              "          [161],\n",
              "          [163],\n",
              "          [162]],\n",
              "  \n",
              "         [[145],\n",
              "          [143],\n",
              "          [137],\n",
              "          ...,\n",
              "          [159],\n",
              "          [166],\n",
              "          [152]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[248],\n",
              "          [251],\n",
              "          [241],\n",
              "          ...,\n",
              "          [244],\n",
              "          [240],\n",
              "          [233]],\n",
              "  \n",
              "         [[247],\n",
              "          [249],\n",
              "          [252],\n",
              "          ...,\n",
              "          [248],\n",
              "          [235],\n",
              "          [229]],\n",
              "  \n",
              "         [[245],\n",
              "          [251],\n",
              "          [246],\n",
              "          ...,\n",
              "          [223],\n",
              "          [242],\n",
              "          [239]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 37],\n",
              "          [ 31],\n",
              "          [ 35],\n",
              "          ...,\n",
              "          [ 91],\n",
              "          [108],\n",
              "          [ 98]],\n",
              "  \n",
              "         [[ 41],\n",
              "          [ 34],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [108],\n",
              "          [106]],\n",
              "  \n",
              "         [[ 33],\n",
              "          [ 39],\n",
              "          [ 32],\n",
              "          ...,\n",
              "          [ 93],\n",
              "          [104],\n",
              "          [101]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 87],\n",
              "          [103],\n",
              "          [ 83],\n",
              "          ...,\n",
              "          [ 88],\n",
              "          [ 84],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[ 94],\n",
              "          [104],\n",
              "          [ 89],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [ 72],\n",
              "          [ 80]],\n",
              "  \n",
              "         [[102],\n",
              "          [100],\n",
              "          [ 93],\n",
              "          ...,\n",
              "          [ 72],\n",
              "          [ 72],\n",
              "          [ 78]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[35],\n",
              "          [39],\n",
              "          [44],\n",
              "          ...,\n",
              "          [43],\n",
              "          [41],\n",
              "          [41]],\n",
              "  \n",
              "         [[29],\n",
              "          [35],\n",
              "          [38],\n",
              "          ...,\n",
              "          [42],\n",
              "          [42],\n",
              "          [42]],\n",
              "  \n",
              "         [[25],\n",
              "          [29],\n",
              "          [32],\n",
              "          ...,\n",
              "          [41],\n",
              "          [41],\n",
              "          [41]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[27],\n",
              "          [25],\n",
              "          [28],\n",
              "          ...,\n",
              "          [28],\n",
              "          [29],\n",
              "          [29]],\n",
              "  \n",
              "         [[25],\n",
              "          [28],\n",
              "          [29],\n",
              "          ...,\n",
              "          [25],\n",
              "          [27],\n",
              "          [26]],\n",
              "  \n",
              "         [[26],\n",
              "          [27],\n",
              "          [28],\n",
              "          ...,\n",
              "          [32],\n",
              "          [31],\n",
              "          [31]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[180],\n",
              "          [188],\n",
              "          [232],\n",
              "          ...,\n",
              "          [ 71],\n",
              "          [175],\n",
              "          [ 57]],\n",
              "  \n",
              "         [[157],\n",
              "          [ 70],\n",
              "          [129],\n",
              "          ...,\n",
              "          [ 80],\n",
              "          [114],\n",
              "          [105]],\n",
              "  \n",
              "         [[105],\n",
              "          [ 89],\n",
              "          [147],\n",
              "          ...,\n",
              "          [ 96],\n",
              "          [112],\n",
              "          [116]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 32],\n",
              "          [ 73],\n",
              "          [138],\n",
              "          ...,\n",
              "          [153],\n",
              "          [155],\n",
              "          [143]],\n",
              "  \n",
              "         [[ 74],\n",
              "          [ 87],\n",
              "          [139],\n",
              "          ...,\n",
              "          [143],\n",
              "          [ 77],\n",
              "          [ 71]],\n",
              "  \n",
              "         [[190],\n",
              "          [133],\n",
              "          [115],\n",
              "          ...,\n",
              "          [ 89],\n",
              "          [ 87],\n",
              "          [101]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[43],\n",
              "          [49],\n",
              "          [50],\n",
              "          ...,\n",
              "          [29],\n",
              "          [32],\n",
              "          [27]],\n",
              "  \n",
              "         [[49],\n",
              "          [54],\n",
              "          [58],\n",
              "          ...,\n",
              "          [29],\n",
              "          [29],\n",
              "          [31]],\n",
              "  \n",
              "         [[51],\n",
              "          [56],\n",
              "          [59],\n",
              "          ...,\n",
              "          [30],\n",
              "          [30],\n",
              "          [31]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[57],\n",
              "          [57],\n",
              "          [56],\n",
              "          ...,\n",
              "          [ 0],\n",
              "          [ 0],\n",
              "          [ 0]],\n",
              "  \n",
              "         [[67],\n",
              "          [67],\n",
              "          [70],\n",
              "          ...,\n",
              "          [ 0],\n",
              "          [ 0],\n",
              "          [ 0]],\n",
              "  \n",
              "         [[56],\n",
              "          [61],\n",
              "          [63],\n",
              "          ...,\n",
              "          [ 0],\n",
              "          [ 0],\n",
              "          [ 0]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[ 31],\n",
              "          [ 33],\n",
              "          [ 22],\n",
              "          ...,\n",
              "          [ 85],\n",
              "          [ 85],\n",
              "          [ 39]],\n",
              "  \n",
              "         [[ 40],\n",
              "          [ 51],\n",
              "          [ 33],\n",
              "          ...,\n",
              "          [ 61],\n",
              "          [ 61],\n",
              "          [ 44]],\n",
              "  \n",
              "         [[ 52],\n",
              "          [ 51],\n",
              "          [ 39],\n",
              "          ...,\n",
              "          [ 60],\n",
              "          [ 60],\n",
              "          [ 53]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[159],\n",
              "          [158],\n",
              "          [156],\n",
              "          ...,\n",
              "          [ 10],\n",
              "          [ 20],\n",
              "          [ 14]],\n",
              "  \n",
              "         [[170],\n",
              "          [169],\n",
              "          [155],\n",
              "          ...,\n",
              "          [ 15],\n",
              "          [ 12],\n",
              "          [ 17]],\n",
              "  \n",
              "         [[163],\n",
              "          [154],\n",
              "          [165],\n",
              "          ...,\n",
              "          [ 20],\n",
              "          [ 15],\n",
              "          [ 16]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]],\n",
              "  \n",
              "         [[255],\n",
              "          [255],\n",
              "          [255],\n",
              "          ...,\n",
              "          [255],\n",
              "          [255],\n",
              "          [255]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[160],\n",
              "          [161],\n",
              "          [152],\n",
              "          ...,\n",
              "          [ 81],\n",
              "          [115],\n",
              "          [174]],\n",
              "  \n",
              "         [[160],\n",
              "          [210],\n",
              "          [164],\n",
              "          ...,\n",
              "          [113],\n",
              "          [140],\n",
              "          [206]],\n",
              "  \n",
              "         [[162],\n",
              "          [191],\n",
              "          [160],\n",
              "          ...,\n",
              "          [124],\n",
              "          [136],\n",
              "          [196]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[119],\n",
              "          [118],\n",
              "          [121],\n",
              "          ...,\n",
              "          [189],\n",
              "          [190],\n",
              "          [187]],\n",
              "  \n",
              "         [[130],\n",
              "          [132],\n",
              "          [127],\n",
              "          ...,\n",
              "          [187],\n",
              "          [191],\n",
              "          [191]],\n",
              "  \n",
              "         [[135],\n",
              "          [133],\n",
              "          [131],\n",
              "          ...,\n",
              "          [191],\n",
              "          [193],\n",
              "          [188]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " [array([[[113],\n",
              "          [ 36],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [201],\n",
              "          [199],\n",
              "          [196]],\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 54],\n",
              "          [ 24],\n",
              "          ...,\n",
              "          [201],\n",
              "          [195],\n",
              "          [186]],\n",
              "  \n",
              "         [[ 38],\n",
              "          [ 75],\n",
              "          [ 23],\n",
              "          ...,\n",
              "          [197],\n",
              "          [192],\n",
              "          [178]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 78],\n",
              "          [ 59],\n",
              "          [ 86],\n",
              "          ...,\n",
              "          [ 29],\n",
              "          [ 24],\n",
              "          [ 26]],\n",
              "  \n",
              "         [[ 67],\n",
              "          [ 49],\n",
              "          [ 65],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 29],\n",
              "          [ 21]],\n",
              "  \n",
              "         [[ 99],\n",
              "          [ 92],\n",
              "          [ 37],\n",
              "          ...,\n",
              "          [ 30],\n",
              "          [ 30],\n",
              "          [ 27]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=1>],\n",
              " [array([[[147],\n",
              "          [ 31],\n",
              "          [189],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 35],\n",
              "          [ 31]],\n",
              "  \n",
              "         [[182],\n",
              "          [ 64],\n",
              "          [188],\n",
              "          ...,\n",
              "          [ 40],\n",
              "          [ 36],\n",
              "          [ 34]],\n",
              "  \n",
              "         [[216],\n",
              "          [105],\n",
              "          [176],\n",
              "          ...,\n",
              "          [ 41],\n",
              "          [ 37],\n",
              "          [ 35]],\n",
              "  \n",
              "         ...,\n",
              "  \n",
              "         [[ 35],\n",
              "          [ 33],\n",
              "          [ 61],\n",
              "          ...,\n",
              "          [ 92],\n",
              "          [107],\n",
              "          [ 81]],\n",
              "  \n",
              "         [[ 49],\n",
              "          [ 40],\n",
              "          [ 54],\n",
              "          ...,\n",
              "          [131],\n",
              "          [ 99],\n",
              "          [ 86]],\n",
              "  \n",
              "         [[ 69],\n",
              "          [ 47],\n",
              "          [ 47],\n",
              "          ...,\n",
              "          [124],\n",
              "          [121],\n",
              "          [112]]], dtype=uint8),\n",
              "  <tf.Tensor: shape=(), dtype=int64, numpy=0>],\n",
              " ...]"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Cantidad de imágenes de entrenamiento\n",
        "len(Img_entrena)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFsRAbl4_Zy-",
        "outputId": "bc65eeb4-3feb-4737-9843-10a02702a081"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23262"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = [] # Atributos\n",
        "y = [] # Etiquetas\n",
        "\n",
        "for imagen, etiqueta in Img_entrena:\n",
        "  X.append(imagen)\n",
        "  y.append(etiqueta)"
      ],
      "metadata": {
        "id": "hXKLNJPg_8uj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalización\n",
        "\n",
        "X = np.array(X).astype(float)/255"
      ],
      "metadata": {
        "id": "EUyDEFyAAs3Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J79I0lUPAVep",
        "outputId": "d88070de-8fd2-4ee9-d24d-a2b87fd2b43c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[0.96470588],\n",
              "         [0.54901961],\n",
              "         [0.34117647],\n",
              "         ...,\n",
              "         [0.7372549 ],\n",
              "         [0.70196078],\n",
              "         [0.62352941]],\n",
              "\n",
              "        [[0.79215686],\n",
              "         [0.34509804],\n",
              "         [0.33333333],\n",
              "         ...,\n",
              "         [0.65490196],\n",
              "         [0.64705882],\n",
              "         [0.72156863]],\n",
              "\n",
              "        [[0.47058824],\n",
              "         [0.32941176],\n",
              "         [0.3254902 ],\n",
              "         ...,\n",
              "         [0.65098039],\n",
              "         [0.55686275],\n",
              "         [0.58431373]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.70980392],\n",
              "         [0.74509804],\n",
              "         [0.67058824],\n",
              "         ...,\n",
              "         [0.37647059],\n",
              "         [0.21960784],\n",
              "         [0.39215686]],\n",
              "\n",
              "        [[0.57254902],\n",
              "         [0.64705882],\n",
              "         [0.54117647],\n",
              "         ...,\n",
              "         [0.40784314],\n",
              "         [0.63921569],\n",
              "         [0.50588235]],\n",
              "\n",
              "        [[0.44313725],\n",
              "         [0.42352941],\n",
              "         [0.55294118],\n",
              "         ...,\n",
              "         [0.36078431],\n",
              "         [0.19215686],\n",
              "         [0.27058824]]],\n",
              "\n",
              "\n",
              "       [[[0.64313725],\n",
              "         [0.29411765],\n",
              "         [0.29803922],\n",
              "         ...,\n",
              "         [0.27843137],\n",
              "         [0.29411765],\n",
              "         [0.28627451]],\n",
              "\n",
              "        [[0.32941176],\n",
              "         [0.25490196],\n",
              "         [0.25490196],\n",
              "         ...,\n",
              "         [0.41176471],\n",
              "         [0.36470588],\n",
              "         [0.18039216]],\n",
              "\n",
              "        [[0.32156863],\n",
              "         [0.25882353],\n",
              "         [0.24705882],\n",
              "         ...,\n",
              "         [0.21568627],\n",
              "         [0.21176471],\n",
              "         [0.3372549 ]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.21960784],\n",
              "         [0.29803922],\n",
              "         [0.29803922],\n",
              "         ...,\n",
              "         [0.22352941],\n",
              "         [0.24313725],\n",
              "         [0.20392157]],\n",
              "\n",
              "        [[0.19607843],\n",
              "         [0.27843137],\n",
              "         [0.43137255],\n",
              "         ...,\n",
              "         [0.20392157],\n",
              "         [0.18823529],\n",
              "         [0.22745098]],\n",
              "\n",
              "        [[0.24705882],\n",
              "         [0.31372549],\n",
              "         [0.39607843],\n",
              "         ...,\n",
              "         [0.2       ],\n",
              "         [0.21176471],\n",
              "         [0.27843137]]],\n",
              "\n",
              "\n",
              "       [[[0.72941176],\n",
              "         [0.81568627],\n",
              "         [0.74509804],\n",
              "         ...,\n",
              "         [0.30980392],\n",
              "         [0.31372549],\n",
              "         [0.30980392]],\n",
              "\n",
              "        [[0.91372549],\n",
              "         [0.85882353],\n",
              "         [0.82352941],\n",
              "         ...,\n",
              "         [0.29411765],\n",
              "         [0.29803922],\n",
              "         [0.30196078]],\n",
              "\n",
              "        [[0.82745098],\n",
              "         [0.74509804],\n",
              "         [0.69411765],\n",
              "         ...,\n",
              "         [0.29411765],\n",
              "         [0.29803922],\n",
              "         [0.28235294]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.47843137],\n",
              "         [0.38823529],\n",
              "         [0.22745098],\n",
              "         ...,\n",
              "         [0.83137255],\n",
              "         [0.84705882],\n",
              "         [0.89803922]],\n",
              "\n",
              "        [[0.4       ],\n",
              "         [0.42352941],\n",
              "         [0.31764706],\n",
              "         ...,\n",
              "         [0.8       ],\n",
              "         [0.83137255],\n",
              "         [0.89019608]],\n",
              "\n",
              "        [[0.5254902 ],\n",
              "         [0.4       ],\n",
              "         [0.28627451],\n",
              "         ...,\n",
              "         [0.78823529],\n",
              "         [0.82745098],\n",
              "         [0.87058824]]],\n",
              "\n",
              "\n",
              "       ...,\n",
              "\n",
              "\n",
              "       [[[0.38823529],\n",
              "         [0.51372549],\n",
              "         [0.5254902 ],\n",
              "         ...,\n",
              "         [0.52941176],\n",
              "         [0.60784314],\n",
              "         [0.60784314]],\n",
              "\n",
              "        [[0.36078431],\n",
              "         [0.5254902 ],\n",
              "         [0.54117647],\n",
              "         ...,\n",
              "         [0.5254902 ],\n",
              "         [0.62352941],\n",
              "         [0.61176471]],\n",
              "\n",
              "        [[0.3254902 ],\n",
              "         [0.5254902 ],\n",
              "         [0.54117647],\n",
              "         ...,\n",
              "         [0.50980392],\n",
              "         [0.59215686],\n",
              "         [0.61176471]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.74117647],\n",
              "         [0.74117647],\n",
              "         [0.59215686],\n",
              "         ...,\n",
              "         [0.46666667],\n",
              "         [0.45490196],\n",
              "         [0.43529412]],\n",
              "\n",
              "        [[0.7254902 ],\n",
              "         [0.76078431],\n",
              "         [0.76470588],\n",
              "         ...,\n",
              "         [0.44313725],\n",
              "         [0.44705882],\n",
              "         [0.43137255]],\n",
              "\n",
              "        [[0.61176471],\n",
              "         [0.73333333],\n",
              "         [0.77647059],\n",
              "         ...,\n",
              "         [0.45882353],\n",
              "         [0.44705882],\n",
              "         [0.42352941]]],\n",
              "\n",
              "\n",
              "       [[[0.18039216],\n",
              "         [0.19215686],\n",
              "         [0.14901961],\n",
              "         ...,\n",
              "         [0.61176471],\n",
              "         [0.60784314],\n",
              "         [0.61568627]],\n",
              "\n",
              "        [[0.16862745],\n",
              "         [0.19607843],\n",
              "         [0.20392157],\n",
              "         ...,\n",
              "         [0.60392157],\n",
              "         [0.60784314],\n",
              "         [0.61960784]],\n",
              "\n",
              "        [[0.20392157],\n",
              "         [0.1372549 ],\n",
              "         [0.16078431],\n",
              "         ...,\n",
              "         [0.60392157],\n",
              "         [0.61176471],\n",
              "         [0.61960784]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.14117647],\n",
              "         [0.17254902],\n",
              "         [0.23529412],\n",
              "         ...,\n",
              "         [0.42352941],\n",
              "         [0.37647059],\n",
              "         [0.42745098]],\n",
              "\n",
              "        [[0.20784314],\n",
              "         [0.10196078],\n",
              "         [0.1372549 ],\n",
              "         ...,\n",
              "         [0.39607843],\n",
              "         [0.41960784],\n",
              "         [0.38431373]],\n",
              "\n",
              "        [[0.15294118],\n",
              "         [0.15294118],\n",
              "         [0.15686275],\n",
              "         ...,\n",
              "         [0.38431373],\n",
              "         [0.42352941],\n",
              "         [0.37647059]]],\n",
              "\n",
              "\n",
              "       [[[0.45490196],\n",
              "         [0.46666667],\n",
              "         [0.45490196],\n",
              "         ...,\n",
              "         [0.39215686],\n",
              "         [0.39607843],\n",
              "         [0.38823529]],\n",
              "\n",
              "        [[0.49019608],\n",
              "         [0.50196078],\n",
              "         [0.48235294],\n",
              "         ...,\n",
              "         [0.40784314],\n",
              "         [0.39607843],\n",
              "         [0.39215686]],\n",
              "\n",
              "        [[0.4745098 ],\n",
              "         [0.4745098 ],\n",
              "         [0.47843137],\n",
              "         ...,\n",
              "         [0.43137255],\n",
              "         [0.42352941],\n",
              "         [0.37647059]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[0.37254902],\n",
              "         [0.38039216],\n",
              "         [0.37647059],\n",
              "         ...,\n",
              "         [0.60784314],\n",
              "         [0.60784314],\n",
              "         [0.59607843]],\n",
              "\n",
              "        [[0.36862745],\n",
              "         [0.37647059],\n",
              "         [0.38823529],\n",
              "         ...,\n",
              "         [0.60784314],\n",
              "         [0.60784314],\n",
              "         [0.60784314]],\n",
              "\n",
              "        [[0.36862745],\n",
              "         [0.37647059],\n",
              "         [0.37647059],\n",
              "         ...,\n",
              "         [0.60392157],\n",
              "         [0.60392157],\n",
              "         [0.60784314]]]])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = np.array(y)"
      ],
      "metadata": {
        "id": "rV1b_shABWA6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tjOVeqggAWNN",
        "outputId": "d8176151-c067-40b1-a9de-8a52d5475cb6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, ..., 0, 1, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KvYK9kIGBePh",
        "outputId": "8ff9bc99-9841-4052-9bb0-07d73eb6a0df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(23262, 80, 80, 1)"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Paso 4: Selección y entrenamiento del modelo"
      ],
      "metadata": {
        "id": "HAtIzb0-eT_Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Arquitectura del modelo\n",
        "\n",
        "modelo = tf.keras.models.Sequential([\n",
        "    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(80, 80, 1)),\n",
        "    tf.keras.layers.MaxPooling2D(2,2),\n",
        "    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),\n",
        "    tf.keras.layers.MaxPooling2D(2, 2),\n",
        "\n",
        "    tf.keras.layers.Flatten(),\n",
        "    tf.keras.layers.Dense(100, activation='relu'),\n",
        "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
        "])\n"
      ],
      "metadata": {
        "id": "2dMhN9ppBgR_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualización de arquitectura del modelo\n",
        "modelo.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "Xs5I0ZW_EZC_",
        "outputId": "3fe95dc1-347a-4e2a-d8ba-b0eec5c07667"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_5\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_5\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_18 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m78\u001b[0m, \u001b[38;5;34m78\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │             \u001b[38;5;34m320\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_18 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m39\u001b[0m, \u001b[38;5;34m39\u001b[0m, \u001b[38;5;34m32\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_19 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │          \u001b[38;5;34m18,496\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_19 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m18\u001b[0m, \u001b[38;5;34m64\u001b[0m)          │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_20 (\u001b[38;5;33mConv2D\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │          \u001b[38;5;34m73,856\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_20 (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m8\u001b[0m, \u001b[38;5;34m128\u001b[0m)           │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_6 (\u001b[38;5;33mFlatten\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8192\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_12 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)                 │         \u001b[38;5;34m819,300\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_13 (\u001b[38;5;33mDense\u001b[0m)                     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │             \u001b[38;5;34m101\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">78</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">78</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_18 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">39</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">39</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │          <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">18</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)          │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv2d_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │          <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling2d_20 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)           │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ flatten_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8192</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_12 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">819,300</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_13 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">101</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m912,073\u001b[0m (3.48 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">912,073</span> (3.48 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m912,073\u001b[0m (3.48 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">912,073</span> (3.48 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Compilación del modelo\n",
        "modelo.compile(optimizer='adam',\n",
        "                loss='binary_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "9DsMP6cXESeZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = modelo.fit(X, y, epochs=10,validation_data=(X, y))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wThgbg27Flk-",
        "outputId": "b5e40131-9fc1-4c22-850c-2d8986340ccd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m281s\u001b[0m 384ms/step - accuracy: 0.5881 - loss: 0.6572 - val_accuracy: 0.7777 - val_loss: 0.4729\n",
            "Epoch 2/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m319s\u001b[0m 381ms/step - accuracy: 0.7720 - loss: 0.4768 - val_accuracy: 0.8243 - val_loss: 0.3902\n",
            "Epoch 3/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m322s\u001b[0m 380ms/step - accuracy: 0.8155 - loss: 0.3994 - val_accuracy: 0.8447 - val_loss: 0.3458\n",
            "Epoch 4/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 382ms/step - accuracy: 0.8548 - loss: 0.3377 - val_accuracy: 0.8764 - val_loss: 0.2859\n",
            "Epoch 5/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 382ms/step - accuracy: 0.8744 - loss: 0.2915 - val_accuracy: 0.9055 - val_loss: 0.2401\n",
            "Epoch 6/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m322s\u001b[0m 382ms/step - accuracy: 0.8955 - loss: 0.2511 - val_accuracy: 0.9261 - val_loss: 0.1915\n",
            "Epoch 7/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m321s\u001b[0m 381ms/step - accuracy: 0.9150 - loss: 0.1971 - val_accuracy: 0.9498 - val_loss: 0.1403\n",
            "Epoch 8/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m276s\u001b[0m 380ms/step - accuracy: 0.9441 - loss: 0.1436 - val_accuracy: 0.9608 - val_loss: 0.1080\n",
            "Epoch 9/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m324s\u001b[0m 382ms/step - accuracy: 0.9597 - loss: 0.1059 - val_accuracy: 0.9749 - val_loss: 0.0725\n",
            "Epoch 10/10\n",
            "\u001b[1m727/727\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m283s\u001b[0m 389ms/step - accuracy: 0.9738 - loss: 0.0728 - val_accuracy: 0.9878 - val_loss: 0.0464\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación del modelo\n",
        "plt.plot(history.history['accuracy'], label='accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label = 'val_accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.ylim([0.7, 1.1])\n",
        "plt.legend(loc='lower right')\n",
        "\n",
        "test_loss, test_acc = modelo.evaluate(X, y, verbose=2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "UZElOlI5Gybb",
        "outputId": "3a5394d5-e9c4-4371-a9b0-cb844f864c13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "727/727 - 58s - 79ms/step - accuracy: 0.9878 - loss: 0.0464\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAG2CAYAAACXuTmvAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAABn5UlEQVR4nO3deVxVdf7H8ddlXwREQRAFxH0JcEERs80s0nTSyi1za5tmso1pTMt1mrJlMpuy/FWalZZLiy2aZTRWKu7ikuKuLAKCC6us9/7+uHqNNBNFDnDfz8fjPqbzvd9z+Fxpum/P+S4mi8ViQURERMSOOBhdgIiIiEh1UwASERERu6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSARERExO4oAImIiIjdUQASERERu2NoAPr555/p378/QUFBmEwmli5detH+6enp3HPPPbRu3RoHBweeeOKJC/ZbsmQJbdu2xc3NjfDwcJYvX171xYuIiEitZWgAKigoIDIyklmzZl1S/+LiYvz9/Zk4cSKRkZEX7LN27VqGDRvG/fffz9atWxkwYAADBgxg586dVVm6iIiI1GKmmrIZqslk4osvvmDAgAGX1P/GG2+kY8eOzJw5s0L7kCFDKCgo4JtvvrG1de/enY4dOzJ79uwqrFhERERqKyejC6hqCQkJxMXFVWiLjY296OO14uJiiouLbcdms5kTJ07QsGFDTCbT1SpVREREqpDFYiEvL4+goCAcHC7+kKvOBaCMjAwCAgIqtAUEBJCRkfGH50yfPp1p06Zd7dJERESkGqSkpNC0adOL9qlzAehyTJgwocJdo5ycHEJCQkhJScHb29vAykRERORS5ebmEhwcjJeX15/2rXMBKDAwkMzMzAptmZmZBAYG/uE5rq6uuLq6ntfu7e2tACQiIlLLXMrwlTq3DlBMTAzx8fEV2lauXElMTIxBFYmIiEhNY+gdoPz8fPbv3287PnToEImJiTRo0ICQkBAmTJhAWloaH374oa1PYmKi7dysrCwSExNxcXGhffv2ADz++OPccMMNvPrqq9x+++0sXLiQTZs28c4771TrZxMREZGay9Bp8KtWreKmm246r33UqFHMmzeP0aNHc/jwYVatWmV770K3tUJDQzl8+LDteMmSJUycOJHDhw/TqlUrXn75Zfr27XvJdeXm5uLj40NOTo4egYmIiNQSlfn+rjHrANUkCkAiIiK1T2W+v+vcGCARERGRP6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSARERExO4oAImIiIjdUQASERERu6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSARERExO4oAImIiIjdUQASERERu6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSARERExO4oAImIiIjdUQASERERu6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSARERExO4oAImIiIjdUQASERERu6MAJCIiInZHAUhERETsjqEB6Oeff6Z///4EBQVhMplYunTpn56zatUqOnfujKurKy1btmTevHkV3p86dSomk6nCq23btlfnA4iIiEitZGgAKigoIDIyklmzZl1S/0OHDnH77bdz0003kZiYyBNPPMEDDzzAd999V6Ffhw4dSE9Pt71Wr159NcoXERGRWsrJyB/ep08f+vTpc8n9Z8+eTVhYGK+++ioA7dq1Y/Xq1bz22mvExsba+jk5OREYGFjl9YqIiEjdUKvGACUkJNC7d+8KbbGxsSQkJFRo27dvH0FBQTRv3pzhw4eTnJx80esWFxeTm5tb4SUiIiJ1V60KQBkZGQQEBFRoCwgIIDc3l9OnTwMQHR3NvHnzWLFiBW+//TaHDh3iuuuuIy8v7w+vO336dHx8fGyv4ODgq/o5RERExFi1KgBdij59+jBo0CAiIiKIjY1l+fLlnDp1isWLF//hORMmTCAnJ8f2SklJqcaKRUREpLoZOgaosgIDA8nMzKzQlpmZibe3N+7u7hc8p379+rRu3Zr9+/f/4XVdXV1xdXWt0lpFRESk5qpVd4BiYmKIj4+v0LZy5UpiYmL+8Jz8/HwOHDhA48aNr3Z5IiIiUksYGoDy8/NJTEwkMTERsE5zT0xMtA1anjBhAiNHjrT1f/jhhzl48CDjxo0jKSmJt956i8WLF/Pkk0/a+jz11FP89NNPHD58mLVr1zJw4EAcHR0ZNmxYtX42ERERqbkMfQS2adMmbrrpJttxXFwcAKNGjWLevHmkp6dXmMEVFhbGsmXLePLJJ3n99ddp2rQp7733XoUp8KmpqQwbNozjx4/j7+9Pz549WbduHf7+/tX3wURERKRGM1ksFovRRdQ0ubm5+Pj4kJOTg7e3t9HliIiIyCWozPd3rRoDJCIiIlIVFIBERETE7igAiYiIiN1RABIRERG7owAkIiIidkcBSEREROyOApCIiIjYHQUgERERsTsKQCIiImJ3FIBERETE7igAiYiIiN1RABIRERG7owAkIiIidkcBSEREROyOApCIiIjYHQUgERERsTsKQCIiImJ3FIBERETE7igAiYiIiN1RABIRERG7owAkIiIidkcBSEREROyOApCIiIjYHQUgERERsTsKQCIiImJ3FIBERETE7igAiYiIiN1RABIRERG7owAkIiIidkcBSEREROyOApCIiIjYHQUgERERsTsKQCIiImJ3FIBERETE7igAiYiIiN0xNAD9/PPP9O/fn6CgIEwmE0uXLv3Tc1atWkXnzp1xdXWlZcuWzJs377w+s2bNolmzZri5uREdHc2GDRuqvngRERGptQwNQAUFBURGRjJr1qxL6n/o0CFuv/12brrpJhITE3niiSd44IEH+O6772x9Fi1aRFxcHFOmTGHLli1ERkYSGxvLsWPHrtbHEBERkVrGZLFYLEYXAWAymfjiiy8YMGDAH/Z5+umnWbZsGTt37rS1DR06lFOnTrFixQoAoqOj6dq1K2+++SYAZrOZ4OBgHn30UcaPH39JteTm5uLj40NOTg7e3t6X/6FERESk2lTm+7tWjQFKSEigd+/eFdpiY2NJSEgAoKSkhM2bN1fo4+DgQO/evW19RERERJyMLqAyMjIyCAgIqNAWEBBAbm4up0+f5uTJk5SXl1+wT1JS0h9et7i4mOLiYttxbm5u1RYuIiIiNUqtugN0tUyfPh0fHx/bKzg42OiSRERE5CqqVQEoMDCQzMzMCm2ZmZl4e3vj7u6On58fjo6OF+wTGBj4h9edMGECOTk5tldKSspVqV9ERERqhloVgGJiYoiPj6/QtnLlSmJiYgBwcXGhS5cuFfqYzWbi4+NtfS7E1dUVb2/vCi8RERGpuwwNQPn5+SQmJpKYmAhYp7knJiaSnJwMWO/MjBw50tb/4Ycf5uDBg4wbN46kpCTeeustFi9ezJNPPmnrExcXx7vvvssHH3zA7t27+dvf/kZBQQFjxoyp1s8mIiIiNZehg6A3bdrETTfdZDuOi4sDYNSoUcybN4/09HRbGAIICwtj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HeVkYSlN6rvTu935yw2IiBjldGk57Sd/Z8jP3vWvWDxcLv2rsaCggLi4OCIiIsjPz2fy5MkMHDiQxMRECgsLueGGG2jSpAlfffUVgYGBbNmyBbPZDMCyZcsYOHAgzz77LB9++CElJSUsX7680jWPHz+eV199lU6dOuHm5kZRURFdunTh6aefxtvbm2XLljFixAhatGhhGzIyYcIE3n33XV577TV69uxJenq6beztAw88wNixY3n11VdtS8jMnz+fJk2a0KtXr0rXV1MZHoCGDBlCVlYWkydPJiMjg44dO7JixQrbwOjk5OTz5vzv2bOH1atX8/333593PUdHR7Zv384HH3zAqVOnCAoK4tZbb+W5557TWkBnWCwW5p3Z9X1kTKimvouIXKa77rqrwvHcuXPx9/dn165drF27lqysLDZu3EiDBg0AaNmypa3v888/z9ChQyuMQY2MjKx0DU888QR33nlnhbannnrK9s+PPvoo3333HYsXL6Zbt27k5eXx+uuv8+abbzJq1CgAWrRoQc+ePQG48847GTt2LF9++SWDBw8GYN68eYwePbpOrdVkeAACGDt27Hm3285atWrVeW1t2rT5w9uU7u7ufPedMX9zqC02Hj7JrvRc3JwdGKKp7yJSw7g7O7LrX8bcsXd3Pn+m8MXs27ePyZMns379erKzs213d5KTk0lMTKRTp0628PN7iYmJPPjgg1dcc1RUVIXj8vJyXnjhBRYvXkxaWholJSUUFxfj4eEBwO7duykuLr7gpCAANzc3RowYwdy5cxk8eDBbtmxh586dfPXVV1dca01SIwKQVK95a60LHw7s1JT6Hpr6LiI1i8lkqtRjKCP179+f0NBQ3n33XYKCgjCbzVxzzTWUlJT86bYef/a+yWQ67y/7Fxrk/Pt18F555RVef/11Zs6cSXh4OJ6enjzxxBO2XRQuZbuRBx54gI4dO5Kamsr7779Pr169CA0N/dPzahM9+7AzaadO892v1ll3ozX1XUTksh0/fpw9e/YwceJEbr75Ztq1a8fJkydt70dERJCYmMiJEycueH5ERMRFBxX7+/uTnp5uO963bx+FhYV/WteaNWu44447uPfee4mMjKR58+bs3bvX9n6rVq1wd3e/6M8ODw8nKiqKd999l48//pj77rvvT39ubaMAZGfOTn3v0aIhbQK9jC5HRKTW8vX1pWHDhrzzzjvs37+fH3/8kbi4ONv7w4YNIzAwkAEDBrBmzRoOHjzIZ599ZtvpYMqUKXzyySdMmTKF3bt3s2PHDl566SXb+b169eLNN99k69atbNq0iYcffhhnZ+c/ratVq1asXLmStWvXsnv3bv76179WWG7Gzc2Np59+mnHjxvHhhx9y4MAB1q1bd96iwg888AAvvvgiFoulwuy0ukIByI4UlZbzyYazU9+bGVuMiEgt5+DgwMKFC9m8eTPXXHMNTz75JK+88ortfRcXF77//nsaNWpE3759CQ8P58UXX7TtSHDjjTeyZMkSvvrqKzp27EivXr3YsGGD7fxXX32V4OBgrrvuOu655x6eeuop2ziei5k4cSKdO3cmNjaWG2+80RbCfmvSpEn84x//YPLkybRr144hQ4Zw7NixCn2GDRuGk5MTw4YNu6Jd12sqk6Wyix7YgdzcXHx8fMjJyalTawIt2pjM05/toKmvOz/98yYcHerOaH4Rqb2Kioo4dOgQYWFhdfKLtrY6fPgwLVq0YOPGjXTu3Nnocmwu9u9LZb6/a8coM7li1l3fDwMwKqaZwo+IiFxQaWkpx48fZ+LEiXTv3r1GhZ+qpEdgdmL9oRMkZeTh7uzI4ChNfRcRkQtbs2YNjRs3ZuPGjcyePdvocq4a3QGyE2cXPryzcxN8PP58EJ2IiNinG2+8sdJbgtRGugNkB1JPFvL9Luuu7xr8LCIiogBkFz5adwSzBXq29KNVgKa+i4iIKADVcadLylm4IQXQ3R8REZGzFIDquKWJaeScLiWkgQc3tdWu7yIiIqAAVKf9ftd3TX0XERGxUgCqwxIOHmdPZh4eLo4M0tR3ERERGwWgOuzs3Z+7OjfFx11T30VEapJmzZoxc+ZMo8uwWwpAdVTKiUJ+2G3d/G5Uj1CDqxEREalZFIDqqLNT369r5UfLRpr6LiIiVae8vByz2Wx0GVdEAagOKiwpY+GZXd/HXNvM2GJERCrLYoGSAmNel7gC8jvvvENQUNB5IeCOO+7gvvvu48CBA9xxxx0EBARQr149unbtyg8//HDZfyQzZswgPDwcT09PgoOD+fvf/05+fn6FPmvWrOHGG2/Ew8MDX19fYmNjOXnyJABms5mXX36Zli1b4urqSkhICM8//zwAq1atwmQycerUKdu1EhMTMZlMHD58GIB58+ZRv359vvrqK9q3b4+rqyvJycls3LiRW265BT8/P3x8fLjhhhvYsmVLhbpOnTrFX//6VwICAnBzc+Oaa67hm2++oaCgAG9vbz799NMK/ZcuXYqnpyd5eXmX/ed1KbQVRh30xdY0covKCG3owY2tNfVdRGqZ0kJ4IciYn/3MUXDx/NNugwYN4tFHH+V///sfN998MwAnTpxgxYoVLF++nPz8fPr27cvzzz+Pq6srH374If3792fPnj2EhIRUuiwHBwf++9//EhYWxsGDB/n73//OuHHjeOuttwBrYLn55pu57777eP3113FycuJ///sf5eXlAEyYMIF3332X1157jZ49e5Kenk5SUlKlaigsLOSll17ivffeo2HDhjRq1IiDBw8yatQo3njjDSwWC6+++ip9+/Zl3759eHl5YTab6dOnD3l5ecyfP58WLVqwa9cuHB0d8fT0ZOjQobz//vvcfffdtp9z9tjL6+o+vVAAqmN+O/V9VEwzHDT1XUSkyvn6+tKnTx8+/vhjWwD69NNP8fPz46abbsLBwYHIyEhb/+eee44vvviCr776irFjx1b65z3xxBO2f27WrBn//ve/efjhh20B6OWXXyYqKsp2DNChQwcA8vLyeP3113nzzTcZNWoUAC1atKBnz56VqqG0tJS33nqrwufq1atXhT7vvPMO9evX56effqJfv3788MMPbNiwgd27d9O6dWsAmjdvbuv/wAMP0KNHD9LT02ncuDHHjh1j+fLlV3S37FIpANUxaw8cZ9+xfDxdHLk7qqnR5YiIVJ6zh/VOjFE/+xINHz6cBx98kLfeegtXV1cWLFjA0KFDcXBwID8/n6lTp7Js2TLS09MpKyvj9OnTJCcnX1ZZP/zwA9OnTycpKYnc3FzKysooKiqisLAQDw8PEhMTGTRo0AXP3b17N8XFxbagdrlcXFyIiIio0JaZmcnEiRNZtWoVx44do7y8nMLCQtvnTExMpGnTprbw83vdunWjQ4cOfPDBB4wfP5758+cTGhrK9ddff0W1XgqNAapj3j9z9+fuLk3xdtPUdxGphUwm62MoI16mS79r3r9/fywWC8uWLSMlJYVffvmF4cOHA/DUU0/xxRdf8MILL/DLL7+QmJhIeHg4JSUllf7jOHz4MP369SMiIoLPPvuMzZs3M2vWLADb9dzd3f/w/Iu9B9bHa0CFHeBLS0sveB3T7/58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kUceYefOnaxevdroUuxSSkoKjz/+OCtXrqwR29WI9S8FUVFRvPDCCwB06tSJnTt3Mnv2bAUgAyxevJgFCxbw8ccf06FDBxITE3niiScICgrS7+MKKABVAz8/PxwdHcnMzKzQnpmZSWBgoEFVCcDYsWP55ptv+Pnnn2natKnR5dilzZs3c+zYMTp37mxrKy8v5+eff+bNN9+kuLgYR0dHAyu0P40bN6Z9+/YV2tq1a8dnn31mUEX27Z///Cfjx49n6NChAISHh3PkyBGmT5+uAHQFNAaoGri4uNClSxfi4+NtbWazmfj4eGJiYgyszH5ZLBbGjh3LF198wY8//khYWJjRJdmtm2++mR07dpCYmGh7RUVFMXz4cBITExV+DHDttdeetyzE3r17CQ0NNagi+1ZYWHjepuCOjo6YzWaDKqobdAeomsTFxTFq1CiioqLo1q0bM2fOpKCggDFjxhhdml165JFH+Pjjj/nyyy/x8vIiIyMDAB8fH9zd3Q2uzr54eXmdN/bK09OThg0bakyWQZ588kl69OjBCy+8wODBg9mwYQPvvPMO77zzjtGl2aX+/fvz/PPPExISQocOHdi6dSszZszgvvvuM7q0Wk3T4KvRm2++ySuvvEJGRgYdO3bkv//9L9HR0UaXZZdMJtMF299//31Gjx5dvcXIeW688UZNgzfYN998w4QJE9i3bx9hYWHExcXx4IMPGl2WXcrLy2PSpEl88cUXHDt2jKCgIIYNG8bkyZNxcXExurxaSwFIRERE7I7GAImIiIjdUQASERERu6MAJCIiInZHAUhERETsjgKQiIiI2B0FIBEREbE7CkAiIiJidxSAREQugclkYunSpUaXISJVRAFIRGq80aNHYzKZznvddtttRpcmIrWU9gITkVrhtttu4/3336/Q5urqalA1IlLb6Q6QiNQKrq6uBAYGVnj5+voC1sdTb7/9Nn369MHd3Z3mzZvz6aefVjh/x44d9OrVC3d3dxo2bMhDDz1Efn5+hT5z586lQ4cOuLq60rhxY8aOHVvh/ezsbAYOHIiHhwetWrXiq6++urofWkSuGgUgEakTJk2axF133cW2bdsYPnw4Q4cOZffu3QAUFBQQGxuLr68vGzduZMmSJfzwww8VAs7bb7/NI488wkMPPcSOHTv46quvaNmyZYWfMW3aNAYPHsz27dvp27cvw4cP58SJE9X6OUWkilhERGq4UaNGWRwdHS2enp4VXs8//7zFYrFYAMvDDz9c4Zzo6GjL3/72N4vFYrG88847Fl9fX0t+fr7t/WXLllkcHBwsGRkZFovFYgkKCrI8++yzf1gDYJk4caLtOD8/3wJYvv322yr7nCJSfTQGSERqhZtuuom33367QluDBg1s/xwTE1PhvZiYGBITEwHYvXs3kZGReHp62t6/9tprMZvN7NmzB5PJxNGjR7n55psvWkNERITtnz09PfH29ubYsWOX+5FExEAKQCJSK3h6ep73SKqquLu7X1I/Z2fnCscmkwmz2Xw1ShKRq0xjgESkTli3bt15x+3atQOgXbt2bNu2jYKCAtv7a9aswcHBgTZt2uDl5UWzZs2Ij4+v1ppFxDi6AyQitUJxcTEZGRkV2pycnPDz8wNgyZIlREVF0bNnTxYsWMCGDRuYM2cOAMOHD2fKlCmMGjWKqVOnkpWVxaOPPsqIESMICAgAYOrUqTz88MM0atSIPn36kJeXx5o1a3j00Uer94OKSLVQABKRWmHFihU0bty4QlubNm1ISkoCrDO0Fi5cyN///ncaN27MJ598Qvv27QHw8PDgu+++4/HHH6dr1654eHhw1113MWPGDNu1Ro0aRVFREa+99hpPPfUUfn5+3H333dX3AUWkWpksFovF6CJERK6EyWTiiy++YMCAAUaXIiK1hMYAiYiIiN1RABIRERG7ozFAIlLr6Um+iFSW7gCJiIiI3VEAEhEREbujACQiIiJ2RwFIRERE7I4CkIiIiNgdBSARERGxOwpAIiIiYncUgERERMTuKACJiIiI3fl/TSWotSP6xMoAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluación de exactitud de la red neuronal\n",
        "test_loss, test_acc = modelo.evaluate(X, y, verbose=2)\n",
        "print(f\"\\nExactitud del modelo en datos de prueba: {test_acc}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GFmdofDoHMko",
        "outputId": "980e6f97-5f40-456a-a9c4-acd6ee73aa43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "727/727 - 57s - 78ms/step - accuracy: 0.9878 - loss: 0.0464\n",
            "\n",
            "Exactitud del modelo en datos de prueba: 0.9877912402153015\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Aumento de datos\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range = 30,\n",
        "    width_shift_range=0.2,\n",
        "    height_shift_range=0.2,\n",
        "    shear_range=20,\n",
        "    zoom_range=[0.7, 1.4],\n",
        "    horizontal_flip=True,\n",
        "    vertical_flip=True\n",
        "    )\n",
        "datagen.fit(X)\n",
        "\n",
        "plt.figure(figsize=(20,8))\n",
        "\n",
        "for imagen, etiqueta in datagen.flow(X, y, batch_size=10, shuffle=False):\n",
        "  for i in range(10):\n",
        "    plt.subplot(2, 5, i+1)\n",
        "    plt.xticks([])\n",
        "    plt.yticks([])\n",
        "    plt.imshow(imagen[i].reshape(80, 80), cmap=\"gray\")\n",
        "  break\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "id": "YAfNdnNzJ7bK",
        "outputId": "842cda5b-2006-45bc-b662-8ad7f1fa403e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x800 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(X)*.2)\n",
        "print(len(X)*.8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kMqQJB0BMMI-",
        "outputId": "64b43b88-1522-4d40-ed69-3f107847d847"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4652.400000000001\n",
            "18609.600000000002\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Paso 2: Cargar datos\n",
        "X_entrena = X[:18609]\n",
        "X_prueba = X[4652:]\n",
        "\n",
        "y_entrena = y[:18609]\n",
        "y_prueba = y[4652:]"
      ],
      "metadata": {
        "id": "N1GI_qafMQ4W"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Paso 5: Prueba de la red neuronal\n",
        "X_prueba = X_prueba.reshape(-1, 80, 80, 1)"
      ],
      "metadata": {
        "id": "kqpljgfIe_Wg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = modelo.predict(X_prueba)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FQTmcaVXU1On",
        "outputId": "68cacd73-6df1-45ae-e67f-d47140564767"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m582/582\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 89ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Función para visualizar imágenes de prueba\n",
        "def plot_image(i, predictions_array, y_prueba, img):\n",
        "  predictions_array, true_label, img = predictions_array, y_prueba[i], img[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "\n",
        "  plt.imshow(img, cmap=plt.cm.binary)\n",
        "\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "  if predicted_label == true_label:\n",
        "    color = 'blue'\n",
        "  else:\n",
        "    color = 'red'\n",
        "\n",
        "  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n",
        "                                100*np.max(predictions_array),\n",
        "                                class_names[true_label]),\n",
        "                                color=color)\n",
        "\n",
        "def plot_value_array(i, predictions_array, true_label):\n",
        "  predictions_array, true_label = predictions_array, true_label[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks(range(2))\n",
        "  plt.yticks([])\n",
        "  thisplot = plt.bar(range(2), predictions_array, color=\"#777777\")\n",
        "  plt.ylim([0, 1])\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "\n",
        "  thisplot[predicted_label].set_color('red')\n",
        "  thisplot[true_label].set_color('blue')"
      ],
      "metadata": {
        "id": "TveW__qHXjy6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class_names = ['Gato', 'Perro']"
      ],
      "metadata": {
        "id": "bY1OJM5pXrpJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la última imagen\n",
        "predictions[-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XLnwwEVDU1am",
        "outputId": "a0189bb2-f6a8-4d46-b011-fc908dadd67f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.00812304], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la última imagen\n",
        "y_prueba[-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uzOSI7FlXMK5",
        "outputId": "b425007b-b29a-4484-86b1-f87e7e4793a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la última imagen\n",
        "i = -1\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "JI0gz1bvXP3I",
        "outputId": "1023ca15-6f6f-4c45-92fd-a1594d287ce6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 500\n",
        "predictions[500]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mKaOKrmBX__q",
        "outputId": "24c54c93-8853-4f27-809a-e385b7b1fda5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.00044557], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 500\n",
        "y_prueba[500]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ange6w5-YASx",
        "outputId": "e4430433-fa6a-4a08-d483-cb7b15c38470"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 500\n",
        "i = 500\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "g-nInXhhYAaR",
        "outputId": "f49d9fcc-ebd0-4367-953c-549d5d4fef88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 1400\n",
        "predictions[1400]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZrJJ5fhpYAi7",
        "outputId": "bb504641-b3f8-4219-b471-4311de61f259"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.9975876], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 1400\n",
        "y_prueba[1400]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mZbkk4N-YAwY",
        "outputId": "9ea065e8-8a4f-4b2e-fb7b-c2dcee924b20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 1400\n",
        "i = 1400\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "dGtZDQ-yYA2f",
        "outputId": "66a4ad24-3a70-47a2-c9b9-ae93bd977273"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la primera imagen\n",
        "predictions[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Zoi9G0ZYbUP",
        "outputId": "c2922d31-c358-4978-ee6e-7e1873da7b25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4.6784386e-12], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 82
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la primera imagen\n",
        "y_prueba[1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fLYT4P8cYbb3",
        "outputId": "d6f23a50-b06e-4780-c28a-7ba051cdcafc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la primera imagen\n",
        "i = 1\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "pnX-9iCGYbi3",
        "outputId": "6ec4b206-b018-4304-c3e3-f82644b09cff"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 5508\n",
        "predictions[5508]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PzCq2LUIYb2h",
        "outputId": "cea439d9-7444-4beb-e7b3-bf1e22619f95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 5508\n",
        "y_prueba[5508]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L4QlgiBaYb8U",
        "outputId": "716135f2-e472-442d-ac9d-b21e1773bfed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 5508\n",
        "i = 5508\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "duCmWKzlYcHR",
        "outputId": "0e4369b6-e406-45a0-b2a9-483f512e8c4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeQAAAESCAYAAAAsZab9AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAChP0lEQVR4nO29e5Bk130e9nVPv2d63rMz2Ad2F1gQLwIgQYLiC6RJgwQVihZTtlyKFJesyFJs2SpVWC5JSSWhkoocJ4pSikzZTqocSU4qVYpTkqKSFFu2FAkSI4kPEaAIECRei13M7rynZ/r9mL75o/Wd+fo35/RMDyBihT1f1Vb33L733HPOvXu+8/t+v/M7qSRJEkRERERERES8qUi/2RWIiIiIiIiIiIQcERERERFxSyASckRERERExC2ASMgRERERERG3ACIhR0RERERE3AKIhBwREREREXELIBJyRERERETELYDMm12BiIiIWxP9fh83btxAuVxGKpV6s6sTEfGXFkmSoFqt4uzZs0inw3ZwJOSIiAgvbty4gQsXLrzZ1YiIeMvg+vXrOH/+fPD3SMgRERFelMtlAINBZHp62n/S008DH/7wt65Stxt+//eBd7zjDSkqPqq/OBz3mPb393HhwgX3fyqESMgRERFeUKaenp4OE/LU1LewRrchpqaAUN+foqiIvxic9DEd5/qJQV0RERERERG3ACIhR0RERERE3AKIhBwREREREXELIBJyRERERETELYBIyBEREREREbcAIiFHRERERETcAjjRsqeYsSci4o3BSTP2RERE3H44ESHHjD0REW8sjsvYExERcfvhRITM7CJnz57FxMSEs5LT6bSb5fd6vUGBmQwymUGxBwcHSJLEfc9kMnjyySfxqU99CsViEaVSCdlsFs8//zx+4zd+A1tbW+h2u2i32658YGChdzod9Pt91Ot1NBoNJEni6mGtdr1nv99HKpVy/1hntU76/T76/X6w/el0GhMTE+57KpVCkiQ4ODg4cm6/30eSJJiYmBiq/8HBgbs/ryd4nOeyDSyL/1KpFDKZzMj767PR/rF9pdfbc319Y+vrg60f66z3Z9n2d19Z2l+j7ss+4yefr+86tsPXnkwm497vbDaLdDqNQqGAcrmMXC6HxcVFzM3NIZvNolAoIJvNIpPJIJvNYmJiAuVy2b3T5XIZ2WwW2WwW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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 8\n",
        "predictions[8]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w-B9xPZgZ0-R",
        "outputId": "ba31e02f-e8d2-4a63-df8a-91a6e3f37665"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.9953736], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 8\n",
        "y_prueba[8]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eb_0DWOdZ1GY",
        "outputId": "2d025418-8f59-4c9d-f89b-1fa215bd6b62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Resultado de la imagen 8\n",
        "i = 8\n",
        "plt.figure(figsize=(6,3))\n",
        "plt.subplot(1,2,1)\n",
        "plot_image(i, predictions[i], y_prueba, X_prueba)\n",
        "plt.subplot(1,2,2)\n",
        "plot_value_array(i, predictions[i],  y_prueba)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 291
        },
        "id": "OaDKieRZZ1NC",
        "outputId": "b3527e56-1e00-417c-c128-61e536940f85"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x300 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}